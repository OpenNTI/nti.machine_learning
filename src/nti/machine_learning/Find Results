Searching 15470 files for "supervised"

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/log/tox-0.log:
   23  creating nti.machine_learning-1.0.0.dev0/src/nti/machine_learning
   24  creating nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms
   25: creating nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised
   26: creating nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised/tests
   27: creating nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/unsupervised
   28: creating nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/unsupervised/tests
   29  creating nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/evaluation
   30  creating nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/evaluation/tests
   ..
   67  copying src/nti/machine_learning/algorithms/configure.zcml -> nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms
   68  copying src/nti/machine_learning/algorithms/utils.py -> nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms
   69: copying src/nti/machine_learning/algorithms/supervised/__init__.py -> nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised
   70: copying src/nti/machine_learning/algorithms/supervised/configure.zcml -> nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised
   71: copying src/nti/machine_learning/algorithms/supervised/ensemble.py -> nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised
   72: copying src/nti/machine_learning/algorithms/supervised/interfaces.py -> nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised
   73: copying src/nti/machine_learning/algorithms/supervised/k_nearest_neighbors.py -> nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised
   74: copying src/nti/machine_learning/algorithms/supervised/neural_network.py -> nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised
   75: copying src/nti/machine_learning/algorithms/supervised/regression.py -> nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised
   76: copying src/nti/machine_learning/algorithms/supervised/support_vector_machine.py -> nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised
   77: copying src/nti/machine_learning/algorithms/supervised/tests/__init__.py -> nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised/tests
   78: copying src/nti/machine_learning/algorithms/supervised/tests/test_ensemble.py -> nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised/tests
   79: copying src/nti/machine_learning/algorithms/supervised/tests/test_k_nearest_neighbors.py -> nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised/tests
   80: copying src/nti/machine_learning/algorithms/supervised/tests/test_models.py -> nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised/tests
   81: copying src/nti/machine_learning/algorithms/supervised/tests/test_svm.py -> nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised/tests
   82: copying src/nti/machine_learning/algorithms/unsupervised/__init__.py -> nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/unsupervised
   83: copying src/nti/machine_learning/algorithms/unsupervised/configure.zcml -> nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/unsupervised
   84: copying src/nti/machine_learning/algorithms/unsupervised/density.py -> nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/unsupervised
   85: copying src/nti/machine_learning/algorithms/unsupervised/geometric.py -> nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/unsupervised
   86: copying src/nti/machine_learning/algorithms/unsupervised/interfaces.py -> nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/unsupervised
   87: copying src/nti/machine_learning/algorithms/unsupervised/tests/__init__.py -> nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/unsupervised/tests
   88: copying src/nti/machine_learning/algorithms/unsupervised/tests/test_models.py -> nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/unsupervised/tests
   89  copying src/nti/machine_learning/evaluation/__init__.py -> nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/evaluation
   90  copying src/nti/machine_learning/evaluation/cross_validation.py -> nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/evaluation
   ..
  126  adding 'nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/configure.zcml'
  127  adding 'nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/utils.py'
  128: adding 'nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised/__init__.py'
  129: adding 'nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised/configure.zcml'
  130: adding 'nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised/ensemble.py'
  131: adding 'nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised/interfaces.py'
  132: adding 'nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised/k_nearest_neighbors.py'
  133: adding 'nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised/neural_network.py'
  134: adding 'nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised/regression.py'
  135: adding 'nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised/support_vector_machine.py'
  136: adding 'nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised/tests/__init__.py'
  137: adding 'nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised/tests/test_ensemble.py'
  138: adding 'nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised/tests/test_k_nearest_neighbors.py'
  139: adding 'nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised/tests/test_models.py'
  140: adding 'nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/supervised/tests/test_svm.py'
  141: adding 'nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/unsupervised/__init__.py'
  142: adding 'nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/unsupervised/configure.zcml'
  143: adding 'nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/unsupervised/density.py'
  144: adding 'nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/unsupervised/geometric.py'
  145: adding 'nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/unsupervised/interfaces.py'
  146: adding 'nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/unsupervised/tests/__init__.py'
  147: adding 'nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/algorithms/unsupervised/tests/test_models.py'
  148  adding 'nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/evaluation/__init__.py'
  149  adding 'nti.machine_learning-1.0.0.dev0/src/nti/machine_learning/evaluation/cross_validation.py'

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti.machine_learning-1.0.0.dev0.dist-info/RECORD:
    6  nti/machine_learning/algorithms/configure.zcml,sha256=Zo74P6TRPY3edOI_wJ6-U8R1L2gP005Y2jxh-LRBcAM,388
    7  nti/machine_learning/algorithms/utils.py,sha256=G-iOG_Pvm6_cKkT7PohLe3WjLfowGMnKc3NqOMz723c,2082
    8: nti/machine_learning/algorithms/supervised/__init__.py,sha256=61k30TxfCf3_TkN3oEhPhaq3xAMXAJ9cPJMEwLVK6AA,2900
    9: nti/machine_learning/algorithms/supervised/configure.zcml,sha256=HCq0SaH6h-tJb3DqNfsXxi02PShiwCc5aYVlBQVzgF0,1196
   10: nti/machine_learning/algorithms/supervised/ensemble.py,sha256=EmGhafy6TlwUlSbzQyw5E2ErPgTqdMSA17PV0JyGz80,1174
   11: nti/machine_learning/algorithms/supervised/interfaces.py,sha256=HjSeIDgxZgBc5CxHaDCSCDXSJZ-gRUnaiQNHyvYqFGs,2978
   12: nti/machine_learning/algorithms/supervised/k_nearest_neighbors.py,sha256=WMXYVxr-RSP2gr9a2rNYvJEQ3ib2wEOs0muyP2bFoDI,1930
   13: nti/machine_learning/algorithms/supervised/neural_network.py,sha256=M5yGvX5sGrz9-pmU34s3BK9G1U5M-gDdstT0UQHC2Lg,1279
   14: nti/machine_learning/algorithms/supervised/regression.py,sha256=hshQcYn8FWFPvsuxEhWR3wqaIjrS5ByEynXxsbZfXJc,1140
   15: nti/machine_learning/algorithms/supervised/support_vector_machine.py,sha256=gwG2YUKQnoBVMLaqzoLRFSMwxTQcPaarUrVtM57cuKw,1908
   16: nti/machine_learning/algorithms/supervised/tests/__init__.py,sha256=CNy04YELhQngDr4n9ZB3MdFaTyWlaw-HvwTsbM1wCrc,238
   17: nti/machine_learning/algorithms/supervised/tests/test_ensemble.py,sha256=AsdDy3UoxQ45F3ax-DWUw4Ywb-tWOXQJFI6EBtH0QL0,1542
   18: nti/machine_learning/algorithms/supervised/tests/test_k_nearest_neighbors.py,sha256=uf2BsEV2EMQ2_fNsT8--sNpWUHGsLCdlIpAaghrx4rI,2064
   19: nti/machine_learning/algorithms/supervised/tests/test_models.py,sha256=PsldsReRJHauf_ZNiIWapOpXyKDS15d6-S4km6V8_xE,3982
   20: nti/machine_learning/algorithms/supervised/tests/test_svm.py,sha256=QLgonP4LM6ZRafkvYH9FBTwIgsyCqzFTf3zYfGns_ko,2109
   21: nti/machine_learning/algorithms/unsupervised/__init__.py,sha256=Vh7IqwT-tsCC_CzVVMNtxEZgT7VmoQ-16jzY0t1PWjU,3469
   22: nti/machine_learning/algorithms/unsupervised/configure.zcml,sha256=FZfYABE4e-jqU2J-O2XyfC9AwOHGW1DAHSGadevkTXc,485
   23: nti/machine_learning/algorithms/unsupervised/density.py,sha256=xvZ-VD2Qm4VdKUt1xvwDU7h4yzBCu8GNoi4XLiYH7Cg,1064
   24: nti/machine_learning/algorithms/unsupervised/geometric.py,sha256=_72uGzmWM8G7jKPZ4YyNFDTTBy18pBpRVqWkDLDfFGo,1084
   25: nti/machine_learning/algorithms/unsupervised/interfaces.py,sha256=BV9Q9kzaoH53DTZ5SpBIpSe9J4x5oKKHo_d841ttR2c,2545
   26: nti/machine_learning/algorithms/unsupervised/tests/__init__.py,sha256=CNy04YELhQngDr4n9ZB3MdFaTyWlaw-HvwTsbM1wCrc,238
   27: nti/machine_learning/algorithms/unsupervised/tests/test_models.py,sha256=NLLwPsXj_3TCrCZhv6NIJTzZIP-l70-c163nCZNHxAU,1245
   28  nti/machine_learning/evaluation/__init__.py,sha256=itoWAwyC4o6QsV3keUQBDpqUXTTGZQjoB73EUu9RX1c,218
   29  nti/machine_learning/evaluation/cross_validation.py,sha256=NRNyVqyKHnEBGHWSh-RX4etd_sZkZxpjZKBa7DjfhX4,2256
   ..
   46  nti.machine_learning-1.0.0.dev0.dist-info/INSTALLER,sha256=zuuue4knoyJ-UwPPXg8fezS7VCrXJQrAP7zeNuwvFQg,4
   47  nti/machine_learning/preprocessing/__init__.pyc,,
   48: nti/machine_learning/algorithms/unsupervised/interfaces.pyc,,
   49  nti/machine_learning/evaluation/tests/test_interfaces.pyc,,
   50: nti/machine_learning/algorithms/unsupervised/__init__.pyc,,
   51: nti/machine_learning/algorithms/supervised/tests/test_models.pyc,,
   52: nti/machine_learning/algorithms/unsupervised/tests/test_models.pyc,,
   53: nti/machine_learning/algorithms/supervised/interfaces.pyc,,
   54: nti/machine_learning/algorithms/unsupervised/geometric.pyc,,
   55  nti/machine_learning/evaluation/tests/test_cross_validation.pyc,,
   56  nti/machine_learning/tests/test_interfaces.pyc,,
   57: nti/machine_learning/algorithms/supervised/__init__.pyc,,
   58  nti/machine_learning/evaluation/tests/__init__.pyc,,
   59: nti/machine_learning/algorithms/unsupervised/tests/__init__.pyc,,
   60  nti/machine_learning/tests/__init__.pyc,,
   61: nti/machine_learning/algorithms/supervised/tests/test_ensemble.pyc,,
   62  nti/machine_learning/algorithms/utils.pyc,,
   63: nti/machine_learning/algorithms/supervised/tests/__init__.pyc,,
   64  nti/machine_learning/algorithms/__init__.pyc,,
   65: nti/machine_learning/algorithms/supervised/tests/test_k_nearest_neighbors.pyc,,
   66  nti/machine_learning/evaluation/cross_validation.pyc,,
   67: nti/machine_learning/algorithms/supervised/regression.pyc,,
   68  nti/machine_learning/evaluation/__init__.pyc,,
   69: nti/machine_learning/algorithms/supervised/ensemble.pyc,,
   70  nti/machine_learning/interfaces.pyc,,
   71: nti/machine_learning/algorithms/supervised/tests/test_svm.pyc,,
   72: nti/machine_learning/algorithms/unsupervised/density.pyc,,
   73  nti/machine_learning/__init__.pyc,,
   74: nti/machine_learning/algorithms/supervised/support_vector_machine.pyc,,
   75: nti/machine_learning/algorithms/supervised/neural_network.pyc,,
   76: nti/machine_learning/algorithms/supervised/k_nearest_neighbors.pyc,,
   77  nti/machine_learning/evaluation/interfaces.pyc,,
   78  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/machine_learning/algorithms/__init__.py:
   10  logger = __import__('logging').getLogger(__name__)
   11  
   12: from nti.machine_learning.algorithms.unsupervised.density import DBScan
   13  
   14: from nti.machine_learning.algorithms.unsupervised.geometric import KMeans
   15  
   16: from nti.machine_learning.algorithms.supervised.neural_network import NeuralNetwork
   17  
   18: from nti.machine_learning.algorithms.supervised.regression import Regressor
   19  
   20: from nti.machine_learning.algorithms.supervised.support_vector_machine import SupportVectorMachine
   21  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/machine_learning/algorithms/configure.zcml:
    7      <include package="zope.component" />
    8  
    9:     <include package=".supervised" />
   10:     <include package=".unsupervised" />
   11  
   12  </configure>

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/machine_learning/algorithms/supervised/__init__.py:
   16  from nti.machine_learning import AbstractDataSet
   17  
   18: from nti.machine_learning.algorithms.supervised.interfaces import ISupervisedModel
   19: from nti.machine_learning.algorithms.supervised.interfaces import ISupervisedDataSet
   20  
   21  from nti.property.property import alias
   ..
   26  
   27  
   28: @interface.implementer(ISupervisedDataSet)
   29: class SupervisedDataSet(AbstractDataSet, SchemaConfigured):
   30      """
   31      Class managing a data set for use by
   32:     a supervised learning model.
   33      """
   34:     createDirectFieldProperties(ISupervisedDataSet)
   35  
   36      data = alias('_data')
   ..
   70  
   71  
   72: @interface.implementer(ISupervisedModel)
   73: class SupervisedModel(Model, SchemaConfigured):
   74      """
   75:     A supervised learning model
   76      """
   77:     createDirectFieldProperties(ISupervisedModel)
   78  
   79      data = alias('_data')
   ..
   94          if len(data_frame) <= 1:
   95              raise ValueError("Insufficient data set size")
   96:         self._data = SupervisedDataSet(data_frame, prediction_columns)
   97  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/machine_learning/algorithms/supervised/ensemble.py:
   14  from sklearn.ensemble import RandomForestClassifier
   15  
   16: from nti.machine_learning.algorithms.supervised import SupervisedModel
   17  
   18: from nti.machine_learning.algorithms.supervised.interfaces import IEnsembleRandomForestClassifier
   19  
   20  from nti.machine_learning.evaluation.cross_validation import KFoldCrossValidation
   21  
   22  @interface.implementer(IEnsembleRandomForestClassifier)
   23: class EnsembleRandomForestClassifier(SupervisedModel):
   24      
   25      def classify(self, inputs):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/machine_learning/algorithms/supervised/interfaces.py:
   16  
   17  
   18: class ISupervisedModel(IModel):
   19      """
   20:     Interface that models a supervised learning model
   21      """
   22      success_rate = Number(title=u"Success Rate",
   ..
   46  
   47  
   48: class ISupervisedDataSet(IDataSet):
   49      """
   50      Outlines the necessary components to structure
   ..
   73  
   74  
   75: class INeuralNetwork(ISupervisedModel):
   76      """
   77      Outlines an ANN learning model that has an
   ..
   84  
   85          The only difference between this train and the
   86:         ISupervisedModel train is this train allows for the
   87          configurability of the layers, which is required rather
   88          than using a default in kwargs.
   ..
   90  
   91  
   92: class ISVM(ISupervisedModel):
   93      """
   94      Outlines a Support Vector Machine learning model.
   95      """
   96  
   97: class ILinearSupportVectorClassification(ISupervisedModel):
   98      """
   99      Outlines a Linear Support Vector Classification
  ...
  101  
  102  
  103: class IRegressor(ISupervisedModel):
  104      """
  105      Outlines a regression model
  ...
  107  
  108  
  109: class IKNearestNeighborsClassifier(ISupervisedModel):
  110      """
  111      Outlines of a k-Nearest Neighbors classifier
  ...
  113  
  114  
  115: class IKNearestNeighborsRegressor(ISupervisedModel):
  116      """
  117      Outlines of a k-Nearest Neighbors regressor
  118      """
  119  
  120: class IEnsembleRandomForestClassifier(ISupervisedModel):
  121      """
  122      Outlines of a Random Forest Classifier

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/machine_learning/algorithms/supervised/k_nearest_neighbors.py:
   15  from sklearn.neighbors import KNeighborsClassifier
   16  
   17: from nti.machine_learning.algorithms.supervised import SupervisedModel
   18  
   19: from nti.machine_learning.algorithms.supervised.interfaces import IKNearestNeighborsRegressor
   20: from nti.machine_learning.algorithms.supervised.interfaces import IKNearestNeighborsClassifier
   21  
   22  from nti.machine_learning.evaluation.cross_validation import KFoldCrossValidation
   ..
   24  
   25  @interface.implementer(IKNearestNeighborsClassifier)
   26: class KNearestNeighborsClassifier(SupervisedModel):
   27  
   28      def classify(self, inputs):
   ..
   38  
   39  @interface.implementer(IKNearestNeighborsRegressor)
   40: class KNearestNeighborsRegressor(SupervisedModel):
   41  
   42      def predict(self, inputs):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/machine_learning/algorithms/supervised/neural_network.py:
   14  from zope import interface
   15  
   16: from nti.machine_learning.algorithms.supervised import SupervisedModel
   17  
   18: from nti.machine_learning.algorithms.supervised.interfaces import INeuralNetwork
   19  
   20  from nti.machine_learning.evaluation.cross_validation import KFoldCrossValidation
   ..
   22  
   23  @interface.implementer(INeuralNetwork)
   24: class NeuralNetwork(SupervisedModel):
   25      """
   26      Abstraction of a multi-layer perceptron classifier from sci-kit learn

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/machine_learning/algorithms/supervised/regression.py:
   16  from zope import interface
   17  
   18: from nti.machine_learning.algorithms.supervised import SupervisedModel
   19  
   20: from nti.machine_learning.algorithms.supervised.interfaces import IRegressor
   21  
   22  from nti.machine_learning.evaluation.cross_validation import KFoldCrossValidation
   ..
   24  
   25  @interface.implementer(IRegressor)
   26: class Regressor(SupervisedModel):
   27  
   28      def train(self, data_frame, prediction_columns, **kwargs):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/machine_learning/algorithms/supervised/support_vector_machine.py:
   15  from zope import interface
   16  
   17: from nti.machine_learning.algorithms.supervised import SupervisedModel
   18  
   19: from nti.machine_learning.algorithms.supervised.interfaces import ISVM
   20: from nti.machine_learning.algorithms.supervised.interfaces import ILinearSupportVectorClassification
   21  
   22  from nti.machine_learning.evaluation.cross_validation import KFoldCrossValidation
   ..
   24  
   25  @interface.implementer(ISVM)
   26: class SupportVectorMachine(SupervisedModel):
   27      """
   28      Abstraction of the SciKit Learn Support Vector Machine.
   ..
   42  
   43  @interface.implementer(ILinearSupportVectorClassification)
   44: class LinearSupportVectorClassification(SupervisedModel):
   45  
   46      def classify(self, inputs):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/machine_learning/algorithms/supervised/tests/test_ensemble.py:
   15  from nti.testing.matchers import validly_provides
   16  
   17: from nti.machine_learning.algorithms.supervised.interfaces import IEnsembleRandomForestClassifier
   18  
   19  from nti.machine_learning.tests import BinaryClassifierLayerTest

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/machine_learning/algorithms/supervised/tests/test_k_nearest_neighbors.py:
   15  from nti.testing.matchers import validly_provides
   16  
   17: from nti.machine_learning.algorithms.supervised.interfaces import IKNearestNeighborsRegressor
   18: from nti.machine_learning.algorithms.supervised.interfaces import IKNearestNeighborsClassifier
   19  
   20  from nti.machine_learning.tests import RegressorLayerTest

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/machine_learning/algorithms/supervised/tests/test_models.py:
   16  from nti.testing.matchers import validly_provides
   17  
   18: from nti.machine_learning.algorithms.supervised.interfaces import ISVM
   19: from nti.machine_learning.algorithms.supervised.interfaces import IRegressor
   20: from nti.machine_learning.algorithms.supervised.interfaces import INeuralNetwork
   21: from nti.machine_learning.algorithms.supervised.interfaces import IKNearestNeighborsRegressor
   22: from nti.machine_learning.algorithms.supervised.interfaces import IKNearestNeighborsClassifier
   23: from nti.machine_learning.algorithms.supervised.interfaces import ILinearSupportVectorClassification
   24: from nti.machine_learning.algorithms.supervised.interfaces import IEnsembleRandomForestClassifier
   25  
   26: from nti.machine_learning.tests import SupervisedLearningLayerTest
   27  
   28  
   29: class TestSupervisedModels(SupervisedLearningLayerTest):
   30      """
   31:     Test the validity of the various supervised models.
   32      """
   33  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/machine_learning/algorithms/supervised/tests/test_svm.py:
   15  from nti.testing.matchers import validly_provides
   16  
   17: from nti.machine_learning.algorithms.supervised.interfaces import ISVM
   18: from nti.machine_learning.algorithms.supervised.interfaces import ILinearSupportVectorClassification
   19  
   20  from nti.machine_learning.tests import BinaryClassifierLayerTest

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/machine_learning/algorithms/unsupervised/__init__.py:
   15  from nti.machine_learning import AbstractDataSet
   16  
   17: from nti.machine_learning.algorithms.unsupervised.interfaces import IUnsupervisedModel
   18: from nti.machine_learning.algorithms.unsupervised.interfaces import IUnsupervisedDataSet
   19  
   20  from nti.property.property import alias
   ..
   25  
   26  
   27: @interface.implementer(IUnsupervisedModel)
   28  class AbstractClusterModel(Model, SchemaConfigured):
   29      """
   ..
   33      and marks all points as not yet belonging to any cluster.
   34      """
   35:     createDirectFieldProperties(IUnsupervisedModel)
   36  
   37      data = alias('_data')
   ..
   48              raise ValueError('Points list length must be > 1')
   49          self._dimensions = len(data_frame.columns)
   50:         self._data = UnsupervisedDataSet(data_frame)
   51  
   52  
   53: @interface.implementer(IUnsupervisedDataSet)
   54: class UnsupervisedDataSet(AbstractDataSet):
   55      """
   56:     Impelmentation of an unsupervised data set. Manages the point
   57      storage as well as cluster creation and changes
   58      """
   59:     createDirectFieldProperties(IUnsupervisedDataSet)
   60  
   61      CLUSTER = alias('_CLUSTER')

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/machine_learning/algorithms/unsupervised/density.py:
   14  from zope import interface
   15  
   16: from nti.machine_learning.algorithms.unsupervised import AbstractClusterModel
   17  
   18: from nti.machine_learning.algorithms.unsupervised.interfaces import IDBScan
   19  
   20  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/machine_learning/algorithms/unsupervised/geometric.py:
   14  from zope import interface
   15  
   16: from nti.machine_learning.algorithms.unsupervised import AbstractClusterModel
   17  
   18: from nti.machine_learning.algorithms.unsupervised.interfaces import IKMeans
   19  
   20  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/machine_learning/algorithms/unsupervised/interfaces.py:
   18  
   19  
   20: class IUnsupervisedModel(IModel):
   21      """
   22:     Outlines an unsupervised clustering model
   23      """
   24  
   ..
   39  
   40  
   41: class IUnsupervisedDataSet(IDataSet):
   42      """
   43:     Outlines the data and structure for an IUnsupervisedModel
   44      """
   45  
   46      CLUSTER = TextLine(title=u"Cluster",
   47:                        description=u"The cluster column in an unsupervised data set",
   48                         default=u"cluster",
   49                         readonly=True)
   ..
   92  
   93  
   94: class IKMeans(IUnsupervisedModel):
   95      """
   96      Represents a KMeans clustering model.
   ..
   98  
   99  
  100: class IDBScan(IUnsupervisedModel):
  101      """
  102      Represents a DBScan clustering model

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/machine_learning/algorithms/unsupervised/tests/test_models.py:
   14  from nti.testing.matchers import validly_provides
   15  
   16: from nti.machine_learning.algorithms.unsupervised.interfaces import IDBScan
   17: from nti.machine_learning.algorithms.unsupervised.interfaces import IKMeans
   18  
   19: from nti.machine_learning.tests import UnsupervisedLearningLayerTest
   20  
   21  
   22: class TestUnsupervisedModels(UnsupervisedLearningLayerTest):
   23      """
   24:     Test known available unsupervised models
   25      """
   26  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/machine_learning/tests/__init__.py:
   54  
   55  
   56: class SupervisedLearningLayerTest(unittest.TestCase):
   57  
   58      layer = SharedConfiguringTestLayer
   ..
   70  
   71  
   72: class UnsupervisedLearningLayerTest(unittest.TestCase):
   73  
   74      layer = SharedConfiguringTestLayer

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/scikit_learn-0.19.0.dist-info/RECORD:
  292  sklearn/metrics/cluster/expected_mutual_info_fast.so,sha256=4O4q87S5AXkSnShAuh5ywHpW8n6RwIvS2_9Bhq2XC8c,265732
  293  sklearn/metrics/cluster/setup.py,sha256=135i_ZVJ097uYUMbaTySBGxsZTIdwEtKmk9SU1d1zz0,672
  294: sklearn/metrics/cluster/supervised.py,sha256=qUg8phXk9tpEBksUsO7-KnysikmYPCBcabOCbwpDi7E,31406
  295: sklearn/metrics/cluster/unsupervised.py,sha256=My42456OvP6jDxs4vYuXviFtSog70EmR7ftv4JPB6-k,10322
  296  sklearn/metrics/cluster/tests/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
  297  sklearn/metrics/cluster/tests/test_bicluster.py,sha256=krjuUT5GB0zGX9fhTi58yehCYgZgIAs88nBd8eNXlDo,1770
  298: sklearn/metrics/cluster/tests/test_supervised.py,sha256=RPHV-1txRqc5dE997x3dmrB67kOI5fcvZ6hLG-Yi_XQ,10317
  299: sklearn/metrics/cluster/tests/test_unsupervised.py,sha256=0IjBObt__LQC-qKFmisWhkJ2zJSXaICYM2wS00Esdrs,5806
  300  sklearn/metrics/tests/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
  301  sklearn/metrics/tests/test_classification.py,sha256=7bb9j_unjoBy6BxcdenIXBgTdtsHEJAUYT9nwbLRFiY,61479
  ...
  340  sklearn/neighbors/setup.py,sha256=Rh2BVzgOd-t_C9LE4G7_rfKX1VreEjghqAk6D1m7Tpg,1460
  341  sklearn/neighbors/typedefs.so,sha256=l4NYYy6eAUGGim1CwH9kHJ9YD6l3zmkH6iSLmtffP1s,59084
  342: sklearn/neighbors/unsupervised.py,sha256=2_iCZMbVia8H2P0c4fAXoe7RCSSzN-GnXwoxP_teYtg,4756
  343  sklearn/neighbors/tests/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
  344  sklearn/neighbors/tests/test_approximate.py,sha256=ZeF3XJktHPsbW1UN9QB98F1tX6W0szP_adlS_Raa1uc,20126
  ...
  370  sklearn/preprocessing/tests/test_imputation.py,sha256=PVJvO3VI9fGknLg2EFHom08ZjiWkwgFKxoXVgKTpnyY,12300
  371  sklearn/preprocessing/tests/test_label.py,sha256=OmRSLz0d6qyCnc0E89wHTvB9t7Ec5XQaPhyVVqvwUMk,18521
  372: sklearn/semi_supervised/__init__.py,sha256=CPSy7rd4IJNHgwecK3eklBwpjp-sM9Ozr1fwPUnR808,371
  373: sklearn/semi_supervised/label_propagation.py,sha256=46z2nt0PqIqd-6dZpOTjj1yfbb39FjqyLzBCJ7vC9sE,18811
  374: sklearn/semi_supervised/tests/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
  375: sklearn/semi_supervised/tests/test_label_propagation.py,sha256=e72GY2z3PnihuR6IJKFnP_a3Rqhbi709QONi5sglnRM,6187
  376  sklearn/svm/__init__.py,sha256=4DLbBfHnmXDNJYemvafoYJyBiMZd8VbV2mFu5fLWz4c,806
  377  sklearn/svm/base.py,sha256=fULUZSte034V2iKefPS367pEc_2Cf2wJFr1Byfxn6E8,34866
  ...
  508  sklearn/neighbors/__init__.pyc,,
  509  sklearn/datasets/samples_generator.pyc,,
  510: sklearn/metrics/cluster/unsupervised.pyc,,
  511  sklearn/utils/tests/test_graph.pyc,,
  512  sklearn/naive_bayes.pyc,,
  ...
  539  sklearn/mixture/__init__.pyc,,
  540  sklearn/utils/sparsetools/setup.pyc,,
  541: sklearn/semi_supervised/__init__.pyc,,
  542  sklearn/cluster/birch.pyc,,
  543  sklearn/preprocessing/label.pyc,,
  ...
  629  sklearn/ensemble/tests/test_gradient_boosting_loss_functions.pyc,,
  630  sklearn/datasets/olivetti_faces.pyc,,
  631: sklearn/metrics/cluster/tests/test_unsupervised.pyc,,
  632  sklearn/cluster/bicluster.pyc,,
  633  sklearn/utils/multiclass.pyc,,
  ...
  667  sklearn/feature_extraction/tests/test_text.pyc,,
  668  sklearn/ensemble/__init__.pyc,,
  669: sklearn/metrics/cluster/tests/test_supervised.pyc,,
  670  sklearn/neighbors/graph.pyc,,
  671  sklearn/ensemble/partial_dependence.pyc,,
  ...
  695  sklearn/decomposition/tests/test_fastica.pyc,,
  696  sklearn/utils/tests/test_sparsefuncs.pyc,,
  697: sklearn/metrics/cluster/supervised.pyc,,
  698  sklearn/metrics/tests/test_score_objects.pyc,,
  699  sklearn/tests/test_isotonic.pyc,,
  ...
  764  sklearn/ensemble/tests/__init__.pyc,,
  765  sklearn/externals/joblib/pool.pyc,,
  766: sklearn/semi_supervised/label_propagation.pyc,,
  767  sklearn/tests/test_common.pyc,,
  768  sklearn/feature_selection/tests/test_from_model.pyc,,
  ...
  801  sklearn/cluster/tests/test_birch.pyc,,
  802  sklearn/utils/tests/test_seq_dataset.pyc,,
  803: sklearn/semi_supervised/tests/test_label_propagation.pyc,,
  804  sklearn/metrics/tests/test_classification.pyc,,
  805  sklearn/base.pyc,,
  ...
  830  sklearn/model_selection/tests/common.pyc,,
  831  sklearn/random_projection.pyc,,
  832: sklearn/neighbors/unsupervised.pyc,,
  833  sklearn/linear_model/tests/test_huber.pyc,,
  834  sklearn/exceptions.pyc,,
  ...
  869  sklearn/mixture/tests/test_gmm.pyc,,
  870  sklearn/utils/__init__.pyc,,
  871: sklearn/semi_supervised/tests/__init__.pyc,,
  872  sklearn/feature_selection/tests/test_variance_threshold.pyc,,
  873  sklearn/externals/joblib/__init__.pyc,,

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/__init__.py:
  143                 'mixture', 'model_selection', 'multiclass', 'multioutput',
  144                 'naive_bayes', 'neighbors', 'neural_network', 'pipeline',
  145:                'preprocessing', 'random_projection', 'semi_supervised',
  146                 'svm', 'tree', 'discriminant_analysis',
  147                 # Non-modules:

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/base.py:
  515          # method is possible for a given clustering algorithm
  516          if y is None:
  517:             # fit method of arity 1 (unsupervised transformation)
  518              return self.fit(X, **fit_params).transform(X)
  519          else:
  520:             # fit method of arity 2 (supervised transformation)
  521              return self.fit(X, y, **fit_params).transform(X)
  522  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/calibration.py:
   97             Regularized Likelihood Methods, J. Platt, (1999)
   98  
   99:     .. [4] Predicting Good Probabilities with Supervised Learning,
  100             A. Niculescu-Mizil & R. Caruana, ICML 2005
  101      """
  ...
  277             Regularized Likelihood Methods, J. Platt, (1999)
  278  
  279:     .. [4] Predicting Good Probabilities with Supervised Learning,
  280             A. Niculescu-Mizil & R. Caruana, ICML 2005
  281      """
  ...
  545      ----------
  546      Alexandru Niculescu-Mizil and Rich Caruana (2005) Predicting Good
  547:     Probabilities With Supervised Learning, in Proceedings of the 22nd
  548      International Conference on Machine Learning (ICML).
  549      See section 4 (Qualitative Analysis of Predictions).

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/cluster/__init__.py:
    1  """
    2: The :mod:`sklearn.cluster` module gathers popular unsupervised clustering
    3  algorithms.
    4  """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/cross_validation.py:
 1312      y : array-like, optional, default: None
 1313          The target variable to try to predict in the case of
 1314:         supervised learning.
 1315  
 1316      cv : int, cross-validation generator or an iterable, optional
 ....
 1414      y : array-like, optional, default: None
 1415          The target variable to try to predict in the case of
 1416:         supervised learning.
 1417  
 1418      train : array-like, shape (n_train_samples,)
 ....
 1496      y : array-like, optional, default: None
 1497          The target variable to try to predict in the case of
 1498:         supervised learning.
 1499  
 1500      scoring : string, callable or None, optional, default: None
 ....
 1598      y : array-like, optional, default: None
 1599          The target variable to try to predict in the case of
 1600:         supervised learning.
 1601  
 1602      scorer : callable
 ....
 1815  
 1816      y : array-like
 1817:         The target variable for a supervised learning problem.
 1818  
 1819      classifier : boolean optional
 ....
 1866      y : array-like
 1867          The target variable to try to predict in the case of
 1868:         supervised learning.
 1869  
 1870      scoring : string, callable or None, optional, default: None

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/datasets/base.py:
   89                  ...
   90  
   91:     The folder names are used as supervised signal label names. The individual
   92      file names are not important.
   93  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/datasets/kddcup99.py:
   56      a closed network and hand-injected attacks to produce a large number of
   57      different types of attack with normal activity in the background.
   58:     As the initial goal was to produce a large training set for supervised
   59      learning algorithms, there is a large proportion (80.1%) of abnormal
   60:     data which is unrealistic in real world, and inappropriate for unsupervised
   61      anomaly detection which aims at detecting 'abnormal' data, ie
   62  
   ..
  169  
  170      .. [2] K. Yamanishi, J.-I. Takeuchi, G. Williams, and P. Milne. Online
  171:            unsupervised outlier detection using finite mixtures with
  172             discounting learning algorithms. In Proceedings of the sixth
  173             ACM SIGKDD international conference on Knowledge discovery

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/ensemble/forest.py:
 1708      """An ensemble of totally random trees.
 1709  
 1710:     An unsupervised transformation of a dataset to a high-dimensional
 1711      sparse representation. A datapoint is coded according to which leaf of
 1712      each tree it is sorted into. Using a one-hot encoding of the leaves,

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/feature_selection/mutual_info_.py:
    8  
    9  from ..externals.six import moves
   10: from ..metrics.cluster.supervised import mutual_info_score
   11  from ..neighbors import NearestNeighbors
   12  from ..preprocessing import scale

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/feature_selection/rfe.py:
   51      ----------
   52      estimator : object
   53:         A supervised learning estimator with a ``fit`` method that provides
   54          information about feature importance either through a ``coef_``
   55          attribute or through a ``feature_importances_`` attribute.
   ..
  280      ----------
  281      estimator : object
  282:         A supervised learning estimator with a ``fit`` method that provides
  283          information about feature importance either through a ``coef_``
  284          attribute or through a ``feature_importances_`` attribute.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/feature_selection/variance_threshold.py:
   14  
   15      This feature selection algorithm looks only at the features (X), not the
   16:     desired outputs (y), and can thus be used for unsupervised learning.
   17  
   18      Read more in the :ref:`User Guide <variance_threshold>`.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/grid_search.py:
  421          y : array-like, shape = [n_samples] or [n_samples, n_output], optional
  422              Target relative to X for classification or regression;
  423:             None for unsupervised learning.
  424  
  425          Returns
  ...
  833          y : array-like, shape = [n_samples] or [n_samples, n_output], optional
  834              Target relative to X for classification or regression;
  835:             None for unsupervised learning.
  836  
  837          """
  ...
 1038          y : array-like, shape = [n_samples] or [n_samples, n_output], optional
 1039              Target relative to X for classification or regression;
 1040:             None for unsupervised learning.
 1041  
 1042          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/learning_curve.py:
   58      y : array-like, shape (n_samples) or (n_samples, n_features), optional
   59          Target relative to X for classification or regression;
   60:         None for unsupervised learning.
   61  
   62      train_sizes : array-like, shape (n_ticks,), dtype float or int
   ..
  287      y : array-like, shape (n_samples) or (n_samples, n_features), optional
  288          Target relative to X for classification or regression;
  289:         None for unsupervised learning.
  290  
  291      param_name : string

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/metrics/cluster/__init__.py:
    3  cluster analysis results. There are two forms of evaluation:
    4  
    5: - supervised, which uses a ground truth class values for each sample.
    6: - unsupervised, which does not and measures the 'quality' of the model itself.
    7  """
    8: from .supervised import adjusted_mutual_info_score
    9: from .supervised import normalized_mutual_info_score
   10: from .supervised import adjusted_rand_score
   11: from .supervised import completeness_score
   12: from .supervised import contingency_matrix
   13: from .supervised import expected_mutual_information
   14: from .supervised import homogeneity_completeness_v_measure
   15: from .supervised import homogeneity_score
   16: from .supervised import mutual_info_score
   17: from .supervised import v_measure_score
   18: from .supervised import fowlkes_mallows_score
   19: from .supervised import entropy
   20: from .unsupervised import silhouette_samples
   21: from .unsupervised import silhouette_score
   22: from .unsupervised import calinski_harabaz_score
   23  from .bicluster import consensus_score
   24  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/metrics/cluster/unsupervised.py:
    1: """Unsupervised evaluation metrics."""
    2  
    3  # Authors: Robert Layton <robertlayton@gmail.com>

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/metrics/scorer.py:
   11  The signature of the call is ``(estimator, X, y)`` where ``estimator``
   12  is the model to be evaluated, ``X`` is the test data and ``y`` is the
   13: ground truth labeling (or ``None`` in the case of unsupervised models).
   14  """
   15  
   ..
  541                 log_loss=log_loss_scorer,
  542                 neg_log_loss=neg_log_loss_scorer,
  543:                # Cluster metrics that use supervised evaluation
  544                 adjusted_rand_score=adjusted_rand_scorer,
  545                 homogeneity_score=homogeneity_scorer,

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/metrics/tests/test_score_objects.py:
   54                 'neg_log_loss', 'log_loss']
   55  
   56: # All supervised cluster scorers (They behave like classification metric)
   57  CLUSTER_SCORERS = ["adjusted_rand_score",
   58                     "homogeneity_score",
   ..
  411  
  412  
  413: def test_supervised_cluster_scorers():
  414      # Test clustering scorers against gold standard labeling.
  415      X, y = make_blobs(random_state=0, centers=2)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/model_selection/_search.py:
  423          y : array-like, shape = [n_samples] or [n_samples, n_output], optional
  424              Target relative to X for classification or regression;
  425:             None for unsupervised learning.
  426  
  427          Returns
  ...
  568          y : array-like, shape = [n_samples] or [n_samples, n_output], optional
  569              Target relative to X for classification or regression;
  570:             None for unsupervised learning.
  571  
  572          groups : array-like, with shape (n_samples,), optional

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/model_selection/_split.py:
   71  
   72          y : array-like, of length n_samples
   73:             The target variable for supervised learning problems.
   74  
   75          groups : array-like, with shape (n_samples,), optional
   ..
  302  
  303          y : array-like, shape (n_samples,)
  304:             The target variable for supervised learning problems.
  305  
  306          groups : array-like, with shape (n_samples,), optional
  ...
  642  
  643          y : array-like, shape (n_samples,)
  644:             The target variable for supervised learning problems.
  645              Stratification is done based on the y labels.
  646  
  ...
 1007  
 1008          y : array-like, of length n_samples
 1009:             The target variable for supervised learning problems.
 1010  
 1011          groups : array-like, with shape (n_samples,), optional
 ....
 1173  
 1174          y : array-like, shape (n_samples,)
 1175:             The target variable for supervised learning problems.
 1176  
 1177          groups : array-like, with shape (n_samples,), optional
 ....
 1593  
 1594          y : array-like, shape (n_samples,)
 1595:             The target variable for supervised learning problems.
 1596              Stratification is done based on the y labels.
 1597  
 ....
 1870  
 1871      y : array-like, optional
 1872:         The target variable for supervised learning problems.
 1873  
 1874      classifier : boolean, optional, default False

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/model_selection/_validation.py:
   53      y : array-like, optional, default: None
   54          The target variable to try to predict in the case of
   55:         supervised learning.
   56  
   57      groups : array-like, with shape (n_samples,), optional
   ..
  231      y : array-like, optional, default: None
  232          The target variable to try to predict in the case of
  233:         supervised learning.
  234  
  235      groups : array-like, with shape (n_samples,), optional
  ...
  339      y : array-like, optional, default: None
  340          The target variable to try to predict in the case of
  341:         supervised learning.
  342  
  343      scorer : A single callable or dict mapping scorer name to the callable
  ...
  565      y : array-like, optional, default: None
  566          The target variable to try to predict in the case of
  567:         supervised learning.
  568  
  569      groups : array-like, with shape (n_samples,), optional
  ...
  690      y : array-like, optional, default: None
  691          The target variable to try to predict in the case of
  692:         supervised learning.
  693  
  694      train : array-like, shape (n_train_samples,)
  ...
  791      y : array-like
  792          The target variable to try to predict in the case of
  793:         supervised learning.
  794  
  795      groups : array-like, with shape (n_samples,), optional
  ...
  942      y : array-like, shape (n_samples) or (n_samples, n_features), optional
  943          Target relative to X for classification or regression;
  944:         None for unsupervised learning.
  945  
  946      groups : array-like, with shape (n_samples,), optional
  ...
 1178      y : array-like, shape (n_samples) or (n_samples, n_features), optional
 1179          Target relative to X for classification or regression;
 1180:         None for unsupervised learning.
 1181  
 1182      param_name : string

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/model_selection/tests/test_search.py:
  654  
  655  
  656: def test_unsupervised_grid_search():
  657:     # test grid-search with unsupervised estimator
  658      X, y = make_blobs(random_state=0)
  659      km = KMeans(random_state=0)
  660  
  661:     # Multi-metric evaluation unsupervised
  662      scoring = ['adjusted_rand_score', 'fowlkes_mallows_score']
  663      for refit in ['adjusted_rand_score', 'fowlkes_mallows_score']:
  ...
  668          assert_equal(grid_search.best_params_["n_clusters"], 3)
  669  
  670:     # Single metric evaluation unsupervised
  671      grid_search = GridSearchCV(km, param_grid=dict(n_clusters=[2, 3, 4]),
  672                                 scoring='fowlkes_mallows_score')

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/model_selection/tests/test_validation.py:
  879  
  880  
  881: def test_learning_curve_unsupervised():
  882      X, _ = make_classification(n_samples=30, n_features=1, n_informative=1,
  883                                 n_redundant=0, n_classes=2,
  ...
  938  
  939  
  940: def test_learning_curve_incremental_learning_unsupervised():
  941      X, _ = make_classification(n_samples=30, n_features=1, n_informative=1,
  942                                 n_redundant=0, n_classes=2,

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/naive_bayes.py:
    3  """
    4  The :mod:`sklearn.naive_bayes` module implements Naive Bayes algorithms. These
    5: are supervised learning methods based on applying Bayes' theorem with strong
    6  (naive) feature independence assumptions.
    7  """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/neighbors/__init__.py:
    8  from .dist_metrics import DistanceMetric
    9  from .graph import kneighbors_graph, radius_neighbors_graph
   10: from .unsupervised import NearestNeighbors
   11  from .classification import KNeighborsClassifier, RadiusNeighborsClassifier
   12  from .regression import KNeighborsRegressor, RadiusNeighborsRegressor

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/neighbors/base.py:
  728  
  729  
  730: class SupervisedFloatMixin(object):
  731      def fit(self, X, y):
  732          """Fit the model using X as training data and y as target values
  ...
  748  
  749  
  750: class SupervisedIntegerMixin(object):
  751      def fit(self, X, y):
  752          """Fit the model using X as training data and y as target values
  ...
  791  
  792  
  793: class UnsupervisedMixin(object):
  794      def fit(self, X, y=None):
  795          """Fit the model using X as training data

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/neighbors/classification.py:
   16      _check_weights, _get_weights, \
   17      NeighborsBase, KNeighborsMixin,\
   18:     RadiusNeighborsMixin, SupervisedIntegerMixin
   19  from ..base import ClassifierMixin
   20  from ..utils import check_array
   ..
   22  
   23  class KNeighborsClassifier(NeighborsBase, KNeighborsMixin,
   24:                            SupervisedIntegerMixin, ClassifierMixin):
   25      """Classifier implementing the k-nearest neighbors vote.
   26  
   ..
  226  
  227  class RadiusNeighborsClassifier(NeighborsBase, RadiusNeighborsMixin,
  228:                                 SupervisedIntegerMixin, ClassifierMixin):
  229      """Classifier implementing a vote among neighbors within a given radius
  230  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/neighbors/graph.py:
    6  
    7  from .base import KNeighborsMixin, RadiusNeighborsMixin
    8: from .unsupervised import NearestNeighbors
    9  
   10  
   ..
   36      """Computes the (weighted) graph of k-Neighbors for points in X
   37  
   38:     Read more in the :ref:`User Guide <unsupervised_neighbors>`.
   39  
   40      Parameters
   ..
  111      radius.
  112  
  113:     Read more in the :ref:`User Guide <unsupervised_neighbors>`.
  114  
  115      Parameters

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/neighbors/lof.py:
    9  from .base import NeighborsBase
   10  from .base import KNeighborsMixin
   11: from .base import UnsupervisedMixin
   12  
   13  from ..utils.validation import check_is_fitted
   ..
   17  
   18  
   19: class LocalOutlierFactor(NeighborsBase, KNeighborsMixin, UnsupervisedMixin):
   20:     """Unsupervised Outlier Detection using Local Outlier Factor (LOF)
   21  
   22      The anomaly score of each sample is called Local Outlier Factor.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/neighbors/regression.py:
   12  
   13  from .base import _get_weights, _check_weights, NeighborsBase, KNeighborsMixin
   14: from .base import RadiusNeighborsMixin, SupervisedFloatMixin
   15  from ..base import RegressorMixin
   16  from ..utils import check_array
   ..
   18  
   19  class KNeighborsRegressor(NeighborsBase, KNeighborsMixin,
   20:                           SupervisedFloatMixin,
   21                            RegressorMixin):
   22      """Regression based on k-nearest neighbors.
   ..
  167  
  168  class RadiusNeighborsRegressor(NeighborsBase, RadiusNeighborsMixin,
  169:                                SupervisedFloatMixin,
  170                                 RegressorMixin):
  171      """Regression based on neighbors within a fixed radius.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/neighbors/tests/test_neighbors.py:
   62  
   63  
   64: def test_unsupervised_kneighbors(n_samples=20, n_features=5,
   65                                   n_query_pts=2, n_neighbors=5):
   66:     # Test unsupervised neighbors methods
   67      X = rng.rand(n_samples, n_features)
   68  
   ..
   89  
   90  
   91: def test_unsupervised_inputs():
   92      # test the types of valid input into NearestNeighbors
   93      X = rng.random_sample((10, 3))
   ..
  109  
  110  def test_precomputed(random_state=42):
  111:     """Tests unsupervised NearestNeighbors with a distance matrix."""
  112      # Note: smaller samples may result in spurious test success
  113      rng = np.random.RandomState(random_state)
  ...
  178  
  179  
  180: def test_unsupervised_radius_neighbors(n_samples=20, n_features=5,
  181                                         n_query_pts=2, radius=0.5,
  182                                         random_state=0):
  183:     # Test unsupervised radius-based query
  184      rng = np.random.RandomState(random_state)
  185  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/neighbors/unsupervised.py:
    1: """Unsupervised nearest neighbors learner"""
    2  
    3  from .base import NeighborsBase
    4  from .base import KNeighborsMixin
    5  from .base import RadiusNeighborsMixin
    6: from .base import UnsupervisedMixin
    7  
    8  
    9  class NearestNeighbors(NeighborsBase, KNeighborsMixin,
   10:                        RadiusNeighborsMixin, UnsupervisedMixin):
   11:     """Unsupervised learner for implementing neighbor searches.
   12  
   13:     Read more in the :ref:`User Guide <unsupervised_neighbors>`.
   14  
   15      Parameters

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/pipeline.py:
  709  
  710          y : array-like, shape (n_samples, ...), optional
  711:             Targets for supervised learning.
  712  
  713          Returns
  ...
  732  
  733          y : array-like, shape (n_samples, ...), optional
  734:             Targets for supervised learning.
  735  
  736          Returns

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/semi_supervised/__init__.py:
    1  """
    2: The :mod:`sklearn.semi_supervised` module implements semi-supervised learning
    3  algorithms. These algorithms utilized small amounts of labeled data and large
    4  amounts of unlabeled data for classification tasks. This module includes Label

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/semi_supervised/label_propagation.py:
    2  """
    3  Label propagation in the context of this module refers to a set of
    4: semi-supervised classification algorithms. At a high level, these algorithms
    5  work by forming a fully-connected graph between all points given and solving
    6  for the steady-state distribution of labels at each point.
    .
   32  --------
   33  >>> from sklearn import datasets
   34: >>> from sklearn.semi_supervised import LabelPropagation
   35  >>> label_prop_model = LabelPropagation()
   36  >>> iris = datasets.load_iris()
   ..
   46  -----
   47  References:
   48: [1] Yoshua Bengio, Olivier Delalleau, Nicolas Le Roux. In Semi-Supervised
   49  Learning (2006), pp. 193-216
   50  
   51  [2] Olivier Delalleau, Yoshua Bengio, Nicolas Le Roux. Efficient
   52: Non-Parametric Function Induction in Semi-Supervised Learning. AISTAT 2005
   53  """
   54  
   ..
   65  from ..externals import six
   66  from ..metrics.pairwise import rbf_kernel
   67: from ..neighbors.unsupervised import NearestNeighbors
   68  from ..utils.extmath import safe_sparse_dot
   69  from ..utils.multiclass import check_classification_targets
   ..
  203  
  204      def fit(self, X, y):
  205:         """Fit a semi-supervised label propagation model based
  206  
  207          All the input data is provided matrix X (labeled and unlabeled)
  ...
  357      --------
  358      >>> from sklearn import datasets
  359:     >>> from sklearn.semi_supervised import LabelPropagation
  360      >>> label_prop_model = LabelPropagation()
  361      >>> iris = datasets.load_iris()
  ...
  414  
  415  class LabelSpreading(BaseLabelPropagation):
  416:     """LabelSpreading model for semi-supervised learning
  417  
  418      This model is similar to the basic Label Propagation algorithm,
  ...
  474      --------
  475      >>> from sklearn import datasets
  476:     >>> from sklearn.semi_supervised import LabelSpreading
  477      >>> label_prop_model = LabelSpreading()
  478      >>> iris = datasets.load_iris()
  ...
  493      See Also
  494      --------
  495:     LabelPropagation : Unregularized graph based semi-supervised learning
  496      """
  497  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/semi_supervised/tests/test_label_propagation.py:
    7  from sklearn.utils.testing import assert_raises
    8  from sklearn.utils.testing import assert_no_warnings
    9: from sklearn.semi_supervised import label_propagation
   10  from sklearn.metrics.pairwise import rbf_kernel
   11  from sklearn.datasets import make_classification

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/setup.py:
   39      config.add_subpackage('preprocessing')
   40      config.add_subpackage('preprocessing/tests')
   41:     config.add_subpackage('semi_supervised')
   42:     config.add_subpackage('semi_supervised/tests')
   43  
   44      # submodules which have their own setup.py

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/svm/classes.py:
  967  
  968  class OneClassSVM(BaseLibSVM):
  969:     """Unsupervised Outlier Detection.
  970  
  971      Estimate the support of a high-dimensional distribution.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/tests/test_grid_search.py:
  522  
  523  
  524: def test_unsupervised_grid_search():
  525:     # test grid-search with unsupervised estimator
  526      X, y = make_blobs(random_state=0)
  527      km = KMeans(random_state=0)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/tests/test_learning_curve.py:
  126  
  127  
  128: def test_learning_curve_unsupervised():
  129      X, _ = make_classification(n_samples=30, n_features=1, n_informative=1,
  130                                 n_redundant=0, n_classes=2,
  ...
  202  
  203  
  204: def test_learning_curve_incremental_learning_unsupervised():
  205      X, _ = make_classification(n_samples=30, n_features=1, n_informative=1,
  206                                 n_redundant=0, n_classes=2,

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/utils/estimator_checks.py:
  123              # the column y interface is used by the forests.
  124  
  125:         yield check_supervised_y_2d
  126      # test if NotFittedError is raised
  127      yield check_estimators_unfitted
  ...
  135  
  136  @ignore_warnings(category=(DeprecationWarning, FutureWarning))
  137: def check_supervised_y_no_nan(name, estimator_orig):
  138      # Checks that the Estimator targets are not NaN.
  139      estimator = clone(estimator_orig)
  ...
  165      yield check_estimators_partial_fit_n_features
  166      yield check_regressors_no_decision_function
  167:     yield check_supervised_y_2d
  168:     yield check_supervised_y_no_nan
  169      if name != 'CCA':
  170          # check that the regressor handles int input
  ...
  858      X_zero_features = np.empty(0).reshape(3, 0)
  859      # the following y should be accepted by both classifiers and regressors
  860:     # and ignored by unsupervised models
  861      y = multioutput_estimator_convert_y_2d(e, np.array([1, 0, 1]))
  862      msg = ("0 feature\(s\) \(shape=\(3, 0\)\) while a minimum of \d* "
  ...
 1196  
 1197  @ignore_warnings(category=(DeprecationWarning, FutureWarning))
 1198: def check_supervised_y_2d(name, estimator_orig):
 1199      if "MultiTask" in name:
 1200          # These only work on 2d, so this test makes no sense

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/sandbox/infotheo.py:
   27  
   28  #For shrinkage method
   29: #Dougherty, J., Kohavi, R., and Sahami, M. (1995). Supervised and unsupervised discretization of
   30  #continuous features. In International Conference on Machine Learning.
   31  #Yang, Y. and Webb, G. I. (2003). Discretization for naive-bayes learning: managing discretization

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti.machine_learning-1.0.0.dev0.dist-info/RECORD:
    6  nti/machine_learning/algorithms/configure.zcml,sha256=Zo74P6TRPY3edOI_wJ6-U8R1L2gP005Y2jxh-LRBcAM,388
    7  nti/machine_learning/algorithms/utils.py,sha256=G-iOG_Pvm6_cKkT7PohLe3WjLfowGMnKc3NqOMz723c,2082
    8: nti/machine_learning/algorithms/supervised/__init__.py,sha256=61k30TxfCf3_TkN3oEhPhaq3xAMXAJ9cPJMEwLVK6AA,2900
    9: nti/machine_learning/algorithms/supervised/configure.zcml,sha256=HCq0SaH6h-tJb3DqNfsXxi02PShiwCc5aYVlBQVzgF0,1196
   10: nti/machine_learning/algorithms/supervised/ensemble.py,sha256=EmGhafy6TlwUlSbzQyw5E2ErPgTqdMSA17PV0JyGz80,1174
   11: nti/machine_learning/algorithms/supervised/interfaces.py,sha256=HjSeIDgxZgBc5CxHaDCSCDXSJZ-gRUnaiQNHyvYqFGs,2978
   12: nti/machine_learning/algorithms/supervised/k_nearest_neighbors.py,sha256=WMXYVxr-RSP2gr9a2rNYvJEQ3ib2wEOs0muyP2bFoDI,1930
   13: nti/machine_learning/algorithms/supervised/neural_network.py,sha256=M5yGvX5sGrz9-pmU34s3BK9G1U5M-gDdstT0UQHC2Lg,1279
   14: nti/machine_learning/algorithms/supervised/regression.py,sha256=hshQcYn8FWFPvsuxEhWR3wqaIjrS5ByEynXxsbZfXJc,1140
   15: nti/machine_learning/algorithms/supervised/support_vector_machine.py,sha256=gwG2YUKQnoBVMLaqzoLRFSMwxTQcPaarUrVtM57cuKw,1908
   16: nti/machine_learning/algorithms/supervised/tests/__init__.py,sha256=CNy04YELhQngDr4n9ZB3MdFaTyWlaw-HvwTsbM1wCrc,238
   17: nti/machine_learning/algorithms/supervised/tests/test_ensemble.py,sha256=AsdDy3UoxQ45F3ax-DWUw4Ywb-tWOXQJFI6EBtH0QL0,1542
   18: nti/machine_learning/algorithms/supervised/tests/test_k_nearest_neighbors.py,sha256=uf2BsEV2EMQ2_fNsT8--sNpWUHGsLCdlIpAaghrx4rI,2064
   19: nti/machine_learning/algorithms/supervised/tests/test_models.py,sha256=PsldsReRJHauf_ZNiIWapOpXyKDS15d6-S4km6V8_xE,3982
   20: nti/machine_learning/algorithms/supervised/tests/test_svm.py,sha256=QLgonP4LM6ZRafkvYH9FBTwIgsyCqzFTf3zYfGns_ko,2109
   21: nti/machine_learning/algorithms/unsupervised/__init__.py,sha256=Vh7IqwT-tsCC_CzVVMNtxEZgT7VmoQ-16jzY0t1PWjU,3469
   22: nti/machine_learning/algorithms/unsupervised/configure.zcml,sha256=FZfYABE4e-jqU2J-O2XyfC9AwOHGW1DAHSGadevkTXc,485
   23: nti/machine_learning/algorithms/unsupervised/density.py,sha256=xvZ-VD2Qm4VdKUt1xvwDU7h4yzBCu8GNoi4XLiYH7Cg,1064
   24: nti/machine_learning/algorithms/unsupervised/geometric.py,sha256=_72uGzmWM8G7jKPZ4YyNFDTTBy18pBpRVqWkDLDfFGo,1084
   25: nti/machine_learning/algorithms/unsupervised/interfaces.py,sha256=BV9Q9kzaoH53DTZ5SpBIpSe9J4x5oKKHo_d841ttR2c,2545
   26: nti/machine_learning/algorithms/unsupervised/tests/__init__.py,sha256=CNy04YELhQngDr4n9ZB3MdFaTyWlaw-HvwTsbM1wCrc,238
   27: nti/machine_learning/algorithms/unsupervised/tests/test_models.py,sha256=NLLwPsXj_3TCrCZhv6NIJTzZIP-l70-c163nCZNHxAU,1245
   28  nti/machine_learning/evaluation/__init__.py,sha256=itoWAwyC4o6QsV3keUQBDpqUXTTGZQjoB73EUu9RX1c,218
   29  nti/machine_learning/evaluation/cross_validation.py,sha256=NRNyVqyKHnEBGHWSh-RX4etd_sZkZxpjZKBa7DjfhX4,2256
   ..
   49  nti/machine_learning/algorithms/__pycache__/__init__.cpython-36.pyc,,
   50  nti/machine_learning/algorithms/__pycache__/utils.cpython-36.pyc,,
   51: nti/machine_learning/algorithms/supervised/__pycache__/__init__.cpython-36.pyc,,
   52: nti/machine_learning/algorithms/supervised/__pycache__/ensemble.cpython-36.pyc,,
   53: nti/machine_learning/algorithms/supervised/__pycache__/interfaces.cpython-36.pyc,,
   54: nti/machine_learning/algorithms/supervised/__pycache__/k_nearest_neighbors.cpython-36.pyc,,
   55: nti/machine_learning/algorithms/supervised/__pycache__/neural_network.cpython-36.pyc,,
   56: nti/machine_learning/algorithms/supervised/__pycache__/regression.cpython-36.pyc,,
   57: nti/machine_learning/algorithms/supervised/__pycache__/support_vector_machine.cpython-36.pyc,,
   58: nti/machine_learning/algorithms/supervised/tests/__pycache__/__init__.cpython-36.pyc,,
   59: nti/machine_learning/algorithms/supervised/tests/__pycache__/test_ensemble.cpython-36.pyc,,
   60: nti/machine_learning/algorithms/supervised/tests/__pycache__/test_k_nearest_neighbors.cpython-36.pyc,,
   61: nti/machine_learning/algorithms/supervised/tests/__pycache__/test_models.cpython-36.pyc,,
   62: nti/machine_learning/algorithms/supervised/tests/__pycache__/test_svm.cpython-36.pyc,,
   63: nti/machine_learning/algorithms/unsupervised/__pycache__/__init__.cpython-36.pyc,,
   64: nti/machine_learning/algorithms/unsupervised/__pycache__/density.cpython-36.pyc,,
   65: nti/machine_learning/algorithms/unsupervised/__pycache__/geometric.cpython-36.pyc,,
   66: nti/machine_learning/algorithms/unsupervised/__pycache__/interfaces.cpython-36.pyc,,
   67: nti/machine_learning/algorithms/unsupervised/tests/__pycache__/__init__.cpython-36.pyc,,
   68: nti/machine_learning/algorithms/unsupervised/tests/__pycache__/test_models.cpython-36.pyc,,
   69  nti/machine_learning/evaluation/__pycache__/__init__.cpython-36.pyc,,
   70  nti/machine_learning/evaluation/__pycache__/cross_validation.cpython-36.pyc,,

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/machine_learning/algorithms/__init__.py:
   10  logger = __import__('logging').getLogger(__name__)
   11  
   12: from nti.machine_learning.algorithms.unsupervised.density import DBScan
   13  
   14: from nti.machine_learning.algorithms.unsupervised.geometric import KMeans
   15  
   16: from nti.machine_learning.algorithms.supervised.neural_network import NeuralNetwork
   17  
   18: from nti.machine_learning.algorithms.supervised.regression import Regressor
   19  
   20: from nti.machine_learning.algorithms.supervised.support_vector_machine import SupportVectorMachine
   21  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/machine_learning/algorithms/configure.zcml:
    7      <include package="zope.component" />
    8  
    9:     <include package=".supervised" />
   10:     <include package=".unsupervised" />
   11  
   12  </configure>

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/machine_learning/algorithms/supervised/__init__.py:
   16  from nti.machine_learning import AbstractDataSet
   17  
   18: from nti.machine_learning.algorithms.supervised.interfaces import ISupervisedModel
   19: from nti.machine_learning.algorithms.supervised.interfaces import ISupervisedDataSet
   20  
   21  from nti.property.property import alias
   ..
   26  
   27  
   28: @interface.implementer(ISupervisedDataSet)
   29: class SupervisedDataSet(AbstractDataSet, SchemaConfigured):
   30      """
   31      Class managing a data set for use by
   32:     a supervised learning model.
   33      """
   34:     createDirectFieldProperties(ISupervisedDataSet)
   35  
   36      data = alias('_data')
   ..
   70  
   71  
   72: @interface.implementer(ISupervisedModel)
   73: class SupervisedModel(Model, SchemaConfigured):
   74      """
   75:     A supervised learning model
   76      """
   77:     createDirectFieldProperties(ISupervisedModel)
   78  
   79      data = alias('_data')
   ..
   94          if len(data_frame) <= 1:
   95              raise ValueError("Insufficient data set size")
   96:         self._data = SupervisedDataSet(data_frame, prediction_columns)
   97  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/machine_learning/algorithms/supervised/ensemble.py:
   14  from sklearn.ensemble import RandomForestClassifier
   15  
   16: from nti.machine_learning.algorithms.supervised import SupervisedModel
   17  
   18: from nti.machine_learning.algorithms.supervised.interfaces import IEnsembleRandomForestClassifier
   19  
   20  from nti.machine_learning.evaluation.cross_validation import KFoldCrossValidation
   21  
   22  @interface.implementer(IEnsembleRandomForestClassifier)
   23: class EnsembleRandomForestClassifier(SupervisedModel):
   24      
   25      def classify(self, inputs):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/machine_learning/algorithms/supervised/interfaces.py:
   16  
   17  
   18: class ISupervisedModel(IModel):
   19      """
   20:     Interface that models a supervised learning model
   21      """
   22      success_rate = Number(title=u"Success Rate",
   ..
   46  
   47  
   48: class ISupervisedDataSet(IDataSet):
   49      """
   50      Outlines the necessary components to structure
   ..
   73  
   74  
   75: class INeuralNetwork(ISupervisedModel):
   76      """
   77      Outlines an ANN learning model that has an
   ..
   84  
   85          The only difference between this train and the
   86:         ISupervisedModel train is this train allows for the
   87          configurability of the layers, which is required rather
   88          than using a default in kwargs.
   ..
   90  
   91  
   92: class ISVM(ISupervisedModel):
   93      """
   94      Outlines a Support Vector Machine learning model.
   95      """
   96  
   97: class ILinearSupportVectorClassification(ISupervisedModel):
   98      """
   99      Outlines a Linear Support Vector Classification
  ...
  101  
  102  
  103: class IRegressor(ISupervisedModel):
  104      """
  105      Outlines a regression model
  ...
  107  
  108  
  109: class IKNearestNeighborsClassifier(ISupervisedModel):
  110      """
  111      Outlines of a k-Nearest Neighbors classifier
  ...
  113  
  114  
  115: class IKNearestNeighborsRegressor(ISupervisedModel):
  116      """
  117      Outlines of a k-Nearest Neighbors regressor
  118      """
  119  
  120: class IEnsembleRandomForestClassifier(ISupervisedModel):
  121      """
  122      Outlines of a Random Forest Classifier

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/machine_learning/algorithms/supervised/k_nearest_neighbors.py:
   15  from sklearn.neighbors import KNeighborsClassifier
   16  
   17: from nti.machine_learning.algorithms.supervised import SupervisedModel
   18  
   19: from nti.machine_learning.algorithms.supervised.interfaces import IKNearestNeighborsRegressor
   20: from nti.machine_learning.algorithms.supervised.interfaces import IKNearestNeighborsClassifier
   21  
   22  from nti.machine_learning.evaluation.cross_validation import KFoldCrossValidation
   ..
   24  
   25  @interface.implementer(IKNearestNeighborsClassifier)
   26: class KNearestNeighborsClassifier(SupervisedModel):
   27  
   28      def classify(self, inputs):
   ..
   38  
   39  @interface.implementer(IKNearestNeighborsRegressor)
   40: class KNearestNeighborsRegressor(SupervisedModel):
   41  
   42      def predict(self, inputs):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/machine_learning/algorithms/supervised/neural_network.py:
   14  from zope import interface
   15  
   16: from nti.machine_learning.algorithms.supervised import SupervisedModel
   17  
   18: from nti.machine_learning.algorithms.supervised.interfaces import INeuralNetwork
   19  
   20  from nti.machine_learning.evaluation.cross_validation import KFoldCrossValidation
   ..
   22  
   23  @interface.implementer(INeuralNetwork)
   24: class NeuralNetwork(SupervisedModel):
   25      """
   26      Abstraction of a multi-layer perceptron classifier from sci-kit learn

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/machine_learning/algorithms/supervised/regression.py:
   16  from zope import interface
   17  
   18: from nti.machine_learning.algorithms.supervised import SupervisedModel
   19  
   20: from nti.machine_learning.algorithms.supervised.interfaces import IRegressor
   21  
   22  from nti.machine_learning.evaluation.cross_validation import KFoldCrossValidation
   ..
   24  
   25  @interface.implementer(IRegressor)
   26: class Regressor(SupervisedModel):
   27  
   28      def train(self, data_frame, prediction_columns, **kwargs):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/machine_learning/algorithms/supervised/support_vector_machine.py:
   15  from zope import interface
   16  
   17: from nti.machine_learning.algorithms.supervised import SupervisedModel
   18  
   19: from nti.machine_learning.algorithms.supervised.interfaces import ISVM
   20: from nti.machine_learning.algorithms.supervised.interfaces import ILinearSupportVectorClassification
   21  
   22  from nti.machine_learning.evaluation.cross_validation import KFoldCrossValidation
   ..
   24  
   25  @interface.implementer(ISVM)
   26: class SupportVectorMachine(SupervisedModel):
   27      """
   28      Abstraction of the SciKit Learn Support Vector Machine.
   ..
   42  
   43  @interface.implementer(ILinearSupportVectorClassification)
   44: class LinearSupportVectorClassification(SupervisedModel):
   45  
   46      def classify(self, inputs):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/machine_learning/algorithms/supervised/tests/test_ensemble.py:
   15  from nti.testing.matchers import validly_provides
   16  
   17: from nti.machine_learning.algorithms.supervised.interfaces import IEnsembleRandomForestClassifier
   18  
   19  from nti.machine_learning.tests import BinaryClassifierLayerTest

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/machine_learning/algorithms/supervised/tests/test_k_nearest_neighbors.py:
   15  from nti.testing.matchers import validly_provides
   16  
   17: from nti.machine_learning.algorithms.supervised.interfaces import IKNearestNeighborsRegressor
   18: from nti.machine_learning.algorithms.supervised.interfaces import IKNearestNeighborsClassifier
   19  
   20  from nti.machine_learning.tests import RegressorLayerTest

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/machine_learning/algorithms/supervised/tests/test_models.py:
   16  from nti.testing.matchers import validly_provides
   17  
   18: from nti.machine_learning.algorithms.supervised.interfaces import ISVM
   19: from nti.machine_learning.algorithms.supervised.interfaces import IRegressor
   20: from nti.machine_learning.algorithms.supervised.interfaces import INeuralNetwork
   21: from nti.machine_learning.algorithms.supervised.interfaces import IKNearestNeighborsRegressor
   22: from nti.machine_learning.algorithms.supervised.interfaces import IKNearestNeighborsClassifier
   23: from nti.machine_learning.algorithms.supervised.interfaces import ILinearSupportVectorClassification
   24: from nti.machine_learning.algorithms.supervised.interfaces import IEnsembleRandomForestClassifier
   25  
   26: from nti.machine_learning.tests import SupervisedLearningLayerTest
   27  
   28  
   29: class TestSupervisedModels(SupervisedLearningLayerTest):
   30      """
   31:     Test the validity of the various supervised models.
   32      """
   33  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/machine_learning/algorithms/supervised/tests/test_svm.py:
   15  from nti.testing.matchers import validly_provides
   16  
   17: from nti.machine_learning.algorithms.supervised.interfaces import ISVM
   18: from nti.machine_learning.algorithms.supervised.interfaces import ILinearSupportVectorClassification
   19  
   20  from nti.machine_learning.tests import BinaryClassifierLayerTest

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/machine_learning/algorithms/unsupervised/__init__.py:
   15  from nti.machine_learning import AbstractDataSet
   16  
   17: from nti.machine_learning.algorithms.unsupervised.interfaces import IUnsupervisedModel
   18: from nti.machine_learning.algorithms.unsupervised.interfaces import IUnsupervisedDataSet
   19  
   20  from nti.property.property import alias
   ..
   25  
   26  
   27: @interface.implementer(IUnsupervisedModel)
   28  class AbstractClusterModel(Model, SchemaConfigured):
   29      """
   ..
   33      and marks all points as not yet belonging to any cluster.
   34      """
   35:     createDirectFieldProperties(IUnsupervisedModel)
   36  
   37      data = alias('_data')
   ..
   48              raise ValueError('Points list length must be > 1')
   49          self._dimensions = len(data_frame.columns)
   50:         self._data = UnsupervisedDataSet(data_frame)
   51  
   52  
   53: @interface.implementer(IUnsupervisedDataSet)
   54: class UnsupervisedDataSet(AbstractDataSet):
   55      """
   56:     Impelmentation of an unsupervised data set. Manages the point
   57      storage as well as cluster creation and changes
   58      """
   59:     createDirectFieldProperties(IUnsupervisedDataSet)
   60  
   61      CLUSTER = alias('_CLUSTER')

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/machine_learning/algorithms/unsupervised/density.py:
   14  from zope import interface
   15  
   16: from nti.machine_learning.algorithms.unsupervised import AbstractClusterModel
   17  
   18: from nti.machine_learning.algorithms.unsupervised.interfaces import IDBScan
   19  
   20  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/machine_learning/algorithms/unsupervised/geometric.py:
   14  from zope import interface
   15  
   16: from nti.machine_learning.algorithms.unsupervised import AbstractClusterModel
   17  
   18: from nti.machine_learning.algorithms.unsupervised.interfaces import IKMeans
   19  
   20  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/machine_learning/algorithms/unsupervised/interfaces.py:
   18  
   19  
   20: class IUnsupervisedModel(IModel):
   21      """
   22:     Outlines an unsupervised clustering model
   23      """
   24  
   ..
   39  
   40  
   41: class IUnsupervisedDataSet(IDataSet):
   42      """
   43:     Outlines the data and structure for an IUnsupervisedModel
   44      """
   45  
   46      CLUSTER = TextLine(title=u"Cluster",
   47:                        description=u"The cluster column in an unsupervised data set",
   48                         default=u"cluster",
   49                         readonly=True)
   ..
   92  
   93  
   94: class IKMeans(IUnsupervisedModel):
   95      """
   96      Represents a KMeans clustering model.
   ..
   98  
   99  
  100: class IDBScan(IUnsupervisedModel):
  101      """
  102      Represents a DBScan clustering model

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/machine_learning/algorithms/unsupervised/tests/test_models.py:
   14  from nti.testing.matchers import validly_provides
   15  
   16: from nti.machine_learning.algorithms.unsupervised.interfaces import IDBScan
   17: from nti.machine_learning.algorithms.unsupervised.interfaces import IKMeans
   18  
   19: from nti.machine_learning.tests import UnsupervisedLearningLayerTest
   20  
   21  
   22: class TestUnsupervisedModels(UnsupervisedLearningLayerTest):
   23      """
   24:     Test known available unsupervised models
   25      """
   26  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/machine_learning/tests/__init__.py:
   54  
   55  
   56: class SupervisedLearningLayerTest(unittest.TestCase):
   57  
   58      layer = SharedConfiguringTestLayer
   ..
   70  
   71  
   72: class UnsupervisedLearningLayerTest(unittest.TestCase):
   73  
   74      layer = SharedConfiguringTestLayer

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/scikit_learn-0.19.0.dist-info/RECORD:
  292  sklearn/metrics/cluster/expected_mutual_info_fast.cpython-36m-darwin.so,sha256=256OShKFBzNjUA2EK1yeb84PKA601kEqsp1nKKA-itA,257052
  293  sklearn/metrics/cluster/setup.py,sha256=135i_ZVJ097uYUMbaTySBGxsZTIdwEtKmk9SU1d1zz0,672
  294: sklearn/metrics/cluster/supervised.py,sha256=qUg8phXk9tpEBksUsO7-KnysikmYPCBcabOCbwpDi7E,31406
  295: sklearn/metrics/cluster/unsupervised.py,sha256=My42456OvP6jDxs4vYuXviFtSog70EmR7ftv4JPB6-k,10322
  296  sklearn/metrics/cluster/tests/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
  297  sklearn/metrics/cluster/tests/test_bicluster.py,sha256=krjuUT5GB0zGX9fhTi58yehCYgZgIAs88nBd8eNXlDo,1770
  298: sklearn/metrics/cluster/tests/test_supervised.py,sha256=RPHV-1txRqc5dE997x3dmrB67kOI5fcvZ6hLG-Yi_XQ,10317
  299: sklearn/metrics/cluster/tests/test_unsupervised.py,sha256=0IjBObt__LQC-qKFmisWhkJ2zJSXaICYM2wS00Esdrs,5806
  300  sklearn/metrics/tests/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
  301  sklearn/metrics/tests/test_classification.py,sha256=7bb9j_unjoBy6BxcdenIXBgTdtsHEJAUYT9nwbLRFiY,61479
  ...
  340  sklearn/neighbors/setup.py,sha256=Rh2BVzgOd-t_C9LE4G7_rfKX1VreEjghqAk6D1m7Tpg,1460
  341  sklearn/neighbors/typedefs.cpython-36m-darwin.so,sha256=iMuBgoA3sgEQp5M-atMDH5mBWs_Y8OyJjShpISL5SBo,59384
  342: sklearn/neighbors/unsupervised.py,sha256=2_iCZMbVia8H2P0c4fAXoe7RCSSzN-GnXwoxP_teYtg,4756
  343  sklearn/neighbors/tests/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
  344  sklearn/neighbors/tests/test_approximate.py,sha256=ZeF3XJktHPsbW1UN9QB98F1tX6W0szP_adlS_Raa1uc,20126
  ...
  370  sklearn/preprocessing/tests/test_imputation.py,sha256=PVJvO3VI9fGknLg2EFHom08ZjiWkwgFKxoXVgKTpnyY,12300
  371  sklearn/preprocessing/tests/test_label.py,sha256=OmRSLz0d6qyCnc0E89wHTvB9t7Ec5XQaPhyVVqvwUMk,18521
  372: sklearn/semi_supervised/__init__.py,sha256=CPSy7rd4IJNHgwecK3eklBwpjp-sM9Ozr1fwPUnR808,371
  373: sklearn/semi_supervised/label_propagation.py,sha256=46z2nt0PqIqd-6dZpOTjj1yfbb39FjqyLzBCJ7vC9sE,18811
  374: sklearn/semi_supervised/tests/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
  375: sklearn/semi_supervised/tests/test_label_propagation.py,sha256=e72GY2z3PnihuR6IJKFnP_a3Rqhbi709QONi5sglnRM,6187
  376  sklearn/svm/__init__.py,sha256=4DLbBfHnmXDNJYemvafoYJyBiMZd8VbV2mFu5fLWz4c,806
  377  sklearn/svm/base.py,sha256=fULUZSte034V2iKefPS367pEc_2Cf2wJFr1Byfxn6E8,34866
  ...
  722  sklearn/metrics/cluster/__pycache__/bicluster.cpython-36.pyc,,
  723  sklearn/metrics/cluster/__pycache__/setup.cpython-36.pyc,,
  724: sklearn/metrics/cluster/__pycache__/supervised.cpython-36.pyc,,
  725: sklearn/metrics/cluster/__pycache__/unsupervised.cpython-36.pyc,,
  726  sklearn/metrics/cluster/tests/__pycache__/__init__.cpython-36.pyc,,
  727  sklearn/metrics/cluster/tests/__pycache__/test_bicluster.cpython-36.pyc,,
  728: sklearn/metrics/cluster/tests/__pycache__/test_supervised.cpython-36.pyc,,
  729: sklearn/metrics/cluster/tests/__pycache__/test_unsupervised.cpython-36.pyc,,
  730  sklearn/metrics/tests/__pycache__/__init__.cpython-36.pyc,,
  731  sklearn/metrics/tests/__pycache__/test_classification.cpython-36.pyc,,
  ...
  765  sklearn/neighbors/__pycache__/regression.cpython-36.pyc,,
  766  sklearn/neighbors/__pycache__/setup.cpython-36.pyc,,
  767: sklearn/neighbors/__pycache__/unsupervised.cpython-36.pyc,,
  768  sklearn/neighbors/tests/__pycache__/__init__.cpython-36.pyc,,
  769  sklearn/neighbors/tests/__pycache__/test_approximate.cpython-36.pyc,,
  ...
  795  sklearn/preprocessing/tests/__pycache__/test_imputation.cpython-36.pyc,,
  796  sklearn/preprocessing/tests/__pycache__/test_label.cpython-36.pyc,,
  797: sklearn/semi_supervised/__pycache__/__init__.cpython-36.pyc,,
  798: sklearn/semi_supervised/__pycache__/label_propagation.cpython-36.pyc,,
  799: sklearn/semi_supervised/tests/__pycache__/__init__.cpython-36.pyc,,
  800: sklearn/semi_supervised/tests/__pycache__/test_label_propagation.cpython-36.pyc,,
  801  sklearn/svm/__pycache__/__init__.cpython-36.pyc,,
  802  sklearn/svm/__pycache__/base.cpython-36.pyc,,

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/__init__.py:
  143                 'mixture', 'model_selection', 'multiclass', 'multioutput',
  144                 'naive_bayes', 'neighbors', 'neural_network', 'pipeline',
  145:                'preprocessing', 'random_projection', 'semi_supervised',
  146                 'svm', 'tree', 'discriminant_analysis',
  147                 # Non-modules:

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/base.py:
  515          # method is possible for a given clustering algorithm
  516          if y is None:
  517:             # fit method of arity 1 (unsupervised transformation)
  518              return self.fit(X, **fit_params).transform(X)
  519          else:
  520:             # fit method of arity 2 (supervised transformation)
  521              return self.fit(X, y, **fit_params).transform(X)
  522  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/calibration.py:
   97             Regularized Likelihood Methods, J. Platt, (1999)
   98  
   99:     .. [4] Predicting Good Probabilities with Supervised Learning,
  100             A. Niculescu-Mizil & R. Caruana, ICML 2005
  101      """
  ...
  277             Regularized Likelihood Methods, J. Platt, (1999)
  278  
  279:     .. [4] Predicting Good Probabilities with Supervised Learning,
  280             A. Niculescu-Mizil & R. Caruana, ICML 2005
  281      """
  ...
  545      ----------
  546      Alexandru Niculescu-Mizil and Rich Caruana (2005) Predicting Good
  547:     Probabilities With Supervised Learning, in Proceedings of the 22nd
  548      International Conference on Machine Learning (ICML).
  549      See section 4 (Qualitative Analysis of Predictions).

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/cluster/__init__.py:
    1  """
    2: The :mod:`sklearn.cluster` module gathers popular unsupervised clustering
    3  algorithms.
    4  """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/cross_validation.py:
 1312      y : array-like, optional, default: None
 1313          The target variable to try to predict in the case of
 1314:         supervised learning.
 1315  
 1316      cv : int, cross-validation generator or an iterable, optional
 ....
 1414      y : array-like, optional, default: None
 1415          The target variable to try to predict in the case of
 1416:         supervised learning.
 1417  
 1418      train : array-like, shape (n_train_samples,)
 ....
 1496      y : array-like, optional, default: None
 1497          The target variable to try to predict in the case of
 1498:         supervised learning.
 1499  
 1500      scoring : string, callable or None, optional, default: None
 ....
 1598      y : array-like, optional, default: None
 1599          The target variable to try to predict in the case of
 1600:         supervised learning.
 1601  
 1602      scorer : callable
 ....
 1815  
 1816      y : array-like
 1817:         The target variable for a supervised learning problem.
 1818  
 1819      classifier : boolean optional
 ....
 1866      y : array-like
 1867          The target variable to try to predict in the case of
 1868:         supervised learning.
 1869  
 1870      scoring : string, callable or None, optional, default: None

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/datasets/base.py:
   89                  ...
   90  
   91:     The folder names are used as supervised signal label names. The individual
   92      file names are not important.
   93  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/datasets/kddcup99.py:
   56      a closed network and hand-injected attacks to produce a large number of
   57      different types of attack with normal activity in the background.
   58:     As the initial goal was to produce a large training set for supervised
   59      learning algorithms, there is a large proportion (80.1%) of abnormal
   60:     data which is unrealistic in real world, and inappropriate for unsupervised
   61      anomaly detection which aims at detecting 'abnormal' data, ie
   62  
   ..
  169  
  170      .. [2] K. Yamanishi, J.-I. Takeuchi, G. Williams, and P. Milne. Online
  171:            unsupervised outlier detection using finite mixtures with
  172             discounting learning algorithms. In Proceedings of the sixth
  173             ACM SIGKDD international conference on Knowledge discovery

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/ensemble/forest.py:
 1708      """An ensemble of totally random trees.
 1709  
 1710:     An unsupervised transformation of a dataset to a high-dimensional
 1711      sparse representation. A datapoint is coded according to which leaf of
 1712      each tree it is sorted into. Using a one-hot encoding of the leaves,

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/feature_selection/mutual_info_.py:
    8  
    9  from ..externals.six import moves
   10: from ..metrics.cluster.supervised import mutual_info_score
   11  from ..neighbors import NearestNeighbors
   12  from ..preprocessing import scale

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/feature_selection/rfe.py:
   51      ----------
   52      estimator : object
   53:         A supervised learning estimator with a ``fit`` method that provides
   54          information about feature importance either through a ``coef_``
   55          attribute or through a ``feature_importances_`` attribute.
   ..
  280      ----------
  281      estimator : object
  282:         A supervised learning estimator with a ``fit`` method that provides
  283          information about feature importance either through a ``coef_``
  284          attribute or through a ``feature_importances_`` attribute.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/feature_selection/variance_threshold.py:
   14  
   15      This feature selection algorithm looks only at the features (X), not the
   16:     desired outputs (y), and can thus be used for unsupervised learning.
   17  
   18      Read more in the :ref:`User Guide <variance_threshold>`.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/grid_search.py:
  421          y : array-like, shape = [n_samples] or [n_samples, n_output], optional
  422              Target relative to X for classification or regression;
  423:             None for unsupervised learning.
  424  
  425          Returns
  ...
  833          y : array-like, shape = [n_samples] or [n_samples, n_output], optional
  834              Target relative to X for classification or regression;
  835:             None for unsupervised learning.
  836  
  837          """
  ...
 1038          y : array-like, shape = [n_samples] or [n_samples, n_output], optional
 1039              Target relative to X for classification or regression;
 1040:             None for unsupervised learning.
 1041  
 1042          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/learning_curve.py:
   58      y : array-like, shape (n_samples) or (n_samples, n_features), optional
   59          Target relative to X for classification or regression;
   60:         None for unsupervised learning.
   61  
   62      train_sizes : array-like, shape (n_ticks,), dtype float or int
   ..
  287      y : array-like, shape (n_samples) or (n_samples, n_features), optional
  288          Target relative to X for classification or regression;
  289:         None for unsupervised learning.
  290  
  291      param_name : string

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/metrics/cluster/__init__.py:
    3  cluster analysis results. There are two forms of evaluation:
    4  
    5: - supervised, which uses a ground truth class values for each sample.
    6: - unsupervised, which does not and measures the 'quality' of the model itself.
    7  """
    8: from .supervised import adjusted_mutual_info_score
    9: from .supervised import normalized_mutual_info_score
   10: from .supervised import adjusted_rand_score
   11: from .supervised import completeness_score
   12: from .supervised import contingency_matrix
   13: from .supervised import expected_mutual_information
   14: from .supervised import homogeneity_completeness_v_measure
   15: from .supervised import homogeneity_score
   16: from .supervised import mutual_info_score
   17: from .supervised import v_measure_score
   18: from .supervised import fowlkes_mallows_score
   19: from .supervised import entropy
   20: from .unsupervised import silhouette_samples
   21: from .unsupervised import silhouette_score
   22: from .unsupervised import calinski_harabaz_score
   23  from .bicluster import consensus_score
   24  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/metrics/cluster/unsupervised.py:
    1: """Unsupervised evaluation metrics."""
    2  
    3  # Authors: Robert Layton <robertlayton@gmail.com>

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/metrics/scorer.py:
   11  The signature of the call is ``(estimator, X, y)`` where ``estimator``
   12  is the model to be evaluated, ``X`` is the test data and ``y`` is the
   13: ground truth labeling (or ``None`` in the case of unsupervised models).
   14  """
   15  
   ..
  541                 log_loss=log_loss_scorer,
  542                 neg_log_loss=neg_log_loss_scorer,
  543:                # Cluster metrics that use supervised evaluation
  544                 adjusted_rand_score=adjusted_rand_scorer,
  545                 homogeneity_score=homogeneity_scorer,

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/metrics/tests/test_score_objects.py:
   54                 'neg_log_loss', 'log_loss']
   55  
   56: # All supervised cluster scorers (They behave like classification metric)
   57  CLUSTER_SCORERS = ["adjusted_rand_score",
   58                     "homogeneity_score",
   ..
  411  
  412  
  413: def test_supervised_cluster_scorers():
  414      # Test clustering scorers against gold standard labeling.
  415      X, y = make_blobs(random_state=0, centers=2)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/model_selection/_search.py:
  423          y : array-like, shape = [n_samples] or [n_samples, n_output], optional
  424              Target relative to X for classification or regression;
  425:             None for unsupervised learning.
  426  
  427          Returns
  ...
  568          y : array-like, shape = [n_samples] or [n_samples, n_output], optional
  569              Target relative to X for classification or regression;
  570:             None for unsupervised learning.
  571  
  572          groups : array-like, with shape (n_samples,), optional

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/model_selection/_split.py:
   71  
   72          y : array-like, of length n_samples
   73:             The target variable for supervised learning problems.
   74  
   75          groups : array-like, with shape (n_samples,), optional
   ..
  302  
  303          y : array-like, shape (n_samples,)
  304:             The target variable for supervised learning problems.
  305  
  306          groups : array-like, with shape (n_samples,), optional
  ...
  642  
  643          y : array-like, shape (n_samples,)
  644:             The target variable for supervised learning problems.
  645              Stratification is done based on the y labels.
  646  
  ...
 1007  
 1008          y : array-like, of length n_samples
 1009:             The target variable for supervised learning problems.
 1010  
 1011          groups : array-like, with shape (n_samples,), optional
 ....
 1173  
 1174          y : array-like, shape (n_samples,)
 1175:             The target variable for supervised learning problems.
 1176  
 1177          groups : array-like, with shape (n_samples,), optional
 ....
 1593  
 1594          y : array-like, shape (n_samples,)
 1595:             The target variable for supervised learning problems.
 1596              Stratification is done based on the y labels.
 1597  
 ....
 1870  
 1871      y : array-like, optional
 1872:         The target variable for supervised learning problems.
 1873  
 1874      classifier : boolean, optional, default False

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/model_selection/_validation.py:
   53      y : array-like, optional, default: None
   54          The target variable to try to predict in the case of
   55:         supervised learning.
   56  
   57      groups : array-like, with shape (n_samples,), optional
   ..
  231      y : array-like, optional, default: None
  232          The target variable to try to predict in the case of
  233:         supervised learning.
  234  
  235      groups : array-like, with shape (n_samples,), optional
  ...
  339      y : array-like, optional, default: None
  340          The target variable to try to predict in the case of
  341:         supervised learning.
  342  
  343      scorer : A single callable or dict mapping scorer name to the callable
  ...
  565      y : array-like, optional, default: None
  566          The target variable to try to predict in the case of
  567:         supervised learning.
  568  
  569      groups : array-like, with shape (n_samples,), optional
  ...
  690      y : array-like, optional, default: None
  691          The target variable to try to predict in the case of
  692:         supervised learning.
  693  
  694      train : array-like, shape (n_train_samples,)
  ...
  791      y : array-like
  792          The target variable to try to predict in the case of
  793:         supervised learning.
  794  
  795      groups : array-like, with shape (n_samples,), optional
  ...
  942      y : array-like, shape (n_samples) or (n_samples, n_features), optional
  943          Target relative to X for classification or regression;
  944:         None for unsupervised learning.
  945  
  946      groups : array-like, with shape (n_samples,), optional
  ...
 1178      y : array-like, shape (n_samples) or (n_samples, n_features), optional
 1179          Target relative to X for classification or regression;
 1180:         None for unsupervised learning.
 1181  
 1182      param_name : string

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/model_selection/tests/test_search.py:
  654  
  655  
  656: def test_unsupervised_grid_search():
  657:     # test grid-search with unsupervised estimator
  658      X, y = make_blobs(random_state=0)
  659      km = KMeans(random_state=0)
  660  
  661:     # Multi-metric evaluation unsupervised
  662      scoring = ['adjusted_rand_score', 'fowlkes_mallows_score']
  663      for refit in ['adjusted_rand_score', 'fowlkes_mallows_score']:
  ...
  668          assert_equal(grid_search.best_params_["n_clusters"], 3)
  669  
  670:     # Single metric evaluation unsupervised
  671      grid_search = GridSearchCV(km, param_grid=dict(n_clusters=[2, 3, 4]),
  672                                 scoring='fowlkes_mallows_score')

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/model_selection/tests/test_validation.py:
  879  
  880  
  881: def test_learning_curve_unsupervised():
  882      X, _ = make_classification(n_samples=30, n_features=1, n_informative=1,
  883                                 n_redundant=0, n_classes=2,
  ...
  938  
  939  
  940: def test_learning_curve_incremental_learning_unsupervised():
  941      X, _ = make_classification(n_samples=30, n_features=1, n_informative=1,
  942                                 n_redundant=0, n_classes=2,

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/naive_bayes.py:
    3  """
    4  The :mod:`sklearn.naive_bayes` module implements Naive Bayes algorithms. These
    5: are supervised learning methods based on applying Bayes' theorem with strong
    6  (naive) feature independence assumptions.
    7  """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/neighbors/__init__.py:
    8  from .dist_metrics import DistanceMetric
    9  from .graph import kneighbors_graph, radius_neighbors_graph
   10: from .unsupervised import NearestNeighbors
   11  from .classification import KNeighborsClassifier, RadiusNeighborsClassifier
   12  from .regression import KNeighborsRegressor, RadiusNeighborsRegressor

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/neighbors/base.py:
  728  
  729  
  730: class SupervisedFloatMixin(object):
  731      def fit(self, X, y):
  732          """Fit the model using X as training data and y as target values
  ...
  748  
  749  
  750: class SupervisedIntegerMixin(object):
  751      def fit(self, X, y):
  752          """Fit the model using X as training data and y as target values
  ...
  791  
  792  
  793: class UnsupervisedMixin(object):
  794      def fit(self, X, y=None):
  795          """Fit the model using X as training data

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/neighbors/classification.py:
   16      _check_weights, _get_weights, \
   17      NeighborsBase, KNeighborsMixin,\
   18:     RadiusNeighborsMixin, SupervisedIntegerMixin
   19  from ..base import ClassifierMixin
   20  from ..utils import check_array
   ..
   22  
   23  class KNeighborsClassifier(NeighborsBase, KNeighborsMixin,
   24:                            SupervisedIntegerMixin, ClassifierMixin):
   25      """Classifier implementing the k-nearest neighbors vote.
   26  
   ..
  226  
  227  class RadiusNeighborsClassifier(NeighborsBase, RadiusNeighborsMixin,
  228:                                 SupervisedIntegerMixin, ClassifierMixin):
  229      """Classifier implementing a vote among neighbors within a given radius
  230  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/neighbors/graph.py:
    6  
    7  from .base import KNeighborsMixin, RadiusNeighborsMixin
    8: from .unsupervised import NearestNeighbors
    9  
   10  
   ..
   36      """Computes the (weighted) graph of k-Neighbors for points in X
   37  
   38:     Read more in the :ref:`User Guide <unsupervised_neighbors>`.
   39  
   40      Parameters
   ..
  111      radius.
  112  
  113:     Read more in the :ref:`User Guide <unsupervised_neighbors>`.
  114  
  115      Parameters

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/neighbors/lof.py:
    9  from .base import NeighborsBase
   10  from .base import KNeighborsMixin
   11: from .base import UnsupervisedMixin
   12  
   13  from ..utils.validation import check_is_fitted
   ..
   17  
   18  
   19: class LocalOutlierFactor(NeighborsBase, KNeighborsMixin, UnsupervisedMixin):
   20:     """Unsupervised Outlier Detection using Local Outlier Factor (LOF)
   21  
   22      The anomaly score of each sample is called Local Outlier Factor.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/neighbors/regression.py:
   12  
   13  from .base import _get_weights, _check_weights, NeighborsBase, KNeighborsMixin
   14: from .base import RadiusNeighborsMixin, SupervisedFloatMixin
   15  from ..base import RegressorMixin
   16  from ..utils import check_array
   ..
   18  
   19  class KNeighborsRegressor(NeighborsBase, KNeighborsMixin,
   20:                           SupervisedFloatMixin,
   21                            RegressorMixin):
   22      """Regression based on k-nearest neighbors.
   ..
  167  
  168  class RadiusNeighborsRegressor(NeighborsBase, RadiusNeighborsMixin,
  169:                                SupervisedFloatMixin,
  170                                 RegressorMixin):
  171      """Regression based on neighbors within a fixed radius.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/neighbors/tests/test_neighbors.py:
   62  
   63  
   64: def test_unsupervised_kneighbors(n_samples=20, n_features=5,
   65                                   n_query_pts=2, n_neighbors=5):
   66:     # Test unsupervised neighbors methods
   67      X = rng.rand(n_samples, n_features)
   68  
   ..
   89  
   90  
   91: def test_unsupervised_inputs():
   92      # test the types of valid input into NearestNeighbors
   93      X = rng.random_sample((10, 3))
   ..
  109  
  110  def test_precomputed(random_state=42):
  111:     """Tests unsupervised NearestNeighbors with a distance matrix."""
  112      # Note: smaller samples may result in spurious test success
  113      rng = np.random.RandomState(random_state)
  ...
  178  
  179  
  180: def test_unsupervised_radius_neighbors(n_samples=20, n_features=5,
  181                                         n_query_pts=2, radius=0.5,
  182                                         random_state=0):
  183:     # Test unsupervised radius-based query
  184      rng = np.random.RandomState(random_state)
  185  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/neighbors/unsupervised.py:
    1: """Unsupervised nearest neighbors learner"""
    2  
    3  from .base import NeighborsBase
    4  from .base import KNeighborsMixin
    5  from .base import RadiusNeighborsMixin
    6: from .base import UnsupervisedMixin
    7  
    8  
    9  class NearestNeighbors(NeighborsBase, KNeighborsMixin,
   10:                        RadiusNeighborsMixin, UnsupervisedMixin):
   11:     """Unsupervised learner for implementing neighbor searches.
   12  
   13:     Read more in the :ref:`User Guide <unsupervised_neighbors>`.
   14  
   15      Parameters

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/pipeline.py:
  709  
  710          y : array-like, shape (n_samples, ...), optional
  711:             Targets for supervised learning.
  712  
  713          Returns
  ...
  732  
  733          y : array-like, shape (n_samples, ...), optional
  734:             Targets for supervised learning.
  735  
  736          Returns

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/semi_supervised/__init__.py:
    1  """
    2: The :mod:`sklearn.semi_supervised` module implements semi-supervised learning
    3  algorithms. These algorithms utilized small amounts of labeled data and large
    4  amounts of unlabeled data for classification tasks. This module includes Label

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/semi_supervised/label_propagation.py:
    2  """
    3  Label propagation in the context of this module refers to a set of
    4: semi-supervised classification algorithms. At a high level, these algorithms
    5  work by forming a fully-connected graph between all points given and solving
    6  for the steady-state distribution of labels at each point.
    .
   32  --------
   33  >>> from sklearn import datasets
   34: >>> from sklearn.semi_supervised import LabelPropagation
   35  >>> label_prop_model = LabelPropagation()
   36  >>> iris = datasets.load_iris()
   ..
   46  -----
   47  References:
   48: [1] Yoshua Bengio, Olivier Delalleau, Nicolas Le Roux. In Semi-Supervised
   49  Learning (2006), pp. 193-216
   50  
   51  [2] Olivier Delalleau, Yoshua Bengio, Nicolas Le Roux. Efficient
   52: Non-Parametric Function Induction in Semi-Supervised Learning. AISTAT 2005
   53  """
   54  
   ..
   65  from ..externals import six
   66  from ..metrics.pairwise import rbf_kernel
   67: from ..neighbors.unsupervised import NearestNeighbors
   68  from ..utils.extmath import safe_sparse_dot
   69  from ..utils.multiclass import check_classification_targets
   ..
  203  
  204      def fit(self, X, y):
  205:         """Fit a semi-supervised label propagation model based
  206  
  207          All the input data is provided matrix X (labeled and unlabeled)
  ...
  357      --------
  358      >>> from sklearn import datasets
  359:     >>> from sklearn.semi_supervised import LabelPropagation
  360      >>> label_prop_model = LabelPropagation()
  361      >>> iris = datasets.load_iris()
  ...
  414  
  415  class LabelSpreading(BaseLabelPropagation):
  416:     """LabelSpreading model for semi-supervised learning
  417  
  418      This model is similar to the basic Label Propagation algorithm,
  ...
  474      --------
  475      >>> from sklearn import datasets
  476:     >>> from sklearn.semi_supervised import LabelSpreading
  477      >>> label_prop_model = LabelSpreading()
  478      >>> iris = datasets.load_iris()
  ...
  493      See Also
  494      --------
  495:     LabelPropagation : Unregularized graph based semi-supervised learning
  496      """
  497  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/semi_supervised/tests/test_label_propagation.py:
    7  from sklearn.utils.testing import assert_raises
    8  from sklearn.utils.testing import assert_no_warnings
    9: from sklearn.semi_supervised import label_propagation
   10  from sklearn.metrics.pairwise import rbf_kernel
   11  from sklearn.datasets import make_classification

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/setup.py:
   39      config.add_subpackage('preprocessing')
   40      config.add_subpackage('preprocessing/tests')
   41:     config.add_subpackage('semi_supervised')
   42:     config.add_subpackage('semi_supervised/tests')
   43  
   44      # submodules which have their own setup.py

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/svm/classes.py:
  967  
  968  class OneClassSVM(BaseLibSVM):
  969:     """Unsupervised Outlier Detection.
  970  
  971      Estimate the support of a high-dimensional distribution.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/tests/test_grid_search.py:
  522  
  523  
  524: def test_unsupervised_grid_search():
  525:     # test grid-search with unsupervised estimator
  526      X, y = make_blobs(random_state=0)
  527      km = KMeans(random_state=0)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/tests/test_learning_curve.py:
  126  
  127  
  128: def test_learning_curve_unsupervised():
  129      X, _ = make_classification(n_samples=30, n_features=1, n_informative=1,
  130                                 n_redundant=0, n_classes=2,
  ...
  202  
  203  
  204: def test_learning_curve_incremental_learning_unsupervised():
  205      X, _ = make_classification(n_samples=30, n_features=1, n_informative=1,
  206                                 n_redundant=0, n_classes=2,

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/utils/estimator_checks.py:
  123              # the column y interface is used by the forests.
  124  
  125:         yield check_supervised_y_2d
  126      # test if NotFittedError is raised
  127      yield check_estimators_unfitted
  ...
  135  
  136  @ignore_warnings(category=(DeprecationWarning, FutureWarning))
  137: def check_supervised_y_no_nan(name, estimator_orig):
  138      # Checks that the Estimator targets are not NaN.
  139      estimator = clone(estimator_orig)
  ...
  165      yield check_estimators_partial_fit_n_features
  166      yield check_regressors_no_decision_function
  167:     yield check_supervised_y_2d
  168:     yield check_supervised_y_no_nan
  169      if name != 'CCA':
  170          # check that the regressor handles int input
  ...
  858      X_zero_features = np.empty(0).reshape(3, 0)
  859      # the following y should be accepted by both classifiers and regressors
  860:     # and ignored by unsupervised models
  861      y = multioutput_estimator_convert_y_2d(e, np.array([1, 0, 1]))
  862      msg = ("0 feature\(s\) \(shape=\(3, 0\)\) while a minimum of \d* "
  ...
 1196  
 1197  @ignore_warnings(category=(DeprecationWarning, FutureWarning))
 1198: def check_supervised_y_2d(name, estimator_orig):
 1199      if "MultiTask" in name:
 1200          # These only work on 2d, so this test makes no sense

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/sandbox/infotheo.py:
   27  
   28  #For shrinkage method
   29: #Dougherty, J., Kohavi, R., and Sahami, M. (1995). Supervised and unsupervised discretization of
   30  #continuous features. In International Conference on Machine Learning.
   31  #Yang, Y. and Webb, G. I. (2003). Discretization for naive-bayes learning: managing discretization

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/src/nti.machine_learning.egg-info/SOURCES.txt:
   34  src/nti/machine_learning/algorithms/configure.zcml
   35  src/nti/machine_learning/algorithms/utils.py
   36: src/nti/machine_learning/algorithms/supervised/__init__.py
   37: src/nti/machine_learning/algorithms/supervised/configure.zcml
   38: src/nti/machine_learning/algorithms/supervised/ensemble.py
   39: src/nti/machine_learning/algorithms/supervised/interfaces.py
   40: src/nti/machine_learning/algorithms/supervised/k_nearest_neighbors.py
   41: src/nti/machine_learning/algorithms/supervised/neural_network.py
   42: src/nti/machine_learning/algorithms/supervised/regression.py
   43: src/nti/machine_learning/algorithms/supervised/support_vector_machine.py
   44: src/nti/machine_learning/algorithms/supervised/tests/__init__.py
   45: src/nti/machine_learning/algorithms/supervised/tests/test_ensemble.py
   46: src/nti/machine_learning/algorithms/supervised/tests/test_k_nearest_neighbors.py
   47: src/nti/machine_learning/algorithms/supervised/tests/test_models.py
   48: src/nti/machine_learning/algorithms/supervised/tests/test_svm.py
   49: src/nti/machine_learning/algorithms/unsupervised/__init__.py
   50: src/nti/machine_learning/algorithms/unsupervised/configure.zcml
   51: src/nti/machine_learning/algorithms/unsupervised/density.py
   52: src/nti/machine_learning/algorithms/unsupervised/geometric.py
   53: src/nti/machine_learning/algorithms/unsupervised/interfaces.py
   54: src/nti/machine_learning/algorithms/unsupervised/tests/__init__.py
   55: src/nti/machine_learning/algorithms/unsupervised/tests/test_models.py
   56  src/nti/machine_learning/evaluation/__init__.py
   57  src/nti/machine_learning/evaluation/cross_validation.py

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/src/nti/machine_learning/algorithms/__init__.py:
   10  logger = __import__('logging').getLogger(__name__)
   11  
   12: from nti.machine_learning.algorithms.unsupervised.density import DBScan
   13  
   14: from nti.machine_learning.algorithms.unsupervised.geometric import KMeans
   15  
   16: from nti.machine_learning.algorithms.supervised.neural_network import NeuralNetwork
   17  
   18: from nti.machine_learning.algorithms.supervised.regression import Regressor
   19  
   20: from nti.machine_learning.algorithms.supervised.support_vector_machine import SupportVectorMachine
   21  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/src/nti/machine_learning/algorithms/configure.zcml:
    7      <include package="zope.component" />
    8  
    9:     <include package=".supervised" />
   10:     <include package=".unsupervised" />
   11  
   12  </configure>

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/src/nti/machine_learning/algorithms/supervised/__init__.py:
   16  from nti.machine_learning import AbstractDataSet
   17  
   18: from nti.machine_learning.algorithms.supervised.interfaces import ISupervisedModel
   19: from nti.machine_learning.algorithms.supervised.interfaces import ISupervisedDataSet
   20  
   21  from nti.property.property import alias
   ..
   26  
   27  
   28: @interface.implementer(ISupervisedDataSet)
   29: class SupervisedDataSet(AbstractDataSet, SchemaConfigured):
   30      """
   31      Class managing a data set for use by
   32:     a supervised learning model.
   33      """
   34:     createDirectFieldProperties(ISupervisedDataSet)
   35  
   36      data = alias('_data')
   ..
   70  
   71  
   72: @interface.implementer(ISupervisedModel)
   73: class SupervisedModel(Model, SchemaConfigured):
   74      """
   75:     A supervised learning model
   76      """
   77:     createDirectFieldProperties(ISupervisedModel)
   78  
   79      data = alias('_data')
   ..
   94          if len(data_frame) <= 1:
   95              raise ValueError("Insufficient data set size")
   96:         self._data = SupervisedDataSet(data_frame, prediction_columns)
   97  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/src/nti/machine_learning/algorithms/supervised/ensemble.py:
   14  from sklearn.ensemble import RandomForestClassifier
   15  
   16: from nti.machine_learning.algorithms.supervised import SupervisedModel
   17  
   18: from nti.machine_learning.algorithms.supervised.interfaces import IEnsembleRandomForestClassifier
   19  
   20  from nti.machine_learning.evaluation.cross_validation import KFoldCrossValidation
   21  
   22  @interface.implementer(IEnsembleRandomForestClassifier)
   23: class EnsembleRandomForestClassifier(SupervisedModel):
   24      
   25      def classify(self, inputs):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/src/nti/machine_learning/algorithms/supervised/interfaces.py:
   16  
   17  
   18: class ISupervisedModel(IModel):
   19      """
   20:     Interface that models a supervised learning model
   21      """
   22      success_rate = Number(title=u"Success Rate",
   ..
   46  
   47  
   48: class ISupervisedDataSet(IDataSet):
   49      """
   50      Outlines the necessary components to structure
   ..
   73  
   74  
   75: class INeuralNetwork(ISupervisedModel):
   76      """
   77      Outlines an ANN learning model that has an
   ..
   84  
   85          The only difference between this train and the
   86:         ISupervisedModel train is this train allows for the
   87          configurability of the layers, which is required rather
   88          than using a default in kwargs.
   ..
   90  
   91  
   92: class ISVM(ISupervisedModel):
   93      """
   94      Outlines a Support Vector Machine learning model.
   95      """
   96  
   97: class ILinearSupportVectorClassification(ISupervisedModel):
   98      """
   99      Outlines a Linear Support Vector Classification
  ...
  101  
  102  
  103: class IRegressor(ISupervisedModel):
  104      """
  105      Outlines a regression model
  ...
  107  
  108  
  109: class IKNearestNeighborsClassifier(ISupervisedModel):
  110      """
  111      Outlines of a k-Nearest Neighbors classifier
  ...
  113  
  114  
  115: class IKNearestNeighborsRegressor(ISupervisedModel):
  116      """
  117      Outlines of a k-Nearest Neighbors regressor
  118      """
  119  
  120: class IEnsembleRandomForestClassifier(ISupervisedModel):
  121      """
  122      Outlines of a Random Forest Classifier

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/src/nti/machine_learning/algorithms/supervised/k_nearest_neighbors.py:
   15  from sklearn.neighbors import KNeighborsClassifier
   16  
   17: from nti.machine_learning.algorithms.supervised import SupervisedModel
   18  
   19: from nti.machine_learning.algorithms.supervised.interfaces import IKNearestNeighborsRegressor
   20: from nti.machine_learning.algorithms.supervised.interfaces import IKNearestNeighborsClassifier
   21  
   22  from nti.machine_learning.evaluation.cross_validation import KFoldCrossValidation
   ..
   24  
   25  @interface.implementer(IKNearestNeighborsClassifier)
   26: class KNearestNeighborsClassifier(SupervisedModel):
   27  
   28      def classify(self, inputs):
   ..
   38  
   39  @interface.implementer(IKNearestNeighborsRegressor)
   40: class KNearestNeighborsRegressor(SupervisedModel):
   41  
   42      def predict(self, inputs):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/src/nti/machine_learning/algorithms/supervised/neural_network.py:
   14  from zope import interface
   15  
   16: from nti.machine_learning.algorithms.supervised import SupervisedModel
   17  
   18: from nti.machine_learning.algorithms.supervised.interfaces import INeuralNetwork
   19  
   20  from nti.machine_learning.evaluation.cross_validation import KFoldCrossValidation
   ..
   22  
   23  @interface.implementer(INeuralNetwork)
   24: class NeuralNetwork(SupervisedModel):
   25      """
   26      Abstraction of a multi-layer perceptron classifier from sci-kit learn

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/src/nti/machine_learning/algorithms/supervised/regression.py:
   16  from zope import interface
   17  
   18: from nti.machine_learning.algorithms.supervised import SupervisedModel
   19  
   20: from nti.machine_learning.algorithms.supervised.interfaces import IRegressor
   21  
   22  from nti.machine_learning.evaluation.cross_validation import KFoldCrossValidation
   ..
   24  
   25  @interface.implementer(IRegressor)
   26: class Regressor(SupervisedModel):
   27  
   28      def train(self, data_frame, prediction_columns, **kwargs):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/src/nti/machine_learning/algorithms/supervised/support_vector_machine.py:
   15  from zope import interface
   16  
   17: from nti.machine_learning.algorithms.supervised import SupervisedModel
   18  
   19: from nti.machine_learning.algorithms.supervised.interfaces import ISVM
   20: from nti.machine_learning.algorithms.supervised.interfaces import ILinearSupportVectorClassification
   21  
   22  from nti.machine_learning.evaluation.cross_validation import KFoldCrossValidation
   ..
   24  
   25  @interface.implementer(ISVM)
   26: class SupportVectorMachine(SupervisedModel):
   27      """
   28      Abstraction of the SciKit Learn Support Vector Machine.
   ..
   42  
   43  @interface.implementer(ILinearSupportVectorClassification)
   44: class LinearSupportVectorClassification(SupervisedModel):
   45  
   46      def classify(self, inputs):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/src/nti/machine_learning/algorithms/supervised/tests/test_ensemble.py:
   15  from nti.testing.matchers import validly_provides
   16  
   17: from nti.machine_learning.algorithms.supervised.interfaces import IEnsembleRandomForestClassifier
   18  
   19  from nti.machine_learning.tests import BinaryClassifierLayerTest

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/src/nti/machine_learning/algorithms/supervised/tests/test_k_nearest_neighbors.py:
   15  from nti.testing.matchers import validly_provides
   16  
   17: from nti.machine_learning.algorithms.supervised.interfaces import IKNearestNeighborsRegressor
   18: from nti.machine_learning.algorithms.supervised.interfaces import IKNearestNeighborsClassifier
   19  
   20  from nti.machine_learning.tests import RegressorLayerTest

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/src/nti/machine_learning/algorithms/supervised/tests/test_models.py:
   16  from nti.testing.matchers import validly_provides
   17  
   18: from nti.machine_learning.algorithms.supervised.interfaces import ISVM
   19: from nti.machine_learning.algorithms.supervised.interfaces import IRegressor
   20: from nti.machine_learning.algorithms.supervised.interfaces import INeuralNetwork
   21: from nti.machine_learning.algorithms.supervised.interfaces import IKNearestNeighborsRegressor
   22: from nti.machine_learning.algorithms.supervised.interfaces import IKNearestNeighborsClassifier
   23: from nti.machine_learning.algorithms.supervised.interfaces import ILinearSupportVectorClassification
   24: from nti.machine_learning.algorithms.supervised.interfaces import IEnsembleRandomForestClassifier
   25  
   26: from nti.machine_learning.tests import SupervisedLearningLayerTest
   27  
   28  
   29: class TestSupervisedModels(SupervisedLearningLayerTest):
   30      """
   31:     Test the validity of the various supervised models.
   32      """
   33  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/src/nti/machine_learning/algorithms/supervised/tests/test_svm.py:
   15  from nti.testing.matchers import validly_provides
   16  
   17: from nti.machine_learning.algorithms.supervised.interfaces import ISVM
   18: from nti.machine_learning.algorithms.supervised.interfaces import ILinearSupportVectorClassification
   19  
   20  from nti.machine_learning.tests import BinaryClassifierLayerTest

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/src/nti/machine_learning/algorithms/unsupervised/__init__.py:
   15  from nti.machine_learning import AbstractDataSet
   16  
   17: from nti.machine_learning.algorithms.unsupervised.interfaces import IUnsupervisedModel
   18: from nti.machine_learning.algorithms.unsupervised.interfaces import IUnsupervisedDataSet
   19  
   20  from nti.property.property import alias
   ..
   25  
   26  
   27: @interface.implementer(IUnsupervisedModel)
   28  class AbstractClusterModel(Model, SchemaConfigured):
   29      """
   ..
   33      and marks all points as not yet belonging to any cluster.
   34      """
   35:     createDirectFieldProperties(IUnsupervisedModel)
   36  
   37      data = alias('_data')
   ..
   48              raise ValueError('Points list length must be > 1')
   49          self._dimensions = len(data_frame.columns)
   50:         self._data = UnsupervisedDataSet(data_frame)
   51  
   52  
   53: @interface.implementer(IUnsupervisedDataSet)
   54: class UnsupervisedDataSet(AbstractDataSet):
   55      """
   56:     Impelmentation of an unsupervised data set. Manages the point
   57      storage as well as cluster creation and changes
   58      """
   59:     createDirectFieldProperties(IUnsupervisedDataSet)
   60  
   61      CLUSTER = alias('_CLUSTER')

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/src/nti/machine_learning/algorithms/unsupervised/density.py:
   14  from zope import interface
   15  
   16: from nti.machine_learning.algorithms.unsupervised import AbstractClusterModel
   17  
   18: from nti.machine_learning.algorithms.unsupervised.interfaces import IDBScan
   19  
   20  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/src/nti/machine_learning/algorithms/unsupervised/geometric.py:
   14  from zope import interface
   15  
   16: from nti.machine_learning.algorithms.unsupervised import AbstractClusterModel
   17  
   18: from nti.machine_learning.algorithms.unsupervised.interfaces import IKMeans
   19  
   20  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/src/nti/machine_learning/algorithms/unsupervised/interfaces.py:
   18  
   19  
   20: class IUnsupervisedModel(IModel):
   21      """
   22:     Outlines an unsupervised clustering model
   23      """
   24  
   ..
   39  
   40  
   41: class IUnsupervisedDataSet(IDataSet):
   42      """
   43:     Outlines the data and structure for an IUnsupervisedModel
   44      """
   45  
   46      CLUSTER = TextLine(title=u"Cluster",
   47:                        description=u"The cluster column in an unsupervised data set",
   48                         default=u"cluster",
   49                         readonly=True)
   ..
   92  
   93  
   94: class IKMeans(IUnsupervisedModel):
   95      """
   96      Represents a KMeans clustering model.
   ..
   98  
   99  
  100: class IDBScan(IUnsupervisedModel):
  101      """
  102      Represents a DBScan clustering model

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/src/nti/machine_learning/algorithms/unsupervised/tests/test_models.py:
   14  from nti.testing.matchers import validly_provides
   15  
   16: from nti.machine_learning.algorithms.unsupervised.interfaces import IDBScan
   17: from nti.machine_learning.algorithms.unsupervised.interfaces import IKMeans
   18  
   19: from nti.machine_learning.tests import UnsupervisedLearningLayerTest
   20  
   21  
   22: class TestUnsupervisedModels(UnsupervisedLearningLayerTest):
   23      """
   24:     Test known available unsupervised models
   25      """
   26  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/src/nti/machine_learning/tests/__init__.py:
   54  
   55  
   56: class SupervisedLearningLayerTest(unittest.TestCase):
   57  
   58      layer = SharedConfiguringTestLayer
   ..
   70  
   71  
   72: class UnsupervisedLearningLayerTest(unittest.TestCase):
   73  
   74      layer = SharedConfiguringTestLayer

759 matches across 145 files


Searching 15470 files for "@class"

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/_abcoll.py:
   37          return 0
   38  
   39:     @classmethod
   40      def __subclasshook__(cls, C):
   41          if cls is Hashable:
   ..
   61              yield None
   62  
   63:     @classmethod
   64      def __subclasshook__(cls, C):
   65          if cls is Iterable:
   ..
   81          return self
   82  
   83:     @classmethod
   84      def __subclasshook__(cls, C):
   85          if cls is Iterator:
   ..
   96          return 0
   97  
   98:     @classmethod
   99      def __subclasshook__(cls, C):
  100          if cls is Sized:
  ...
  111          return False
  112  
  113:     @classmethod
  114      def __subclasshook__(cls, C):
  115          if cls is Container:
  ...
  126          return False
  127  
  128:     @classmethod
  129      def __subclasshook__(cls, C):
  130          if cls is Callable:
  ...
  186          return not (self == other)
  187  
  188:     @classmethod
  189      def _from_iterable(cls, it):
  190          '''Construct an instance of the class from any iterable input.
  ...
  443  class KeysView(MappingView, Set):
  444  
  445:     @classmethod
  446      def _from_iterable(self, it):
  447          return set(it)
  ...
  458  class ItemsView(MappingView, Set):
  459  
  460:     @classmethod
  461      def _from_iterable(self, it):
  462          return set(it)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/cycler.py:
  189              yield out
  190  
  191:     @classmethod
  192      def _from_iter(cls, label, itr):
  193          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/dateutil/parser.py:
  188          return self.__next__()  # Python 2.x support
  189  
  190:     @classmethod
  191      def split(cls, s):
  192          return list(cls(s))
  193  
  194:     @classmethod
  195      def isword(cls, nextchar):
  196          """ Whether or not the next character is part of a word """
  197          return nextchar.isalpha()
  198  
  199:     @classmethod
  200      def isnum(cls, nextchar):
  201          """ Whether the next character is part of a number """
  202          return nextchar.isdigit()
  203  
  204:     @classmethod
  205      def isspace(cls, nextchar):
  206          """ Whether the next character is whitespace """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/functools32/functools32.py:
  217          return self.__class__(self)
  218  
  219:     @classmethod
  220      def fromkeys(cls, iterable, value=None):
  221          '''OD.fromkeys(S[, v]) -> New ordered dictionary with keys from S.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/matplotlib/_pylab_helpers.py:
   36      figs = {}
   37  
   38:     @classmethod
   39      def get_fig_manager(cls, num):
   40          """
   ..
   47          return manager
   48  
   49:     @classmethod
   50      def destroy(cls, num):
   51          """
   ..
   72          gc.collect(1)
   73  
   74:     @classmethod
   75      def destroy_fig(cls, fig):
   76          "*fig* is a Figure instance"
   ..
   83              cls.destroy(num)
   84  
   85:     @classmethod
   86      def destroy_all(cls):
   87          # this is need to ensure that gc is available in corner cases
   ..
   96          gc.collect(1)
   97  
   98:     @classmethod
   99      def has_fignum(cls, num):
  100          """
  ...
  103          return num in cls.figs
  104  
  105:     @classmethod
  106      def get_all_fig_managers(cls):
  107          """
  ...
  110          return list(cls.figs.values())
  111  
  112:     @classmethod
  113      def get_num_fig_managers(cls):
  114          """
  ...
  117          return len(cls.figs)
  118  
  119:     @classmethod
  120      def get_active(cls):
  121          """
  ...
  127              return cls._activeQue[-1]
  128  
  129:     @classmethod
  130      def set_active(cls, manager):
  131          """
  ...
  140          cls.figs[manager.num] = manager
  141  
  142:     @classmethod
  143      def draw_all(cls, force=False):
  144          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/matplotlib/animation.py:
  353                         'Command stderr:\n%s' % err, level='debug')
  354  
  355:     @classmethod
  356      def bin_path(cls):
  357          '''
  ...
  362          return str(rcParams[cls.exec_key])
  363  
  364:     @classmethod
  365      def isAvailable(cls):
  366          '''
  ...
  382              return False
  383  
  384:     @classmethod
  385      def _handle_subprocess(cls, process):
  386          process.communicate()
  ...
  557          return args + ['-y', self.outfile]
  558  
  559:     @classmethod
  560      def _handle_subprocess(cls, process):
  561          _, err = process.communicate()
  ...
  738          return [self.outfile]
  739  
  740:     @classmethod
  741      def _init_from_registry(cls):
  742          if sys.platform != 'win32' or rcParams[cls.exec_key] != 'convert':
  ...
  756          rcParams[cls.exec_key] = rcParamsDefault[cls.exec_key] = binpath
  757  
  758:     @classmethod
  759      def isAvailable(cls):
  760          '''

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/matplotlib/backend_bases.py:
 2054          return int(self.figure.bbox.width), int(self.figure.bbox.height)
 2055  
 2056:     @classmethod
 2057      def get_supported_filetypes(cls):
 2058          """Return dict of savefig file formats supported by this backend"""
 2059          return cls.filetypes
 2060  
 2061:     @classmethod
 2062      def get_supported_filetypes_grouped(cls):
 2063          """Return a dict of savefig file formats supported by this backend,
 ....
 2263          return result
 2264  
 2265:     @classmethod
 2266      def get_default_filetype(cls):
 2267          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/matplotlib/backends/backend_nbagg.py:
  147          return bool(self.web_sockets)
  148  
  149:     @classmethod
  150      def get_javascript(cls, stream=None):
  151          if stream is None:

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/matplotlib/backends/backend_webagg.py:
  275              template_path=core.FigureManagerWebAgg.get_static_file_path())
  276  
  277:     @classmethod
  278      def initialize(cls, url_prefix='', port=None):
  279          if cls.initialized:
  ...
  319          cls.initialized = True
  320  
  321:     @classmethod
  322      def start(cls):
  323          if cls.started:

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/matplotlib/backends/backend_webagg_core.py:
  483                  s.send_binary(diff)
  484  
  485:     @classmethod
  486      def get_javascript(cls, stream=None):
  487          if stream is None:
  ...
  520              return output.getvalue()
  521  
  522:     @classmethod
  523      def get_static_file_path(cls):
  524          return os.path.join(os.path.dirname(__file__), 'web_backend')

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/matplotlib/docstring.py:
   50          self.params.update(*args, **kwargs)
   51  
   52:     @classmethod
   53      def from_params(cls, params):
   54          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/matplotlib/legend.py:
  517      # modify the default handler map.
  518  
  519:     @classmethod
  520      def get_default_handler_map(cls):
  521          """
  ...
  524          return cls._default_handler_map
  525  
  526:     @classmethod
  527      def set_default_handler_map(cls, handler_map):
  528          """
  ...
  531          cls._default_handler_map = handler_map
  532  
  533:     @classmethod
  534      def update_default_handler_map(cls, handler_map):
  535          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/matplotlib/patches.py:
 1888          return _cls(**_args)
 1889  
 1890:     @classmethod
 1891      def get_styles(klass):
 1892          """
 ....
 1895          return klass._style_list
 1896  
 1897:     @classmethod
 1898      def pprint_styles(klass):
 1899          """
 ....
 1902          return _pprint_styles(klass._style_list)
 1903  
 1904:     @classmethod
 1905      def register(klass, name, style):
 1906          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/matplotlib/path.py:
  170              self._readonly = False
  171  
  172:     @classmethod
  173      def _fast_from_codes_and_verts(cls, verts, codes, internals=None):
  174          """
  ...
  314      deepcopy = __deepcopy__
  315  
  316:     @classmethod
  317      def make_compound_path_from_polys(cls, XY):
  318          """
  ...
  343          return cls(verts, codes)
  344  
  345:     @classmethod
  346      def make_compound_path(cls, *args):
  347          """Make a compound path from a list of Path objects."""
  ...
  632      _unit_rectangle = None
  633  
  634:     @classmethod
  635      def unit_rectangle(cls):
  636          """
  ...
  649      _unit_regular_polygons = WeakValueDictionary()
  650  
  651:     @classmethod
  652      def unit_regular_polygon(cls, numVertices):
  653          """
  ...
  678      _unit_regular_stars = WeakValueDictionary()
  679  
  680:     @classmethod
  681      def unit_regular_star(cls, numVertices, innerCircle=0.5):
  682          """
  ...
  707          return path
  708  
  709:     @classmethod
  710      def unit_regular_asterisk(cls, numVertices):
  711          """
  ...
  718      _unit_circle = None
  719  
  720:     @classmethod
  721      def unit_circle(cls):
  722          """
  ...
  731          return cls._unit_circle
  732  
  733:     @classmethod
  734      def circle(cls, center=(0., 0.), radius=1., readonly=False):
  735          """
  ...
  804      _unit_circle_righthalf = None
  805  
  806:     @classmethod
  807      def unit_circle_righthalf(cls):
  808          """
  ...
  850          return cls._unit_circle_righthalf
  851  
  852:     @classmethod
  853      def arc(cls, theta1, theta2, n=None, is_wedge=False):
  854          """
  ...
  926          return cls(vertices, codes, readonly=True)
  927  
  928:     @classmethod
  929      def wedge(cls, theta1, theta2, n=None):
  930          """
  ...
  940      _hatch_dict = maxdict(8)
  941  
  942:     @classmethod
  943      def hatch(cls, hatchpattern, density=6):
  944          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/matplotlib/sphinxext/tests/test_tinypages.py:
   36      # Test build and output of tinypages project
   37  
   38:     @classmethod
   39      def setup_class(cls):
   40          cls.page_build = tempfile.mkdtemp()
   ..
   58                                      out, err))
   59  
   60:     @classmethod
   61      def teardown_class(cls):
   62          shutil.rmtree(cls.page_build)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/matplotlib/spines.py:
  451          return self._bounds
  452  
  453:     @classmethod
  454      def linear_spine(cls, axes, spine_type, **kwargs):
  455          """
  ...
  472          return result
  473  
  474:     @classmethod
  475      def circular_spine(cls, axes, center, radius, **kwargs):
  476          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/matplotlib/testing/decorators.py:
   86  
   87  class CleanupTest(object):
   88:     @classmethod
   89      def setup_class(cls):
   90          cls.original_units_registry = matplotlib.units.registry.copy()
   ..
   92          matplotlib.testing.setup()
   93  
   94:     @classmethod
   95      def teardown_class(cls):
   96          _do_cleanup(cls.original_units_registry,
   ..
  103  class CleanupTestCase(unittest.TestCase):
  104      '''A wrapper for unittest.TestCase that includes cleanup operations'''
  105:     @classmethod
  106      def setUpClass(cls):
  107          import matplotlib.units
  ...
  109          cls.original_settings = mpl.rcParams.copy()
  110  
  111:     @classmethod
  112      def tearDownClass(cls):
  113          _do_cleanup(cls.original_units_registry,
  ...
  182  
  183  class ImageComparisonTest(CleanupTest):
  184:     @classmethod
  185      def setup_class(cls):
  186          CleanupTest.setup_class()
  ...
  194              raise
  195  
  196:     @classmethod
  197      def teardown_class(cls):
  198          CleanupTest.teardown_class()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/matplotlib/tests/test_dates.py:
  412              return self.mk_tzaware(dt)
  413  
  414:         @classmethod
  415          def mk_tzaware(cls, datetime_obj):
  416              kwargs = {}

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/matplotlib/type1font.py:
  151      _number = object()
  152  
  153:     @classmethod
  154      def _tokens(cls, text):
  155          """
  ...
  250          self.prop = prop
  251  
  252:     @classmethod
  253      def _transformer(cls, tokens, slant, extend):
  254          def fontname(name):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/mpl_toolkits/axes_grid1/parasite_axes.py:
   76  # #class ParasiteAxes(ParasiteAxesBase, Axes):
   77  
   78: #     @classmethod
   79  #     def _get_base_axes_attr(cls, attrname):
   80  #         return getattr(Axes, attrname)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/machine_learning/tests/__init__.py:
   35      set_up_packages = ('nti.machine_learning',)
   36  
   37:     @classmethod
   38      def setUp(cls):
   39          setHooks()
   40          cls.setUpPackages()
   41  
   42:     @classmethod
   43      def tearDown(cls):
   44          cls.tearDownPackages()
   45          zope.testing.cleanup.cleanUp()
   46  
   47:     @classmethod
   48      def testSetUp(cls, unused_test=None):
   49          setHooks()
   50  
   51:     @classmethod
   52      def testTearDown(cls):
   53          pass
   ..
   58      layer = SharedConfiguringTestLayer
   59  
   60:     @classmethod
   61      def setUp(self):
   62          examples = []
   ..
   74      layer = SharedConfiguringTestLayer
   75  
   76:     @classmethod
   77      def setUp(self):
   78          points = []
   ..
   94      layer = SharedConfiguringTestLayer
   95  
   96:     @classmethod
   97      def setUp(self):
   98          iris = load_iris()
   ..
  106      layer = SharedConfiguringTestLayer
  107  
  108:     @classmethod
  109      def setUp(self):
  110          iris = load_iris()
  ...
  118      layer = SharedConfiguringTestLayer
  119  
  120:     @classmethod
  121      def setUp(self):
  122          data = load_breast_cancer()
  ...
  130      layer = SharedConfiguringTestLayer
  131  
  132:     @classmethod
  133      def setUp(self):
  134          boston = load_boston()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/property/schema.py:
   25      DATA = 'data:'
   26  
   27:     @classmethod
   28      def is_valid_data_uri(cls, value):
   29          return value and value.startswith(cls.DATA)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/property/tests/__init__.py:
   23      set_up_packages = ()
   24  
   25:     @classmethod
   26      def setUp(cls):
   27          cls.setUpPackages()
   28  
   29:     @classmethod
   30      def tearDown(cls):
   31          cls.tearDownPackages()
   32          zope.testing.cleanup.cleanUp()
   33  
   34:     @classmethod
   35      def testSetUp(cls, test=None):
   36          pass
   37  
   38:     @classmethod
   39      def testTearDown(cls):
   40          pass

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/schema/tests/__init__.py:
   21      set_up_packages = ('nti.schema',)
   22  
   23:     @classmethod
   24      def setUp(cls):
   25          cls.setUpPackages()
   26  
   27:     @classmethod
   28      def tearDown(cls):
   29          cls.tearDownPackages()
   30          cleanup.cleanUp()
   31  
   32:     @classmethod
   33      def testSetUp(cls, test=None):
   34          pass

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/schema/vocabulary.py:
   40          super(CountryTerm, self).__init__(*args, **kwargs)
   41  
   42:     @classmethod
   43      def fromItem(cls, item):
   44          token, cdata = item

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/testing/base.py:
   86              __mro__ = __bases__ = (object,)
   87  
   88:             @classmethod
   89              def setUp(cls):
   90                  the_type.setUpClass()
   91:             @classmethod
   92              def tearDown(cls):
   93                  the_type.tearDownClass()
   94:             @classmethod
   95              def testSetUp(cls):
   96                  pass
   97:             @classmethod
   98              def testTearDown(cls):
   99                  pass
  ...
  116      HANDLE_GC = False
  117  
  118:     @classmethod
  119      def setUpClass(cls):
  120          """
  ...
  139                  gc.disable() # PyPy GC is fast
  140  
  141:     @classmethod
  142      def tearDownClass(cls):
  143          zope.testing.cleanup.cleanUp()
  ...
  330      configure_events = True
  331  
  332:     @classmethod
  333      def setUpClass( cls ):
  334          super(SharedConfiguringTestBase,cls).setUpClass()
  ...
  343                                                             context=cls.configuration_context)
  344  
  345:     @classmethod
  346      def configure_packages(cls, set_up_packages=(), features=(), context=None ):
  347          cls.configuration_context = _configure(self=cls,
  ...
  351          return cls.configuration_context
  352  
  353:     @classmethod
  354      def tearDownClass( cls ):
  355          # always safe to clear events

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/nti/testing/layers.py:
   37      """
   38  
   39:     @classmethod
   40      def setUp(cls):
   41          pass
   42  
   43:     @classmethod
   44      def tearDown(cls):
   45          pass
   46  
   47:     @classmethod
   48      def testSetUp( cls ):
   49          pass
   50  
   51:     @classmethod
   52      def testTearDown(cls):
   53          # Must implement
   54          pass
   55  
   56:     @classmethod
   57      def setUpGC(cls):
   58          """
   ..
   74          gc.disable()
   75  
   76:     @classmethod
   77      def tearDownGC(cls):
   78          zope.testing.cleanup.cleanUp()
   ..
   90      """
   91  
   92:     @classmethod
   93      def setUp(cls):
   94          # You MUST implement this, otherwise zope.testrunner
   ..
   96          zope.testing.cleanup.cleanUp()
   97  
   98:     @classmethod
   99      def tearDown(cls):
  100          # You MUST implement this, otherwise zope.testrunner
  ...
  102          zope.testing.cleanup.cleanUp()
  103  
  104:     @classmethod
  105      def testSetUp(cls):
  106          sharedCleanup()
  107  
  108:     @classmethod
  109      def testTearDown(cls):
  110          sharedCleanup()
  ...
  123      """
  124  
  125:     @classmethod
  126      def setUp( cls ):
  127          setHooks() # zope.component.hooks registers a zope.testing.cleanup to reset these
  128  
  129  
  130:     @classmethod
  131      def tearDown( cls ):
  132          # always safe to clear events
  ...
  134          # resetHooks()  we never actually want to do this, it's not needed and can mess up other fixtures
  135  
  136:     @classmethod
  137      def testSetUp(cls):
  138          setHooks() # ensure these are still here; cheap and easy
  139  
  140:     @classmethod
  141      def testTearDown( cls ):
  142          # Some tear down needs to happen always
  ...
  184      configuration_context = None
  185  
  186:     @classmethod
  187      def setUp(cls):
  188          # You MUST implement this, otherwise zope.testrunner
  ...
  190          pass
  191  
  192:     @classmethod
  193      def tearDown(cls):
  194          # You MUST implement this, otherwise zope.testrunner
  ...
  196          pass
  197  
  198:     @classmethod
  199      def testSetUp( cls ):
  200          pass
  201  
  202:     @classmethod
  203      def testTearDown(cls):
  204          # Must implement
  205          pass
  206  
  207:     @classmethod
  208      def setUpPackages(cls):
  209          logger.info( 'Setting up packages %s for layer %s', cls.set_up_packages, cls )
  ...
  215          gc.collect()
  216  
  217:     @classmethod
  218      def configure_packages(cls, set_up_packages=(), features=(), context=None ):
  219          cls.configuration_context = _configure(self=cls,
  ...
  223          return cls.configuration_context
  224  
  225:     @classmethod
  226      def tearDownPackages(cls):
  227          # This is a duplicate of zope.component.globalregistry
  ...
  240      this. If you need access to the test, you can use an idiom like this::
  241  
  242:         @classmethod
  243          def testSetUp(cls, test=None):
  244              test = test or find_test()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/numpy/ctypeslib.py:
  194                  }
  195  
  196:     @classmethod
  197      def from_param(cls, obj):
  198          if not isinstance(obj, ndarray):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/numpy/lib/_iotools.py:
  534      (_defaulttype, _defaultfunc, _defaultfill) = zip(*_mapper)
  535  
  536:     @classmethod
  537      def _getdtype(cls, val):
  538          """Returns the dtype of the input variable."""
  ...
  540      #
  541  
  542:     @classmethod
  543      def _getsubdtype(cls, val):
  544          """Returns the type of the dtype of the input variable."""
  ...
  550      # "datetime64").
  551  
  552:     @classmethod
  553      def _dtypeortype(cls, dtype):
  554          """Returns dtype for datetime64 and type of dtype otherwise."""
  ...
  558      #
  559  
  560:     @classmethod
  561      def upgrade_mapper(cls, func, default=None):
  562          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/numpy/lib/tests/test_recfunctions.py:
  649  
  650  class TestJoinBy2(TestCase):
  651:     @classmethod
  652      def setUp(cls):
  653          cls.a = np.array(list(zip(np.arange(10), np.arange(50, 60),

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/numpy/polynomial/_polybase.py:
  722          return x, y
  723  
  724:     @classmethod
  725      def fit(cls, x, y, deg, domain=None, rcond=None, full=False, w=None,
  726          window=None):
  ...
  810              return cls(coef, domain=domain, window=window)
  811  
  812:     @classmethod
  813      def fromroots(cls, roots, domain=[], window=None):
  814          """Return series instance that has the specified roots.
  ...
  851          return cls(coef, domain=domain, window=window)
  852  
  853:     @classmethod
  854      def identity(cls, domain=None, window=None):
  855          """Identity function.
  ...
  884          return cls(coef, domain, window)
  885  
  886:     @classmethod
  887      def basis(cls, deg, domain=None, window=None):
  888          """Series basis polynomial of degree `deg`.
  ...
  923          return cls([0]*ideg + [1], domain, window)
  924  
  925:     @classmethod
  926      def cast(cls, series, domain=None, window=None):
  927          """Convert series to series of this class.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/compat/chainmap_impl.py:
   87              self, ', '.join(repr(m) for m in self.maps))
   88  
   89:     @classmethod
   90      def fromkeys(cls, iterable, *args):
   91          'Create a ChainMap with a single dict created from the iterable.'

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/core/base.py:
  176          raise TypeError("You cannot call method {name}".format(name=name))
  177  
  178:     @classmethod
  179      def _add_delegate_accessors(cls, delegate, accessors, typ,
  180                                  overwrite=False):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/core/categorical.py:
  428          return None
  429  
  430:     @classmethod
  431      def from_array(cls, data, **kwargs):
  432          """
  ...
  447          return cls(data, **kwargs)
  448  
  449:     @classmethod
  450      def from_codes(cls, codes, categories, ordered=False):
  451          """
  ...
  522      _categories = None
  523  
  524:     @classmethod
  525      def _validate_ordered(cls, ordered):
  526          """
  ...
  541              raise TypeError("'ordered' must either be 'True' or 'False'")
  542  
  543:     @classmethod
  544      def _validate_categories(cls, categories, fastpath=False):
  545          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/core/dtypes/dtypes.py:
   77          return {k: getattr(self, k, None) for k in self._metadata}
   78  
   79:     @classmethod
   80      def reset_cache(cls):
   81          """ clear the cache """
   82          cls._cache = {}
   83  
   84:     @classmethod
   85      def is_dtype(cls, dtype):
   86          """ Return a boolean if the passed type is an actual dtype that
   ..
  143          return isinstance(other, CategoricalDtype)
  144  
  145:     @classmethod
  146      def construct_from_string(cls, string):
  147          """ attempt to construct this type from a string, raise a TypeError if
  ...
  239              return u
  240  
  241:     @classmethod
  242      def construct_from_string(cls, string):
  243          """ attempt to construct this type from a string, raise a TypeError if
  ...
  319              return u
  320  
  321:     @classmethod
  322      def _parse_dtype_strict(cls, freq):
  323          if isinstance(freq, compat.string_types):
  ...
  333          raise ValueError("could not construct PeriodDtype")
  334  
  335:     @classmethod
  336      def construct_from_string(cls, string):
  337          """
  ...
  365          return isinstance(other, PeriodDtype) and self.freq == other.freq
  366  
  367:     @classmethod
  368      def is_dtype(cls, dtype):
  369          """
  ...
  454              return u
  455  
  456:     @classmethod
  457      def construct_from_string(cls, string):
  458          """
  ...
  487                  self.subtype == other.subtype)
  488  
  489:     @classmethod
  490      def is_dtype(cls, dtype):
  491          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/core/dtypes/generic.py:
    5  # objects
    6  def create_pandas_abc_type(name, attr, comp):
    7:     @classmethod
    8      def _check(cls, inst):
    9          return getattr(inst, attr, '_typ') in comp

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/core/frame.py:
  817      # IO methods (to / from other formats)
  818  
  819:     @classmethod
  820      def from_dict(cls, data, orient='columns', dtype=None):
  821          """
  ...
  957                            if_exists=if_exists, private_key=private_key)
  958  
  959:     @classmethod
  960      def from_records(cls, data, index=None, exclude=None, columns=None,
  961                       coerce_float=False, nrows=None):
  ...
 1133          )
 1134  
 1135:     @classmethod
 1136      def from_items(cls, items, columns=None, orient='columns'):
 1137          """
 ....
 1187              raise ValueError("'orient' must be either 'columns' or 'index'")
 1188  
 1189:     @classmethod
 1190      def _from_arrays(cls, arrays, columns, index, dtype=None):
 1191          mgr = _arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)
 1192          return cls(mgr)
 1193  
 1194:     @classmethod
 1195      def from_csv(cls, path, header=0, sep=',', index_col=0, parse_dates=True,
 1196                   encoding=None, tupleize_cols=False,

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/core/generic.py:
  212      # Axis
  213  
  214:     @classmethod
  215      def _setup_axes(cls, axes, info_axis=None, stat_axis=None, aliases=None,
  216                      slicers=None, axes_are_reversed=False, build_axes=True,
  ...
  328          return axes, kwargs
  329  
  330:     @classmethod
  331      def _from_axes(cls, data, axes, **kwargs):
  332          # for construction from BlockManager
  ...
 1597      # Fancy Indexing
 1598  
 1599:     @classmethod
 1600      def _create_indexer(cls, name, indexer):
 1601          """Create an indexer like _name in the class."""
 ....
 6034          return grouped.aggregate(applyf)
 6035  
 6036:     @classmethod
 6037      def _add_numeric_operations(cls):
 6038          """Add the operations to the cls; evaluate the doc strings again"""
 ....
 6158              nanops.nanmin)
 6159  
 6160:     @classmethod
 6161      def _add_series_only_operations(cls):
 6162          """Add the series only operations to the cls; evaluate the doc
 ....
 6178              nanptp)
 6179  
 6180:     @classmethod
 6181      def _add_series_or_dataframe_operations(cls):
 6182          """Add the series or dataframe only operations to the cls; evaluate

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/core/groupby.py:
 1130          return result
 1131  
 1132:     @classmethod
 1133      def _add_numeric_operations(cls):
 1134          """ add numeric operations to the GroupBy generically """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/core/indexes/base.py:
  365      """
  366  
  367:     @classmethod
  368      def _simple_new(cls, values, name=None, dtype=None, **kwargs):
  369          """
  ...
  632  
  633      # construction helpers
  634:     @classmethod
  635      def _try_convert_to_int_index(cls, data, copy, name):
  636          """
  ...
  672          raise ValueError
  673  
  674:     @classmethod
  675      def _scalar_data_error(cls, data):
  676          raise TypeError('{0}(...) must be called with a collection of some '
  ...
  678                                                        repr(data)))
  679  
  680:     @classmethod
  681      def _string_data_error(cls, data):
  682          raise TypeError('String dtype not supported, you may need '
  683                          'to explicitly cast to a numeric type')
  684  
  685:     @classmethod
  686      def _coerce_to_ndarray(cls, data):
  687          """coerces data to ndarray, raises on scalar data. Converts other
  ...
 3700          raise base.AbstractMethodError(self)
 3701  
 3702:     @classmethod
 3703      def _add_comparison_methods(cls):
 3704          """ add in comparison methods """
 ....
 3744          cls.__ge__ = _make_compare(operator.ge)
 3745  
 3746:     @classmethod
 3747      def _add_numeric_methods_add_sub_disabled(cls):
 3748          """ add in the numeric add/sub methods to disable """
 ....
 3759          cls.__sub__ = __isub__ = _make_invalid_op('__sub__')  # noqa
 3760  
 3761:     @classmethod
 3762      def _add_numeric_methods_disabled(cls):
 3763          """ add in numeric methods to disable other than add/sub """
 ....
 3845          return other
 3846  
 3847:     @classmethod
 3848      def _add_numeric_methods_binary(cls):
 3849          """ add in numeric methods """
 ....
 3912          )
 3913  
 3914:     @classmethod
 3915      def _add_numeric_methods_unary(cls):
 3916          """ add in numeric unary methods """
 ....
 3932          cls.__inv__ = _make_evaluate_unary(lambda x: -x, '__inv__')
 3933  
 3934:     @classmethod
 3935      def _add_numeric_methods(cls):
 3936          cls._add_numeric_methods_unary()
 3937          cls._add_numeric_methods_binary()
 3938  
 3939:     @classmethod
 3940      def _add_logical_methods(cls):
 3941          """ add in logical methods """
 ....
 3976                                           np.any)
 3977  
 3978:     @classmethod
 3979      def _add_logical_methods_disabled(cls):
 3980          """ add in logical methods to disable """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/core/indexes/category.py:
  144          return data
  145  
  146:     @classmethod
  147      def _simple_new(cls, values, name=None, categories=None, ordered=None,
  148                      **kwargs):
  ...
  638          return self.values._codes_for_groupby(sort)
  639  
  640:     @classmethod
  641      def _add_comparison_methods(cls):
  642          """ add in comparison methods """
  ...
  686          return CategoricalIndex(res, name=self.name)
  687  
  688:     @classmethod
  689      def _add_accessors(cls):
  690          """ add in Categorical accessor methods """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/core/indexes/datetimelike.py:
  630          return NotImplemented
  631  
  632:     @classmethod
  633      def _add_datetimelike_methods(cls):
  634          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/core/indexes/datetimes.py:
  408          return subarr._deepcopy_if_needed(ref_to_data, copy)
  409  
  410:     @classmethod
  411      def _generate(cls, start, end, periods, name, offset,
  412                    tz=None, normalize=False, ambiguous='raise', closed=None):
  ...
  566              return result.take(reverse)
  567  
  568:     @classmethod
  569      def _simple_new(cls, values, name=None, freq=None, tz=None,
  570                      dtype=None, **kwargs):
  ...
  618          return zzone == vzone
  619  
  620:     @classmethod
  621      def _cached_range(cls, start=None, end=None, periods=None, offset=None,
  622                        name=None):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/core/indexes/interval.py:
  156                                 copy=copy, verify_integrity=verify_integrity)
  157  
  158:     @classmethod
  159      def _simple_new(cls, left, right, closed=None, name=None,
  160                      copy=False, verify_integrity=True):
  ...
  295              return False
  296  
  297:     @classmethod
  298      def from_breaks(cls, breaks, closed='right', name=None, copy=False):
  299          """
  ...
  324                                 name=name, copy=copy)
  325  
  326:     @classmethod
  327      def from_arrays(cls, left, right, closed='right', name=None, copy=False):
  328          """
  ...
  356                                 copy=copy, verify_integrity=True)
  357  
  358:     @classmethod
  359      def from_intervals(cls, data, name=None, copy=False):
  360          """
  ...
  391          return cls.from_arrays(left, right, closed, name=name, copy=False)
  392  
  393:     @classmethod
  394      def from_tuples(cls, data, closed='right', name=None, copy=False):
  395          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/core/indexes/multi.py:
 1057          return 0
 1058  
 1059:     @classmethod
 1060      def from_arrays(cls, arrays, sortorder=None, names=None):
 1061          """
 ....
 1105                            names=names, verify_integrity=False)
 1106  
 1107:     @classmethod
 1108      def from_tuples(cls, tuples, sortorder=None, names=None):
 1109          """
 ....
 1151          return MultiIndex.from_arrays(arrays, sortorder=sortorder, names=names)
 1152  
 1153:     @classmethod
 1154      def from_product(cls, iterables, sortorder=None, names=None):
 1155          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/core/indexes/numeric.py:
   64                               (type(self).__name__, tolerance))
   65  
   66:     @classmethod
   67      def _assert_safe_casting(cls, data, subarr):
   68          """
   ..
  146          return Int64Index(joined, name=name)
  147  
  148:     @classmethod
  149      def _assert_safe_casting(cls, data, subarr):
  150          """
  ...
  224          return UInt64Index(joined, name=name)
  225  
  226:     @classmethod
  227      def _assert_safe_casting(cls, data, subarr):
  228          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/core/indexes/period.py:
  276          return cls._from_ordinals(data, name=name, freq=freq)
  277  
  278:     @classmethod
  279      def _generate_range(cls, start, end, periods, freq, fields):
  280          if freq is not None:
  ...
  295          return subarr, freq
  296  
  297:     @classmethod
  298      def _simple_new(cls, values, name=None, freq=None, **kwargs):
  299          """
  ...
  309          return cls._from_ordinals(values, name, freq, **kwargs)
  310  
  311:     @classmethod
  312      def _from_ordinals(cls, values, name=None, freq=None, **kwargs):
  313          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/core/indexes/range.py:
   95          return cls._simple_new(start, stop, step, name)
   96  
   97:     @classmethod
   98      def from_range(cls, data, name=None, dtype=None, **kwargs):
   99          """ create RangeIndex from a range (py3), or xrange (py2) object """
  ...
  123          return RangeIndex(start, stop, step, dtype=dtype, name=name, **kwargs)
  124  
  125:     @classmethod
  126      def _simple_new(cls, start, stop=None, step=None, name=None,
  127                      dtype=None, **kwargs):
  ...
  537          return self._int64index // other
  538  
  539:     @classmethod
  540      def _add_numeric_methods_binary(cls):
  541          """ add in numeric methods, specialized to RangeIndex """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/core/indexes/timedeltas.py:
  232          return cls._simple_new(data, name=name, freq=freq)
  233  
  234:     @classmethod
  235      def _generate(cls, start, end, periods, name, offset, closed=None):
  236          if com._count_not_none(start, end, periods) != 2:
  ...
  275          return lambda x: Timedelta(x, unit='ns')
  276  
  277:     @classmethod
  278      def _simple_new(cls, values, name=None, freq=None, **kwargs):
  279          values = np.array(values, copy=False)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/core/ops.py:
  314          self.rvalues = right
  315  
  316:     @classmethod
  317      def get_op(cls, left, right, name, na_op):
  318          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/core/panel.py:
  237          return create_block_manager_from_arrays(arrays, arr_names, axes)
  238  
  239:     @classmethod
  240      def from_dict(cls, data, intersect=False, orient='items', dtype=None):
  241          """
  ...
 1482          return _ensure_index(index)
 1483  
 1484:     @classmethod
 1485      def _add_aggregate_operations(cls, use_numexpr=True):
 1486          """ add the operations to the cls; evaluate the doc strings again """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/core/series.py:
  255          self._set_axis(0, index, fastpath=True)
  256  
  257:     @classmethod
  258      def from_array(cls, arr, index=None, name=None, dtype=None, copy=False,
  259                     fastpath=False):
  ...
 2581          return lmask & rmask
 2582  
 2583:     @classmethod
 2584      def from_csv(cls, path, sep=',', parse_dates=True, header=None,
 2585                   index_col=0, encoding=None, infer_datetime_format=False):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/core/sparse/array.py:
  230          return cls._simple_new(subarr, sparse_index, fill_value)
  231  
  232:     @classmethod
  233      def _simple_new(cls, data, sp_index, fill_value):
  234          if not isinstance(sp_index, SparseIndex):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/core/sparse/series.py:
  252          return self.sp_index.npoints
  253  
  254:     @classmethod
  255      def from_array(cls, arr, index=None, name=None, copy=False,
  256                     fill_value=None, fastpath=False):
  ...
  777          return A, rows, columns
  778  
  779:     @classmethod
  780      def from_coo(cls, A, dense_index=False):
  781          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/io/excel.py:
  766          return sheet_name
  767  
  768:     @classmethod
  769      def check_extension(cls, ext):
  770          """checks that path's extension against the Writer's supported
  ...
  886                                      field, style.__getattribute__(field))
  887  
  888:     @classmethod
  889      def _convert_to_style(cls, style_dict):
  890          """
  ...
  985                              xcell.style = xcell.style.copy(**style_kwargs)
  986  
  987:     @classmethod
  988      def _convert_to_style_kwargs(cls, style_dict):
  989          """
  ...
 1024          return style_kwargs
 1025  
 1026:     @classmethod
 1027      def _convert_to_color(cls, color_spec):
 1028          """
 ....
 1052              return Color(**color_spec)
 1053  
 1054:     @classmethod
 1055      def _convert_to_font(cls, font_dict):
 1056          """
 ....
 1100          return Font(**font_kwargs)
 1101  
 1102:     @classmethod
 1103      def _convert_to_stop(cls, stop_seq):
 1104          """
 ....
 1117          return map(cls._convert_to_color, stop_seq)
 1118  
 1119:     @classmethod
 1120      def _convert_to_fill(cls, fill_dict):
 1121          """
 ....
 1181              return GradientFill(**gfill_kwargs)
 1182  
 1183:     @classmethod
 1184      def _convert_to_side(cls, side_spec):
 1185          """
 ....
 1216          return Side(**side_kwargs)
 1217  
 1218:     @classmethod
 1219      def _convert_to_border(cls, border_dict):
 1220          """
 ....
 1259          return Border(**border_kwargs)
 1260  
 1261:     @classmethod
 1262      def _convert_to_alignment(cls, alignment_dict):
 1263          """
 ....
 1282          return Alignment(**alignment_dict)
 1283  
 1284:     @classmethod
 1285      def _convert_to_number_format(cls, number_format_dict):
 1286          """
 ....
 1304              return number_format_dict['format_code']
 1305  
 1306:     @classmethod
 1307      def _convert_to_protection(cls, protection_dict):
 1308          """
 ....
 1472                            val, style)
 1473  
 1474:     @classmethod
 1475      def _style_to_xlwt(cls, item, firstlevel=True, field_sep=',',
 1476                         line_sep=';'):
 ....
 1506              return item
 1507  
 1508:     @classmethod
 1509      def _convert_to_style(cls, style_dict, num_format_str=None):
 1510          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/io/formats/style.py:
 1113                                  index=data.index, columns=data.columns)
 1114  
 1115:     @classmethod
 1116      def from_custom_template(cls, searchpath, name):
 1117          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/io/pytables.py:
 1771      _info_fields = ['tz', 'ordered']
 1772  
 1773:     @classmethod
 1774      def create_for_block(
 1775              cls, i=None, name=None, cname=None, version=None, **kwargs):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/io/stata.py:
  803                  self.string == other.string and self.value == other.value)
  804  
  805:     @classmethod
  806      def get_base_missing_value(cls, dtype):
  807          if dtype == np.int8:

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/plotting/_core.py:
  555          return x
  556  
  557:     @classmethod
  558      def _plot(cls, ax, x, y, style=None, is_errorbar=False, **kwds):
  559          mask = isnull(y)
  ...
  594          return name
  595  
  596:     @classmethod
  597      def _get_ax_layer(cls, ax, primary=True):
  598          """get left (primary) or right (secondary) axes"""
  ...
  955              ax.set_xlim(left, right)
  956  
  957:     @classmethod
  958      def _plot(cls, ax, x, y, style=None, column_num=None,
  959                stacking_id=None, **kwds):
  ...
  967          return lines
  968  
  969:     @classmethod
  970      def _ts_plot(cls, ax, x, data, style=None, **kwds):
  971          from pandas.plotting._timeseries import (_maybe_resample,
  ...
  997              return None
  998  
  999:     @classmethod
 1000      def _initialize_stacker(cls, ax, stacking_id, n):
 1001          if stacking_id is None:
 ....
 1008          ax._stacker_neg_prior[stacking_id] = np.zeros(n)
 1009  
 1010:     @classmethod
 1011      def _get_stacked_values(cls, ax, stacking_id, values, label):
 1012          if stacking_id is None:
 ....
 1026                           .format(label))
 1027  
 1028:     @classmethod
 1029      def _update_stacker(cls, ax, stacking_id, values):
 1030          if stacking_id is None:
 ....
 1069              raise ValueError("Log-y scales are not supported in area plot")
 1070  
 1071:     @classmethod
 1072      def _plot(cls, ax, x, y, style=None, column_num=None,
 1073                stacking_id=None, is_errorbar=False, **kwds):
 ....
 1166              self.left = np.array(self.left)
 1167  
 1168:     @classmethod
 1169      def _plot(cls, ax, x, y, w, start=0, log=False, **kwds):
 1170          return ax.bar(x, y, w, bottom=start, log=log, **kwds)
 ....
 1253          return self.left
 1254  
 1255:     @classmethod
 1256      def _plot(cls, ax, x, y, w, start=0, log=False, **kwds):
 1257          return ax.barh(x, y, w, left=start, log=log, **kwds)
 ....
 1290              self.bottom = np.array(self.bottom)
 1291  
 1292:     @classmethod
 1293      def _plot(cls, ax, y, style=None, bins=None, bottom=0, column_num=0,
 1294                stacking_id=None, **kwds):
 ....
 1369          return ind
 1370  
 1371:     @classmethod
 1372      def _plot(cls, ax, y, style=None, bw_method=None, ind=None,
 1373                column_num=None, stacking_id=None, **kwds):
 ....
 1491                  self.sharey = False
 1492  
 1493:     @classmethod
 1494      def _plot(cls, ax, y, column_num=None, return_type='axes', **kwds):
 1495          if y.ndim == 2:

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/tests/computation/test_eval.py:
   98  class TestEvalNumexprPandas(object):
   99  
  100:     @classmethod
  101      def setup_class(cls):
  102          tm.skip_if_no_ne()
  ...
  106          cls.parser = 'pandas'
  107  
  108:     @classmethod
  109      def teardown_class(cls):
  110          del cls.engine, cls.parser
  ...
  721  class TestEvalNumexprPython(TestEvalNumexprPandas):
  722  
  723:     @classmethod
  724      def setup_class(cls):
  725          super(TestEvalNumexprPython, cls).setup_class()
  ...
  748  class TestEvalPythonPython(TestEvalNumexprPython):
  749  
  750:     @classmethod
  751      def setup_class(cls):
  752          super(TestEvalPythonPython, cls).setup_class()
  ...
  778  class TestEvalPythonPandas(TestEvalPythonPython):
  779  
  780:     @classmethod
  781      def setup_class(cls):
  782          super(TestEvalPythonPandas, cls).setup_class()
  ...
 1068  class TestOperationsNumExprPandas(object):
 1069  
 1070:     @classmethod
 1071      def setup_class(cls):
 1072          tm.skip_if_no_ne()
 ....
 1075          cls.arith_ops = expr._arith_ops_syms + expr._cmp_ops_syms
 1076  
 1077:     @classmethod
 1078      def teardown_class(cls):
 1079          del cls.engine, cls.parser
 ....
 1488  class TestOperationsNumExprPython(TestOperationsNumExprPandas):
 1489  
 1490:     @classmethod
 1491      def setup_class(cls):
 1492          super(TestOperationsNumExprPython, cls).setup_class()
 ....
 1562  class TestOperationsPythonPython(TestOperationsNumExprPython):
 1563  
 1564:     @classmethod
 1565      def setup_class(cls):
 1566          super(TestOperationsPythonPython, cls).setup_class()
 ....
 1573  class TestOperationsPythonPandas(TestOperationsNumExprPandas):
 1574  
 1575:     @classmethod
 1576      def setup_class(cls):
 1577          super(TestOperationsPythonPandas, cls).setup_class()
 ....
 1583  class TestMathPythonPython(object):
 1584  
 1585:     @classmethod
 1586      def setup_class(cls):
 1587          tm.skip_if_no_ne()
 ....
 1591          cls.binary_fns = _binary_math_ops
 1592  
 1593:     @classmethod
 1594      def teardown_class(cls):
 1595          del cls.engine, cls.parser
 ....
 1689  class TestMathPythonPandas(TestMathPythonPython):
 1690  
 1691:     @classmethod
 1692      def setup_class(cls):
 1693          super(TestMathPythonPandas, cls).setup_class()
 ....
 1698  class TestMathNumExprPandas(TestMathPythonPython):
 1699  
 1700:     @classmethod
 1701      def setup_class(cls):
 1702          super(TestMathNumExprPandas, cls).setup_class()
 ....
 1707  class TestMathNumExprPython(TestMathPythonPython):
 1708  
 1709:     @classmethod
 1710      def setup_class(cls):
 1711          super(TestMathNumExprPython, cls).setup_class()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/tests/frame/test_query_eval.py:
  387  class TestDataFrameQueryNumExprPandas(object):
  388  
  389:     @classmethod
  390      def setup_class(cls):
  391          cls.engine = 'numexpr'
  ...
  393          tm.skip_if_no_ne(cls.engine)
  394  
  395:     @classmethod
  396      def teardown_class(cls):
  397          del cls.engine, cls.parser
  ...
  717  class TestDataFrameQueryNumExprPython(TestDataFrameQueryNumExprPandas):
  718  
  719:     @classmethod
  720      def setup_class(cls):
  721          super(TestDataFrameQueryNumExprPython, cls).setup_class()
  ...
  818  class TestDataFrameQueryPythonPandas(TestDataFrameQueryNumExprPandas):
  819  
  820:     @classmethod
  821      def setup_class(cls):
  822          super(TestDataFrameQueryPythonPandas, cls).setup_class()
  ...
  839  class TestDataFrameQueryPythonPython(TestDataFrameQueryNumExprPython):
  840  
  841:     @classmethod
  842      def setup_class(cls):
  843          super(TestDataFrameQueryPythonPython, cls).setup_class()
  ...
 1040  class TestDataFrameEvalNumExprPandas(object):
 1041  
 1042:     @classmethod
 1043      def setup_class(cls):
 1044          cls.engine = 'numexpr'
 ....
 1076  class TestDataFrameEvalNumExprPython(TestDataFrameEvalNumExprPandas):
 1077  
 1078:     @classmethod
 1079      def setup_class(cls):
 1080          super(TestDataFrameEvalNumExprPython, cls).setup_class()
 ....
 1086  class TestDataFrameEvalPythonPandas(TestDataFrameEvalNumExprPandas):
 1087  
 1088:     @classmethod
 1089      def setup_class(cls):
 1090          super(TestDataFrameEvalPythonPandas, cls).setup_class()
 ....
 1095  class TestDataFrameEvalPythonPython(TestDataFrameEvalNumExprPython):
 1096  
 1097:     @classmethod
 1098      def setup_class(cls):
 1099          cls.engine = cls.parser = 'python'

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/tests/io/formats/test_printing.py:
  125  class TestTableSchemaRepr(object):
  126  
  127:     @classmethod
  128      def setup_class(cls):
  129          pytest.importorskip('IPython')

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/tests/io/test_clipboard.py:
   28  class TestClipboard(object):
   29  
   30:     @classmethod
   31      def setup_class(cls):
   32          cls.data = {}
   ..
   63          cls.data_types = list(cls.data.keys())
   64  
   65:     @classmethod
   66      def teardown_class(cls):
   67          del cls.data_types, cls.data

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/tests/io/test_excel.py:
 1936      """Skip test case if openpyxl >= 2.2"""
 1937  
 1938:     @classmethod
 1939      def setup_class(cls):
 1940          _skip_if_no_openpyxl()
 ....
 2053      """Skip test case if openpyxl < 2.2"""
 2054  
 2055:     @classmethod
 2056      def setup_class(cls):
 2057          _skip_if_no_openpyxl()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/tests/io/test_gbq.py:
   96  class TestToGBQIntegrationWithServiceAccountKeyPath(object):
   97  
   98:     @classmethod
   99      def setup_class(cls):
  100          # - GLOBAL CLASS FIXTURES -
  ...
  110                                  ).create(DATASET_ID + "1")
  111  
  112:     @classmethod
  113      def teardown_class(cls):
  114          # - GLOBAL CLASS FIXTURES -

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/tests/io/test_html.py:
  102      banklist_data = os.path.join(DATA_PATH, 'banklist.html')
  103  
  104:     @classmethod
  105      def setup_class(cls):
  106          _skip_if_none_of(('bs4', 'html5lib'))
  ...
  785      flavor = 'bs4'
  786  
  787:     @classmethod
  788      def setup_class(cls):
  789          _skip_if_none_of((cls.flavor, 'html5lib'))
  ...
  826      flavor = 'lxml'
  827  
  828:     @classmethod
  829      def setup_class(cls):
  830          super(TestReadHtmlEncodingLxml, cls).setup_class()
  ...
  835      flavor = 'lxml'
  836  
  837:     @classmethod
  838      def setup_class(cls):
  839          _skip_if_no('lxml')

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/tests/io/test_pytables.py:
  124  class Base(object):
  125  
  126:     @classmethod
  127      def setup_class(cls):
  128  
  ...
  130          tm.reset_testing_mode()
  131  
  132:     @classmethod
  133      def teardown_class(cls):
  134  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/tests/io/test_sql.py:
 1092      flavor = None
 1093  
 1094:     @classmethod
 1095      def setup_class(cls):
 1096          cls.setup_import()
 ....
 1112          self._load_test1_data()
 1113  
 1114:     @classmethod
 1115      def setup_import(cls):
 1116          # Skip this test if SQLAlchemy not available
 ....
 1118              pytest.skip('SQLAlchemy not installed')
 1119  
 1120:     @classmethod
 1121      def setup_driver(cls):
 1122          raise NotImplementedError()
 1123  
 1124:     @classmethod
 1125      def connect(cls):
 1126          raise NotImplementedError()
 ....
 1629      flavor = 'sqlite'
 1630  
 1631:     @classmethod
 1632      def connect(cls):
 1633          return sqlalchemy.create_engine('sqlite:///:memory:')
 1634  
 1635:     @classmethod
 1636      def setup_driver(cls):
 1637          # sqlite3 is built-in
 ....
 1677      flavor = 'mysql'
 1678  
 1679:     @classmethod
 1680      def connect(cls):
 1681          url = 'mysql+{driver}://root@localhost/pandas_nosetest'
 1682          return sqlalchemy.create_engine(url.format(driver=cls.driver))
 1683  
 1684:     @classmethod
 1685      def setup_driver(cls):
 1686          try:
 ....
 1743      flavor = 'postgresql'
 1744  
 1745:     @classmethod
 1746      def connect(cls):
 1747          url = 'postgresql+{driver}://postgres@localhost/pandas_nosetest'
 1748          return sqlalchemy.create_engine(url.format(driver=cls.driver))
 1749  
 1750:     @classmethod
 1751      def setup_driver(cls):
 1752          try:
 ....
 1862      flavor = 'sqlite'
 1863  
 1864:     @classmethod
 1865      def connect(cls):
 1866          return sqlite3.connect(':memory:')
 ....
 2312  class TestXMySQL(MySQLMixIn):
 2313  
 2314:     @classmethod
 2315      def setup_class(cls):
 2316          _skip_if_no_pymysql()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/tests/test_compat.py:
   11  class TestBuiltinIterators(object):
   12  
   13:     @classmethod
   14      def check_result(cls, actual, expected, lengths):
   15          for (iter_res, list_res), exp, length in zip(actual, expected,

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/tests/test_config.py:
    9  class TestConfig(object):
   10  
   11:     @classmethod
   12      def setup_class(cls):
   13          from copy import deepcopy

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/tests/test_panel.py:
  186  class SafeForSparse(object):
  187  
  188:     @classmethod
  189      def assert_panel_equal(cls, x, y):
  190          assert_panel_equal(x, y)
  ...
  905                  SafeForSparse):
  906  
  907:     @classmethod
  908      def assert_panel_equal(cls, x, y):
  909          assert_panel_equal(x, y)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/tests/util/test_util.py:
  410  class TestLocaleUtils(object):
  411  
  412:     @classmethod
  413      def setup_class(cls):
  414          cls.locales = tm.get_locales()
  ...
  419          tm._skip_if_windows()
  420  
  421:     @classmethod
  422      def teardown_class(cls):
  423          del cls.locales

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/tseries/frequencies.py:
  107                             for k, v in compat.iteritems(_reso_freq_map)])
  108  
  109:     @classmethod
  110      def get_str(cls, reso):
  111          """
  ...
  119          return cls._reso_str_map.get(reso, 'day')
  120  
  121:     @classmethod
  122      def get_reso(cls, resostr):
  123          """
  ...
  134          return cls._str_reso_map.get(resostr, cls.RESO_DAY)
  135  
  136:     @classmethod
  137      def get_freq_group(cls, resostr):
  138          """
  ...
  146          return get_freq_group(cls.get_freq(resostr))
  147  
  148:     @classmethod
  149      def get_freq(cls, resostr):
  150          """
  ...
  158          return cls._reso_freq_map[resostr]
  159  
  160:     @classmethod
  161      def get_str_from_freq(cls, freq):
  162          """
  ...
  170          return cls._freq_reso_map.get(freq, 'day')
  171  
  172:     @classmethod
  173      def get_reso_from_freq(cls, freq):
  174          """
  ...
  185          return cls.get_reso(cls.get_str_from_freq(freq))
  186  
  187:     @classmethod
  188      def get_stride_from_decimal(cls, value, freq):
  189          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/tseries/offsets.py:
  514  class SingleConstructorOffset(DateOffset):
  515  
  516:     @classmethod
  517      def _from_name(cls, suffix=None):
  518          # default _from_name calls cls with no args
  ...
 1184          self.kwds['day_of_month'] = self.day_of_month
 1185  
 1186:     @classmethod
 1187      def _from_name(cls, suffix=None):
 1188          return cls(day_of_month=suffix)
 ....
 1634          return self._prefix + suffix
 1635  
 1636:     @classmethod
 1637      def _from_name(cls, suffix=None):
 1638          if not suffix:
 ....
 1752      _prefix = 'WOM'
 1753  
 1754:     @classmethod
 1755      def _from_name(cls, suffix=None):
 1756          if not suffix:
 ....
 1834      _prefix = 'LWOM'
 1835  
 1836:     @classmethod
 1837      def _from_name(cls, suffix=None):
 1838          if not suffix:
 ....
 1865          return (self.n == 1 and self.startingMonth is not None)
 1866  
 1867:     @classmethod
 1868      def _from_name(cls, suffix=None):
 1869          kwargs = {}
 ....
 2063          DateOffset.__init__(self, n=n, normalize=normalize, **kwds)
 2064  
 2065:     @classmethod
 2066      def _from_name(cls, suffix=None):
 2067          kwargs = {}
 ....
 2456                               _int_to_weekday[self.weekday])
 2457  
 2458:     @classmethod
 2459      def _parse_suffix(cls, varion_code, startingMonth_code, weekday_code):
 2460          if varion_code == "N":
 ....
 2475          }
 2476  
 2477:     @classmethod
 2478      def _from_name(cls, *args):
 2479          return cls(**cls._parse_suffix(*args))
 ....
 2632                            "%s-%d" % (suffix, self.qtr_with_extra_week))
 2633  
 2634:     @classmethod
 2635      def _from_name(cls, *args):
 2636          return cls(**dict(FY5253._parse_suffix(*args[:-1]),

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pandas/util/_decorators.py:
  141          self.params.update(*args, **kwargs)
  142  
  143:     @classmethod
  144      def from_params(cls, params):
  145          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/patsy/compat_ordereddict.py:
  229          return self.__class__(self)
  230  
  231:     @classmethod
  232      def fromkeys(cls, iterable, value=None):
  233          '''OD.fromkeys(S[, v]) -> New ordered dictionary with keys from S

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/patsy/constraint.py:
   70      __getstate__ = no_pickling
   71  
   72:     @classmethod
   73      def combine(cls, constraints):
   74          """Create a new LinearConstraint by ANDing together several existing

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/patsy/desc.py:
  150          return result
  151              
  152:     @classmethod
  153      def from_formula(cls, tree_or_string):
  154          """Construct a :class:`ModelDesc` from a formula string.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/patsy/design_info.py:
  660                                term_codings=new_term_codings)
  661  
  662:     @classmethod
  663      def from_array(cls, array_like, default_column_prefix="column"):
  664          """Find or construct a DesignInfo appropriate for a given array_like.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/patsy/eval.py:
  166                                              + self._namespaces))
  167  
  168:     @classmethod
  169      def capture(cls, eval_env=0, reference=0):
  170          """Capture an execution environment from the stack.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/patsy/origin.py:
   38          self.end = end
   39  
   40:     @classmethod
   41      def combine(cls, origin_objs):
   42          """Class method for combining a set of Origins into one large Origin

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/persistent/tests/test_picklecache.py:
 1039              _p_oid = KEY
 1040              invalidated = False
 1041:             @classmethod
 1042              def _p_invalidate(cls):
 1043                  cls.invalidated = True

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/persistent/tests/test_ring.py:
   23      __next_oid = 0
   24  
   25:     @classmethod
   26      def _next_oid(cls):
   27          cls.__next_oid += 1

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pip/__init__.py:
  248      _date_re = re.compile(r'-(20\d\d\d\d\d\d)$')
  249  
  250:     @classmethod
  251      def from_dist(cls, dist, dependency_links):
  252          location = os.path.normcase(os.path.abspath(dist.location))

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pip/_vendor/cachecontrol/controller.py:
   36          self.serializer = serializer or Serializer()
   37  
   38:     @classmethod
   39      def _urlnorm(cls, uri):
   40          """Normalize the URL to create a safe key for the cache"""
   ..
   56          return defrag_uri
   57  
   58:     @classmethod
   59      def cache_url(cls, uri):
   60          return cls._urlnorm(uri)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pip/_vendor/distlib/_backport/tarfile.py:
 1090          return buf + self._create_header(info, USTAR_FORMAT, "ascii", "replace")
 1091  
 1092:     @classmethod
 1093      def create_pax_global_header(cls, pax_headers):
 1094          """Return the object as a pax global header block sequence.
 ....
 1149          return payload
 1150  
 1151:     @classmethod
 1152      def _create_gnu_long_header(cls, name, type, encoding, errors):
 1153          """Return a GNUTYPE_LONGNAME or GNUTYPE_LONGLINK sequence
 ....
 1166                  cls._create_payload(name)
 1167  
 1168:     @classmethod
 1169      def _create_pax_generic_header(cls, pax_headers, type, encoding):
 1170          """Return a POSIX.1-2008 extended or global header sequence
 ....
 1217                  cls._create_payload(records)
 1218  
 1219:     @classmethod
 1220      def frombuf(cls, buf, encoding, errors):
 1221          """Construct a TarInfo object from a 512 byte bytes object.
 ....
 1280          return obj
 1281  
 1282:     @classmethod
 1283      def fromtarfile(cls, tarfile):
 1284          """Return the next TarInfo object from TarFile object
 ....
 1711      # by adding it to the mapping in OPEN_METH.
 1712  
 1713:     @classmethod
 1714      def open(cls, name=None, mode="r", fileobj=None, bufsize=RECORDSIZE, **kwargs):
 1715          """Open a tar archive for reading, writing or appending. Return
 ....
 1787          raise ValueError("undiscernible mode")
 1788  
 1789:     @classmethod
 1790      def taropen(cls, name, mode="r", fileobj=None, **kwargs):
 1791          """Open uncompressed tar archive name for reading or writing.
 ....
 1795          return cls(name, mode, fileobj, **kwargs)
 1796  
 1797:     @classmethod
 1798      def gzopen(cls, name, mode="r", fileobj=None, compresslevel=9, **kwargs):
 1799          """Open gzip compressed tar archive name for reading or writing.
 ....
 1826          return t
 1827  
 1828:     @classmethod
 1829      def bz2open(cls, name, mode="r", fileobj=None, compresslevel=9, **kwargs):
 1830          """Open bzip2 compressed tar archive name for reading or writing.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pip/_vendor/distlib/compat.py:
  561                  self, ', '.join(map(repr, self.maps)))
  562  
  563:         @classmethod
  564          def fromkeys(cls, iterable, *args):
  565              'Create a ChainMap with a single dict created from the iterable.'
  ...
  847              return self.__class__(self)
  848  
  849:         @classmethod
  850          def fromkeys(cls, iterable, value=None):
  851              '''OD.fromkeys(S[, v]) -> New ordered dictionary with keys from S

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pip/_vendor/distlib/database.py:
  173                  self._cache_egg.generated = True
  174  
  175:     @classmethod
  176      def distinfo_dirname(cls, name, version):
  177          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pip/_vendor/ipaddress.py:
  553                                             expected_len, self._version))
  554  
  555:     @classmethod
  556      def _ip_int_from_prefix(cls, prefixlen):
  557          """Turn the prefix length into a bitwise netmask
  ...
  566          return cls._ALL_ONES ^ (cls._ALL_ONES >> prefixlen)
  567  
  568:     @classmethod
  569      def _prefix_from_ip_int(cls, ip_int):
  570          """Return prefix length from the bitwise netmask.
  ...
  591          return prefixlen
  592  
  593:     @classmethod
  594      def _report_invalid_netmask(cls, netmask_str):
  595          msg = '%r is not a valid netmask' % netmask_str
  596          raise NetmaskValueError(msg)
  597  
  598:     @classmethod
  599      def _prefix_from_prefix_string(cls, prefixlen_str):
  600          """Return prefix length from a numeric string
  ...
  621          return prefixlen
  622  
  623:     @classmethod
  624      def _prefix_from_ip_string(cls, ip_str):
  625          """Turn a netmask/hostmask string into a prefix length
  ...
 1224          return _compat_str(self)
 1225  
 1226:     @classmethod
 1227      def _make_netmask(cls, arg):
 1228          """Make a (netmask, prefix_len) tuple from the given argument.
 ....
 1248          return cls._netmask_cache[arg]
 1249  
 1250:     @classmethod
 1251      def _ip_int_from_string(cls, ip_str):
 1252          """Turn the given IP string into an integer for comparison.
 ....
 1275              raise AddressValueError("%s in %r" % (exc, ip_str))
 1276  
 1277:     @classmethod
 1278      def _parse_octet(cls, octet_str):
 1279          """Convert a decimal octet into an integer.
 ....
 1312          return octet_int
 1313  
 1314:     @classmethod
 1315      def _string_from_ip_int(cls, ip_int):
 1316          """Turns a 32-bit integer into dotted decimal notation.
 ....
 1736      _netmask_cache = {}
 1737  
 1738:     @classmethod
 1739      def _make_netmask(cls, arg):
 1740          """Make a (netmask, prefix_len) tuple from the given argument.
 ....
 1754          return cls._netmask_cache[arg]
 1755  
 1756:     @classmethod
 1757      def _ip_int_from_string(cls, ip_str):
 1758          """Turn an IPv6 ip_str into an integer.
 ....
 1859              raise AddressValueError("%s in %r" % (exc, ip_str))
 1860  
 1861:     @classmethod
 1862      def _parse_hextet(cls, hextet_str):
 1863          """Convert an IPv6 hextet string into an integer.
 ....
 1885          return int(hextet_str, 16)
 1886  
 1887:     @classmethod
 1888      def _compress_hextets(cls, hextets):
 1889          """Compresses a list of hextets.
 ....
 1933          return hextets
 1934  
 1935:     @classmethod
 1936      def _string_from_ip_int(cls, ip_int=None):
 1937          """Turns a 128-bit integer into hexadecimal notation.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pip/_vendor/ordereddict.py:
  107          return self.__class__(self)
  108  
  109:     @classmethod
  110      def fromkeys(cls, iterable, value=None):
  111          d = cls()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pip/_vendor/pkg_resources/__init__.py:
  644              self.add_entry(entry)
  645  
  646:     @classmethod
  647      def _build_master(cls):
  648          """
  ...
  664          return ws
  665  
  666:     @classmethod
  667      def _build_from_requirements(cls, req_spec):
  668          """
  ...
 1578              return stream.read()
 1579  
 1580:     @classmethod
 1581      def _register(cls):
 1582          loader_cls = getattr(importlib_machinery, 'SourceFileLoader',
 ....
 1608      """
 1609  
 1610:     @classmethod
 1611      def build(cls, path):
 1612          """
 ....
 2318      )
 2319  
 2320:     @classmethod
 2321      def parse(cls, src, dist=None):
 2322          """Parse a single entry point from string `src`
 ....
 2338          return cls(res['name'], res['module'], attrs, extras, dist)
 2339  
 2340:     @classmethod
 2341      def _parse_extras(cls, extras_spec):
 2342          if not extras_spec:
 ....
 2347          return req.extras
 2348  
 2349:     @classmethod
 2350      def parse_group(cls, group, lines, dist=None):
 2351          """Parse an entry point group"""
 ....
 2360          return this
 2361  
 2362:     @classmethod
 2363      def parse_map(cls, data, dist=None):
 2364          """Parse a map of entry point groups"""
 ....
 2417          self._provider = metadata or empty_provider
 2418  
 2419:     @classmethod
 2420      def from_location(cls, location, basename, metadata=None, **kw):
 2421          project_name, version, py_version, platform = [None] * 4
 ....
 2609          return getattr(self._provider, attr)
 2610  
 2611:     @classmethod
 2612      def from_filename(cls, filename, metadata=None, **kw):
 2613          return cls.from_location(

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pip/_vendor/pyparsing.py:
  195          self.args = (pstr, loc, msg)
  196  
  197:     @classmethod
  198      def _from_exception(cls, pe):
  199          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pip/_vendor/requests/packages/urllib3/_collections.py:
  305          return list(self.iteritems())
  306  
  307:     @classmethod
  308      def from_httplib(cls, message):  # Python 2
  309          """Read headers from a Python 2 httplib message object."""

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pip/_vendor/requests/packages/urllib3/fields.py:
   69              self.headers = dict(headers)
   70  
   71:     @classmethod
   72      def from_tuples(cls, fieldname, value):
   73          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pip/_vendor/requests/packages/urllib3/packages/ordered_dict.py:
  222          return self.__class__(self)
  223  
  224:     @classmethod
  225      def fromkeys(cls, iterable, value=None):
  226          '''OD.fromkeys(S[, v]) -> New ordered dictionary with keys from S

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pip/_vendor/requests/packages/urllib3/response.py:
  360                      yield data
  361  
  362:     @classmethod
  363      def from_httplib(ResponseCls, r, **response_kw):
  364          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pip/_vendor/requests/packages/urllib3/util/retry.py:
  157          return type(self)(**params)
  158  
  159:     @classmethod
  160      def from_int(cls, retries, redirect=True, default=None):
  161          """ Backwards-compatibility for the old retries format."""

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pip/_vendor/requests/packages/urllib3/util/timeout.py:
  104              type(self).__name__, self._connect, self._read, self.total)
  105  
  106:     @classmethod
  107      def _validate_timeout(cls, value, name):
  108          """ Check that a timeout attribute is valid.
  ...
  138          return value
  139  
  140:     @classmethod
  141      def from_float(cls, timeout):
  142          """ Create a new Timeout from a legacy timeout value.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pip/index.py:
  737          return self.url
  738  
  739:     @classmethod
  740      def get_page(cls, link, skip_archives=True, session=None):
  741          if session is None:

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pip/req/req_install.py:
  135          self.isolated = isolated
  136  
  137:     @classmethod
  138      def from_editable(cls, editable_req, comes_from=None, default_vcs=None,
  139                        isolated=False, options=None, wheel_cache=None,
  ...
  161          return res
  162  
  163:     @classmethod
  164      def from_line(
  165              cls, name, comes_from=None, isolated=False, options=None,

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pip/utils/__init__.py:
  770  class StreamWrapper(StringIO):
  771  
  772:     @classmethod
  773      def from_stream(cls, orig_stream):
  774          cls.orig_stream = orig_stream

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pip/vcs/__init__.py:
  332                  raise  # re-raise exception if a different error occurred
  333  
  334:     @classmethod
  335      def controls_location(cls, location):
  336          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pip/vcs/git.py:
  282          )
  283  
  284:     @classmethod
  285      def controls_location(cls, location):
  286          if super(Git, cls).controls_location(location):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pkg_resources/__init__.py:
  648              self.add_entry(entry)
  649  
  650:     @classmethod
  651      def _build_master(cls):
  652          """
  ...
  668          return ws
  669  
  670:     @classmethod
  671      def _build_from_requirements(cls, req_spec):
  672          """
  ...
 1596              return stream.read()
 1597  
 1598:     @classmethod
 1599      def _register(cls):
 1600          loader_cls = getattr(importlib_machinery, 'SourceFileLoader',
 ....
 1626      """
 1627  
 1628:     @classmethod
 1629      def build(cls, path):
 1630          """
 ....
 2373      )
 2374  
 2375:     @classmethod
 2376      def parse(cls, src, dist=None):
 2377          """Parse a single entry point from string `src`
 ....
 2393          return cls(res['name'], res['module'], attrs, extras, dist)
 2394  
 2395:     @classmethod
 2396      def _parse_extras(cls, extras_spec):
 2397          if not extras_spec:
 ....
 2402          return req.extras
 2403  
 2404:     @classmethod
 2405      def parse_group(cls, group, lines, dist=None):
 2406          """Parse an entry point group"""
 ....
 2415          return this
 2416  
 2417:     @classmethod
 2418      def parse_map(cls, data, dist=None):
 2419          """Parse a map of entry point groups"""
 ....
 2472          self._provider = metadata or empty_provider
 2473  
 2474:     @classmethod
 2475      def from_location(cls, location, basename, metadata=None, **kw):
 2476          project_name, version, py_version, platform = [None] * 4
 ....
 2664          return getattr(self._provider, attr)
 2665  
 2666:     @classmethod
 2667      def from_filename(cls, filename, metadata=None, **kw):
 2668          return cls.from_location(

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pkg_resources/_vendor/pyparsing.py:
  195          self.args = (pstr, loc, msg)
  196  
  197:     @classmethod
  198      def _from_exception(cls, pe):
  199          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/pyparsing.py:
  195          self.args = (pstr, loc, msg)
  196  
  197:     @classmethod
  198      def _from_exception(cls, pe):
  199          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/scipy/_lib/_ccallback.py:
  106          raise ValueError()
  107  
  108:     @classmethod
  109      def from_cython(cls, module, name, user_data=None, signature=None):
  110          """
  ...
  131          return cls(function, user_data, signature)
  132  
  133:     @classmethod
  134      def _parse_callback(cls, obj, user_data=None, signature=None):
  135          _import_cffi()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/scipy/_lib/decorator.py:
  199          return func
  200  
  201:     @classmethod
  202      def create(cls, obj, body, evaldict, defaults=None,
  203                 doc=None, module=None, addsource=True, **attrs):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/scipy/interpolate/_bsplines.py:
  222          self.c = np.ascontiguousarray(self.c, dtype=dt)
  223  
  224:     @classmethod
  225      def construct_fast(cls, t, c, k, extrapolate=True, axis=0):
  226          """Construct a spline without making checks.
  ...
  241          return self.t, self.c, self.k
  242  
  243:     @classmethod
  244      def basis_element(cls, t, extrapolate=True):
  245          """Return a B-spline basis element ``B(x | t[0], ..., t[k+1])``.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/scipy/interpolate/_cubic.py:
  339      # These are inherited from PPoly, but they do not produce an Akima
  340      # interpolator. Hence stub them out.
  341:     @classmethod
  342      def from_spline(cls, tck, extrapolate=None):
  343          raise NotImplementedError("This method does not make sense for "
  344                                    "an Akima interpolator.")
  345  
  346:     @classmethod
  347      def from_bernstein_basis(cls, bp, extrapolate=None):
  348          raise NotImplementedError("This method does not make sense for "

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/scipy/interpolate/fitpack2.py:
  188          self._reset_class()
  189  
  190:     @classmethod
  191      def _from_tck(cls, tck, ext=0):
  192          """Construct a spline object from given tck"""
  ...
  938      """
  939  
  940:     @classmethod
  941      def _from_tck(cls, tck):
  942          """Construct a spline object from given tck and degree"""

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/scipy/interpolate/interpolate.py:
  700              return np.float_
  701  
  702:     @classmethod
  703      def construct_fast(cls, c, x, extrapolate=None, axis=0):
  704          """
  ...
 1210          return self.solve(0, discontinuity, extrapolate)
 1211  
 1212:     @classmethod
 1213      def from_spline(cls, tck, extrapolate=None):
 1214          """
 ....
 1238          return cls.construct_fast(cvals, t, extrapolate)
 1239  
 1240:     @classmethod
 1241      def from_bernstein_basis(cls, bp, extrapolate=None):
 1242          """
 ....
 1540      extend.__doc__ = _PPolyBase.extend.__doc__
 1541  
 1542:     @classmethod
 1543      def from_power_basis(cls, pp, extrapolate=None):
 1544          """
 ....
 1571          return cls.construct_fast(c, pp.x, extrapolate, pp.axis)
 1572  
 1573:     @classmethod
 1574      def from_derivatives(cls, xi, yi, orders=None, extrapolate=None):
 1575          """Construct a piecewise polynomial in the Bernstein basis,
 ....
 1897          self.c = np.ascontiguousarray(self.c, dtype=dtype)
 1898  
 1899:     @classmethod
 1900      def construct_fast(cls, c, x, extrapolate=None):
 1901          """
 ....
 2642          return out
 2643  
 2644:     @classmethod
 2645      def fromspline(cls, xk, cvals, order, fill=0.0):
 2646          # Note: this spline representation is incompatible with FITPACK

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/scipy/io/harwell_boeing/_fortran_format_parser.py:
   37  
   38  class IntFormat(object):
   39:     @classmethod
   40      def from_number(cls, n, min=None):
   41          """Given an integer, returns a "reasonable" IntFormat instance to represent
   ..
   97  
   98  class ExpFormat(object):
   99:     @classmethod
  100      def from_number(cls, n, min=None):
  101          """Given a float number, returns a "reasonable" ExpFormat instance to

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/scipy/io/harwell_boeing/hb.py:
   49  
   50  class HBInfo(object):
   51:     @classmethod
   52      def from_data(cls, m, title="Default title", key="0", mxtype=None, fmt=None):
   53          """Create a HBInfo instance from an existing sparse matrix.
   ..
  124              values_fmt.fortran_format)
  125  
  126:     @classmethod
  127      def from_file(cls, fid):
  128          """Create a HBInfo instance from a file object containg a matrix in the
  ...
  385      _f2q_storage = dict([(j, i) for i, j in _q2f_storage.items()])
  386  
  387:     @classmethod
  388      def from_fortran(cls, fmt):
  389          if not len(fmt) == 3:

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/scipy/io/mmio.py:
  147      FORMAT_VALUES = (FORMAT_COORDINATE, FORMAT_ARRAY)
  148  
  149:     @classmethod
  150      def _validate_format(self, format):
  151          if format not in self.FORMAT_VALUES:
  ...
  160      FIELD_VALUES = (FIELD_INTEGER, FIELD_REAL, FIELD_COMPLEX, FIELD_PATTERN)
  161  
  162:     @classmethod
  163      def _validate_field(self, field):
  164          if field not in self.FIELD_VALUES:
  ...
  174                         SYMMETRY_SKEW_SYMMETRIC, SYMMETRY_HERMITIAN)
  175  
  176:     @classmethod
  177      def _validate_symmetry(self, symmetry):
  178          if symmetry not in self.SYMMETRY_VALUES:
  ...
  196  
  197      # -------------------------------------------------------------------------
  198:     @classmethod
  199      def info(self, source):
  200          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/scipy/linalg/tests/test_decomp.py:
 2060  
 2061  class TestOrdQZ(TestCase):
 2062:     @classmethod
 2063      def setupClass(cls):
 2064          # http://www.nag.com/lapack-ex/node119.html

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/scipy/special/generate_ufuncs.py:
  815              return "%s%s" % (prefix, c_base_name,)
  816  
  817:     @classmethod
  818      def parse_all(cls, ufunc_str):
  819          ufuncs = []

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/scipy/stats/tests/test_binned_statistic.py:
   12  class TestBinnedStatistic(object):
   13  
   14:     @classmethod
   15      def setup_class(cls):
   16          np.random.seed(9865)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/setuptools/__init__.py:
   37      """
   38  
   39:     @classmethod
   40      def find(cls, where='.', exclude=(), include=('*',)):
   41          """Return a list all Python packages found within directory 'where'
   ..
   60              cls._build_filter(*include)))
   61  
   62:     @classmethod
   63      def _find_packages_iter(cls, where, exclude, include):
   64          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/setuptools/command/easy_install.py:
 1647  
 1648  class RewritePthDistributions(PthDistributions):
 1649:     @classmethod
 1650      def _wrap_lines(cls, lines):
 1651          yield cls.prelude
 ....
 1935      split_args = dict()
 1936  
 1937:     @classmethod
 1938      def best(cls):
 1939          """
 ....
 1942          return cls
 1943  
 1944:     @classmethod
 1945      def _sys_executable(cls):
 1946          _default = os.path.normpath(sys.executable)
 1947          return os.environ.get('__PYVENV_LAUNCHER__', _default)
 1948  
 1949:     @classmethod
 1950      def from_param(cls, param):
 1951          """
 ....
 1962          return cls.from_string(param)
 1963  
 1964:     @classmethod
 1965      def from_environment(cls):
 1966          return cls([cls._sys_executable()])
 1967  
 1968:     @classmethod
 1969      def from_string(cls, string):
 1970          """
 ....
 2039      command_spec_class = CommandSpec
 2040  
 2041:     @classmethod
 2042      def get_script_args(cls, dist, executable=None, wininst=False):
 2043          # for backward compatibility
 ....
 2047          return writer.get_args(dist, header)
 2048  
 2049:     @classmethod
 2050      def get_script_header(cls, script_text, executable=None, wininst=False):
 2051          # for backward compatibility
 ....
 2057          return cmd.as_header()
 2058  
 2059:     @classmethod
 2060      def get_args(cls, dist, header=None):
 2061          """
 ....
 2084              raise ValueError("Path separators not allowed in script names")
 2085  
 2086:     @classmethod
 2087      def get_writer(cls, force_windows):
 2088          # for backward compatibility
 ....
 2090          return WindowsScriptWriter.best() if force_windows else cls.best()
 2091  
 2092:     @classmethod
 2093      def best(cls):
 2094          """
 ....
 2100              return cls
 2101  
 2102:     @classmethod
 2103      def _get_script_args(cls, type_, name, header, script_text):
 2104          # Simply write the stub with no extension.
 2105          yield (name, header + script_text)
 2106  
 2107:     @classmethod
 2108      def get_header(cls, script_text="", executable=None):
 2109          """Create a #! line, getting options (if any) from script_text"""
 ....
 2116      command_spec_class = WindowsCommandSpec
 2117  
 2118:     @classmethod
 2119      def get_writer(cls):
 2120          # for backward compatibility
 ....
 2122          return cls.best()
 2123  
 2124:     @classmethod
 2125      def best(cls):
 2126          """
 ....
 2135          return writer_lookup[launcher]
 2136  
 2137:     @classmethod
 2138      def _get_script_args(cls, type_, name, header, script_text):
 2139          "For Windows, add a .py extension"
 ....
 2151          yield name + ext, header + script_text, 't', blockers
 2152  
 2153:     @classmethod
 2154      def _adjust_header(cls, type_, orig_header):
 2155          """
 ....
 2179  
 2180  class WindowsExecutableLauncherWriter(WindowsScriptWriter):
 2181:     @classmethod
 2182      def _get_script_args(cls, type_, name, header, script_text):
 2183          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/setuptools/command/upload_docs.py:
  123                  yield b'\n'  # write an extra newline (lurve Macs)
  124  
  125:     @classmethod
  126      def _build_multipart(cls, data):
  127          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/setuptools/config.py:
  189          self.set_options.append(option_name)
  190  
  191:     @classmethod
  192      def _parse_list(cls, value, separator=','):
  193          """Represents value as a list.
  ...
  209          return [chunk.strip() for chunk in value if chunk.strip()]
  210  
  211:     @classmethod
  212      def _parse_dict(cls, value):
  213          """Represents value as a dict.
  ...
  227          return result
  228  
  229:     @classmethod
  230      def _parse_bool(cls, value):
  231          """Represents value as boolean.
  ...
  237          return value in ('1', 'true', 'yes')
  238  
  239:     @classmethod
  240      def _parse_file(cls, value):
  241          """Represents value as a string, allowing including text
  ...
  280              return f.read()
  281  
  282:     @classmethod
  283      def _parse_attr(cls, value):
  284          """Represents value as a module attribute.
  ...
  311          return value
  312  
  313:     @classmethod
  314      def _get_parser_compound(cls, *parse_methods):
  315          """Returns parser function to represents value as a list.
  ...
  330          return parse
  331  
  332:     @classmethod
  333      def _parse_section_to_dict(cls, section_options, values_parser=None):
  334          """Parses section options into a dictionary.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/setuptools/package_index.py:
  265          self.expected = expected
  266  
  267:     @classmethod
  268      def from_url(cls, url):
  269          "Construct a (possibly null) ContentChecker from a URL"

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/base.py:
  183      """
  184  
  185:     @classmethod
  186      def _get_param_names(cls):
  187          """Get parameter names for the estimator"""

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/sklearn/externals/funcsigs.py:
  507          self._return_annotation = return_annotation
  508  
  509:     @classmethod
  510      def from_function(cls, func):
  511          '''Constructs Signature for the given python function'''

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/base/data.py:
  176  
  177  
  178:     @classmethod
  179      def _drop_nans(cls, x, nan_mask):
  180          return x[nan_mask]
  181  
  182:     @classmethod
  183      def _drop_nans_2d(cls, x, nan_mask):
  184          return x[nan_mask][:, nan_mask]
  185  
  186:     @classmethod
  187      def handle_missing(cls, endog, exog, missing, **kwargs):
  188          """
  ...
  473          return super(PandasData, self)._convert_endog_exog(endog, exog)
  474  
  475:     @classmethod
  476      def _drop_nans(cls, x, nan_mask):
  477          if hasattr(x, 'ix'):
  ...
  480              return super(PandasData, cls)._drop_nans(x, nan_mask)
  481  
  482:     @classmethod
  483      def _drop_nans_2d(cls, x, nan_mask):
  484          if hasattr(x, 'ix'):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/base/model.py:
   98          return data
   99  
  100:     @classmethod
  101      def from_formula(cls, formula, data, subset=None, drop_cols=None, *args, **kwargs):
  102          """
  ...
 1719          save_pickle(self, fname)
 1720  
 1721:     @classmethod
 1722      def load(cls, fname):
 1723          '''

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/base/tests/test_data.py:
    8  
    9  #class TestDates(object):
   10: #    @classmethod
   11  #    def setupClass(cls):
   12  #        nrows = 10
   ..
   18  
   19  class TestArrays(object):
   20:     @classmethod
   21      def setupClass(cls):
   22          cls.endog = np.random.random(10)
   ..
   63  
   64  class TestArrays2dEndog(TestArrays):
   65:     @classmethod
   66      def setupClass(cls):
   67          super(TestArrays2dEndog, cls).setupClass()
   ..
   77  
   78  class TestArrays1dExog(TestArrays):
   79:     @classmethod
   80      def setupClass(cls):
   81          super(TestArrays1dExog, cls).setupClass()
   ..
   93  
   94  class TestDataFrames(TestArrays):
   95:     @classmethod
   96      def setupClass(cls):
   97          cls.endog = pandas.DataFrame(np.random.random(10), columns=['y_1'])
   ..
  139  
  140  class TestLists(TestArrays):
  141:     @classmethod
  142      def setupClass(cls):
  143          super(TestLists, cls).setupClass()
  ...
  148  
  149  class TestRecarrays(TestArrays):
  150:     @classmethod
  151      def setupClass(cls):
  152          super(TestRecarrays, cls).setupClass()
  ...
  167  
  168  class TestStructarrays(TestArrays):
  169:     @classmethod
  170      def setupClass(cls):
  171          super(TestStructarrays, cls).setupClass()
  ...
  186  
  187  class TestListDataFrame(TestDataFrames):
  188:     @classmethod
  189      def setupClass(cls):
  190          cls.endog = np.random.random(10).tolist()
  ...
  221  
  222  class TestDataFrameList(TestDataFrames):
  223:     @classmethod
  224      def setupClass(cls):
  225          cls.endog = pandas.DataFrame(np.random.random(10), columns=['y_1'])
  ...
  256  
  257  class TestArrayDataFrame(TestDataFrames):
  258:     @classmethod
  259      def setupClass(cls):
  260          cls.endog = np.random.random(10)
  ...
  291  
  292  class TestDataFrameArray(TestDataFrames):
  293:     @classmethod
  294      def setupClass(cls):
  295          cls.endog = pandas.DataFrame(np.random.random(10), columns=['y_1'])
  ...
  326  
  327  class TestSeriesDataFrame(TestDataFrames):
  328:     @classmethod
  329      def setupClass(cls):
  330          cls.endog = pandas.Series(np.random.random(10), name='y_1')
  ...
  357  
  358  class TestSeriesSeries(TestDataFrames):
  359:     @classmethod
  360      def setupClass(cls):
  361          cls.endog = pandas.Series(np.random.random(10), name='y_1')
  ...
  410  
  411  class TestMultipleEqsArrays(TestArrays):
  412:     @classmethod
  413      def setupClass(cls):
  414          cls.endog = np.random.random((10,4))
  ...
  445  
  446  class TestMultipleEqsDataFrames(TestDataFrames):
  447:     @classmethod
  448      def setupClass(cls):
  449          cls.endog = endog = pandas.DataFrame(np.random.random((10,4)),
  ...
  496  
  497  class TestMissingArray(object):
  498:     @classmethod
  499      def setupClass(cls):
  500          X = np.random.random((25,4))
  ...
  562  
  563  class TestMissingPandas(object):
  564:     @classmethod
  565      def setupClass(cls):
  566          X = np.random.random((25,4))
  ...
  624  
  625  class TestConstant(object):
  626:     @classmethod
  627      def setupClass(cls):
  628          from statsmodels.datasets.longley import load_pandas
  ...
  737  
  738  
  739:     @classmethod
  740      def setup_class(cls):
  741          # create data

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/base/tests/test_generic_methods.py:
   34          self.predict_kwds = {}
   35  
   36:     @classmethod
   37      def setup_class(self):
   38  
   ..
  354  class CheckAnovaMixin(object):
  355  
  356:     @classmethod
  357      def setup_class(cls):
  358          import statsmodels.stats.tests.test_anova as ttmod
  ...
  420  class TestWaldAnovaOLS(CheckAnovaMixin):
  421  
  422:     @classmethod
  423      def initialize(cls):
  424          from statsmodels.formula.api import ols, glm, poisson
  ...
  446  class TestWaldAnovaOLSF(CheckAnovaMixin):
  447  
  448:     @classmethod
  449      def initialize(cls):
  450          from statsmodels.formula.api import ols, glm, poisson
  ...
  474  class TestWaldAnovaGLM(CheckAnovaMixin):
  475  
  476:     @classmethod
  477      def initialize(cls):
  478          from statsmodels.formula.api import ols, glm, poisson
  ...
  485  class TestWaldAnovaPoisson(CheckAnovaMixin):
  486  
  487:     @classmethod
  488      def initialize(cls):
  489          from statsmodels.discrete.discrete_model import Poisson
  ...
  495  class TestWaldAnovaNegBin(CheckAnovaMixin):
  496  
  497:     @classmethod
  498      def initialize(cls):
  499          from statsmodels.discrete.discrete_model import NegativeBinomial
  ...
  507  class TestWaldAnovaNegBin1(CheckAnovaMixin):
  508  
  509:     @classmethod
  510      def initialize(cls):
  511          from statsmodels.discrete.discrete_model import NegativeBinomial
  ...
  519  class T_estWaldAnovaOLSNoFormula(object):
  520  
  521:     @classmethod
  522      def initialize(cls):
  523          from statsmodels.formula.api import ols, glm, poisson

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/base/tests/test_shrink_pickle.py:
   33          self.predict_kwds = {}
   34  
   35:     @classmethod
   36      def setup_class(self):
   37  
   ..
  215  
  216  class TestPickleFormula(RemoveDataPickle):
  217:     @classmethod
  218      def setup_class(cls):
  219          nobs = 10000
  ...
  236  
  237  class TestPickleFormula2(RemoveDataPickle):
  238:     @classmethod
  239      def setup_class(cls):
  240          nobs = 500

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/base/wrapper.py:
   72          save_pickle(self, fname)
   73  
   74:     @classmethod
   75      def load(cls, fname):
   76          from statsmodels.iolib.smpickle import load_pickle

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/compat/counter.py:
   68      # Override dict methods where the meaning changes for Counter objects.
   69  
   70:     @classmethod
   71      def fromkeys(cls, iterable, v=None):
   72          raise NotImplementedError(

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/compat/ordereddict.py:
  225          return self.__class__(self)
  226  
  227:     @classmethod
  228      def fromkeys(cls, iterable, value=None):
  229          '''OD.fromkeys(S[, v]) -> New ordered dictionary with keys from S

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/datasets/tests/test_data.py:
   17  class TestDatasets(object):
   18  
   19:     @classmethod
   20      def setup_class(cls):
   21          exclude = ['check_internet', 'clear_data_home', 'get_data_home',

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/discrete/tests/test_constrained.py:
  124  class TestPoissonConstrained1a(CheckPoissonConstrainedMixin):
  125  
  126:     @classmethod
  127      def setup_class(cls):
  128  
  ...
  165  class TestPoissonConstrained1b(CheckPoissonConstrainedMixin):
  166  
  167:     @classmethod
  168      def setup_class(cls):
  169  
  ...
  192  class TestPoissonConstrained1c(CheckPoissonConstrainedMixin):
  193  
  194:     @classmethod
  195      def setup_class(cls):
  196  
  ...
  218  class TestPoissonNoConstrained(CheckPoissonConstrainedMixin):
  219  
  220:     @classmethod
  221      def setup_class(cls):
  222  
  ...
  237  class TestPoissonConstrained2a(CheckPoissonConstrainedMixin):
  238  
  239:     @classmethod
  240      def setup_class(cls):
  241  
  ...
  269  class TestPoissonConstrained2b(CheckPoissonConstrainedMixin):
  270  
  271:     @classmethod
  272      def setup_class(cls):
  273  
  ...
  297  class TestPoissonConstrained2c(CheckPoissonConstrainedMixin):
  298  
  299:     @classmethod
  300      def setup_class(cls):
  301  
  ...
  325  class TestGLMPoissonConstrained1a(CheckPoissonConstrainedMixin):
  326  
  327:     @classmethod
  328      def setup_class(cls):
  329          from statsmodels.base._constraints import fit_constrained
  ...
  347  class TestGLMPoissonConstrained1b(CheckPoissonConstrainedMixin):
  348  
  349:     @classmethod
  350      def setup_class(cls):
  351          from statsmodels.genmod.generalized_linear_model import GLM
  ...
  423  class TestGLMLogitConstrained1(CheckGLMConstrainedMixin):
  424  
  425:     @classmethod
  426      def setup_class(cls):
  427          cls.idx = slice(None)
  ...
  444  class TestGLMLogitConstrained2(CheckGLMConstrainedMixin):
  445  
  446:     @classmethod
  447      def setup_class(cls):
  448          cls.idx = slice(None)  # params sequence same as Stata

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/discrete/tests/test_discrete.py:
  315  class TestProbitNewton(CheckBinaryResults):
  316  
  317:     @classmethod
  318      def setupClass(cls):
  319          data = sm.datasets.spector.load()
  ...
  330  class TestProbitBFGS(CheckBinaryResults):
  331  
  332:     @classmethod
  333      def setupClass(cls):
  334          data = sm.datasets.spector.load()
  ...
  342  
  343  class TestProbitNM(CheckBinaryResults):
  344:     @classmethod
  345      def setupClass(cls):
  346          data = sm.datasets.spector.load()
  ...
  353  
  354  class TestProbitPowell(CheckBinaryResults):
  355:     @classmethod
  356      def setupClass(cls):
  357          data = sm.datasets.spector.load()
  ...
  364  
  365  class TestProbitCG(CheckBinaryResults):
  366:     @classmethod
  367      def setupClass(cls):
  368          data = sm.datasets.spector.load()
  ...
  391  
  392  class TestProbitNCG(CheckBinaryResults):
  393:     @classmethod
  394      def setupClass(cls):
  395          data = sm.datasets.spector.load()
  ...
  404  
  405  class TestProbitBasinhopping(CheckBinaryResults):
  406:     @classmethod
  407      def setupClass(cls):
  408          if not has_basinhopping:
  ...
  447  
  448  class TestProbitL1(CheckLikelihoodModelL1):
  449:     @classmethod
  450      def setupClass(cls):
  451          data = sm.datasets.spector.load()
  ...
  465  
  466  class TestMNLogitL1(CheckLikelihoodModelL1):
  467:     @classmethod
  468      def setupClass(cls):
  469          anes_data = sm.datasets.anes96.load()
  ...
  482  
  483  class TestLogitL1(CheckLikelihoodModelL1):
  484:     @classmethod
  485      def setupClass(cls):
  486          data = sm.datasets.spector.load()
  ...
  500  
  501  class TestCVXOPT(object):
  502:     @classmethod
  503      def setupClass(self):
  504          self.data = sm.datasets.spector.load()
  ...
  521  
  522  class TestSweepAlphaL1(object):
  523:     @classmethod
  524      def setupClass(cls):
  525          data = sm.datasets.spector.load()
  ...
  598  
  599  class TestPoissonL1Compatability(CheckL1Compatability):
  600:     @classmethod
  601      def setupClass(cls):
  602          cls.kvars = 10 # Number of variables
  ...
  618  
  619  class TestNegativeBinomialL1Compatability(CheckL1Compatability):
  620:     @classmethod
  621      def setupClass(cls):
  622          cls.kvars = 10 # Number of variables
  ...
  643  
  644  class TestNegativeBinomialGeoL1Compatability(CheckL1Compatability):
  645:     @classmethod
  646      def setupClass(cls):
  647          cls.kvars = 10 # Number of variables
  ...
  668  
  669  class TestLogitL1Compatability(CheckL1Compatability):
  670:     @classmethod
  671      def setupClass(cls):
  672          cls.kvars = 4 # Number of variables
  ...
  685  
  686  class TestMNLogitL1Compatability(CheckL1Compatability):
  687:     @classmethod
  688      def setupClass(cls):
  689          cls.kvars = 4 # Number of variables
  ...
  715  
  716  class TestProbitL1Compatability(CheckL1Compatability):
  717:     @classmethod
  718      def setupClass(cls):
  719          cls.kvars = 4 # Number of variables
  ...
  764      Compares l1 model with alpha = 0 to the unregularized model.
  765      """
  766:     @classmethod
  767      def setupClass(cls):
  768          data = sm.datasets.spector.load()
  ...
  778      Compares l1 model with alpha = 0 to the unregularized model.
  779      """
  780:     @classmethod
  781      def setupClass(cls):
  782          data = sm.datasets.spector.load()
  ...
  789  
  790  class TestL1AlphaZeroMNLogit(CompareL1):
  791:     @classmethod
  792      def setupClass(cls):
  793          data = sm.datasets.anes96.load()
  ...
  802  
  803  class TestLogitNewton(CheckBinaryResults, CheckMargEff):
  804:     @classmethod
  805      def setupClass(cls):
  806          data = sm.datasets.spector.load()
  ...
  845  
  846  class TestLogitBFGS(CheckBinaryResults, CheckMargEff):
  847:     @classmethod
  848      def setupClass(cls):
  849          data = sm.datasets.spector.load()
  ...
  855  
  856  class TestPoissonNewton(CheckModelResults):
  857:     @classmethod
  858      def setupClass(cls):
  859          data = sm.datasets.randhie.load()
  ...
  891  
  892  class TestNegativeBinomialNB2Newton(CheckModelResults):
  893:     @classmethod
  894      def setupClass(cls):
  895          data = sm.datasets.randhie.load()
  ...
  943  
  944  class TestNegativeBinomialNB1Newton(CheckModelResults):
  945:     @classmethod
  946      def setupClass(cls):
  947          data = sm.datasets.randhie.load()
  ...
  983  
  984  class TestNegativeBinomialNB2BFGS(CheckModelResults):
  985:     @classmethod
  986      def setupClass(cls):
  987          data = sm.datasets.randhie.load()
  ...
 1038  
 1039  class TestNegativeBinomialNB1BFGS(CheckModelResults):
 1040:     @classmethod
 1041      def setupClass(cls):
 1042          data = sm.datasets.randhie.load()
 ....
 1084      """
 1085  
 1086:     @classmethod
 1087      def setupClass(cls):
 1088          data = sm.datasets.randhie.load()
 ....
 1248  
 1249  class TestMNLogitNewtonBaseZero(CheckMNLogitBaseZero):
 1250:     @classmethod
 1251      def setupClass(cls):
 1252  
 ....
 1261  
 1262  class TestMNLogitLBFGSBaseZero(CheckMNLogitBaseZero):
 1263:     @classmethod
 1264      def setupClass(cls):
 1265          data = sm.datasets.anes96.load()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/discrete/tests/test_sandwich_cov.py:
   65          assert_allclose(self.bse_rob / self.corr_fact, res2_bse, 6e-5)
   66  
   67:     @classmethod
   68      def get_robust_clu(cls):
   69          res1 = cls.res1
   ..
   96  class TestPoissonClu(CheckCountRobustMixin):
   97  
   98:     @classmethod
   99      def setup_class(cls):
  100          cls.res2 = results_st.results_poisson_clu
  ...
  106  class TestPoissonCluGeneric(CheckCountRobustMixin):
  107  
  108:     @classmethod
  109      def setup_class(cls):
  110          cls.res2 = results_st.results_poisson_clu
  ...
  143  class TestPoissonHC1Generic(CheckCountRobustMixin):
  144  
  145:     @classmethod
  146      def setup_class(cls):
  147          cls.res2 = results_st.results_poisson_hc1
  ...
  162  class TestPoissonCluFit(CheckCountRobustMixin):
  163  
  164:     @classmethod
  165      def setup_class(cls):
  166  
  ...
  207  class TestPoissonHC1Fit(CheckCountRobustMixin):
  208  
  209:     @classmethod
  210      def setup_class(cls):
  211          cls.res2 = results_st.results_poisson_hc1
  ...
  222  class TestPoissonHC1FitExposure(CheckCountRobustMixin):
  223  
  224:     @classmethod
  225      def setup_class(cls):
  226          cls.res2 = results_st.results_poisson_exposure_hc1
  ...
  238  class TestPoissonCluExposure(CheckCountRobustMixin):
  239  
  240:     @classmethod
  241      def setup_class(cls):
  242          cls.res2 = results_st.results_poisson_exposure_clu #nonrobust
  ...
  248  class TestPoissonCluExposureGeneric(CheckCountRobustMixin):
  249  
  250:     @classmethod
  251      def setup_class(cls):
  252          cls.res2 = results_st.results_poisson_exposure_clu #nonrobust
  ...
  275  class TestGLMPoissonClu(CheckCountRobustMixin):
  276  
  277:     @classmethod
  278      def setup_class(cls):
  279          cls.res2 = results_st.results_poisson_clu
  ...
  286  class TestGLMPoissonCluGeneric(CheckCountRobustMixin):
  287  
  288:     @classmethod
  289      def setup_class(cls):
  290          cls.res2 = results_st.results_poisson_clu
  ...
  310  class TestGLMPoissonHC1Generic(CheckCountRobustMixin):
  311  
  312:     @classmethod
  313      def setup_class(cls):
  314          cls.res2 = results_st.results_poisson_hc1
  ...
  328  class TestGLMPoissonCluFit(CheckCountRobustMixin):
  329  
  330:     @classmethod
  331      def setup_class(cls):
  332          cls.res2 = results_st.results_poisson_clu
  ...
  356  class TestGLMPoissonHC1Fit(CheckCountRobustMixin):
  357  
  358:     @classmethod
  359      def setup_class(cls):
  360          cls.res2 = results_st.results_poisson_hc1
  ...
  371  class TestNegbinClu(CheckCountRobustMixin):
  372  
  373:     @classmethod
  374      def setup_class(cls):
  375          cls.res2 = results_st.results_negbin_clu
  ...
  381  class TestNegbinCluExposure(CheckCountRobustMixin):
  382  
  383:     @classmethod
  384      def setup_class(cls):
  385          cls.res2 = results_st.results_negbin_exposure_clu #nonrobust
  ...
  405  class TestNegbinCluGeneric(CheckCountRobustMixin):
  406  
  407:     @classmethod
  408      def setup_class(cls):
  409          cls.res2 = results_st.results_negbin_clu
  ...
  429  class TestNegbinCluFit(CheckCountRobustMixin):
  430  
  431:     @classmethod
  432      def setup_class(cls):
  433          cls.res2 = results_st.results_negbin_clu
  ...
  451  class TestNegbinCluExposureFit(CheckCountRobustMixin):
  452  
  453:     @classmethod
  454      def setup_class(cls):
  455          cls.res2 = results_st.results_negbin_exposure_clu #nonrobust
  ...
  492  class TestGLMLogit(CheckDiscreteGLM):
  493  
  494:     @classmethod
  495      def setup_class(cls):
  496          endog_bin = (endog > endog.mean()).astype(int)
  ...
  507      # invalid link. What's Probit as GLM?
  508  
  509:     @classmethod
  510      def setup_class(cls):
  511          endog_bin = (endog > endog.mean()).astype(int)
  ...
  521  class TestGLMGaussNonRobust(CheckDiscreteGLM):
  522  
  523:     @classmethod
  524      def setup_class(cls):
  525          cls.cov_type = 'nonrobust'
  ...
  534  class TestGLMGaussClu(CheckDiscreteGLM):
  535  
  536:     @classmethod
  537      def setup_class(cls):
  538          cls.cov_type = 'cluster'
  ...
  547  class TestGLMGaussHC(CheckDiscreteGLM):
  548  
  549:     @classmethod
  550      def setup_class(cls):
  551          cls.cov_type = 'HC0'
  ...
  560  class TestGLMGaussHAC(CheckDiscreteGLM):
  561  
  562:     @classmethod
  563      def setup_class(cls):
  564  
  ...
  575  class TestGLMGaussHACUniform(CheckDiscreteGLM):
  576  
  577:     @classmethod
  578      def setup_class(cls):
  579  
  ...
  618  class TestGLMGaussHACPanel(CheckDiscreteGLM):
  619  
  620:     @classmethod
  621      def setup_class(cls):
  622          cls.cov_type = 'hac-panel'
  ...
  642  class TestGLMGaussHACPanelGroups(CheckDiscreteGLM):
  643  
  644:     @classmethod
  645      def setup_class(cls):
  646          cls.cov_type = 'hac-panel'
  ...
  661  class TestGLMGaussHACGroupsum(CheckDiscreteGLM):
  662  
  663:     @classmethod
  664      def setup_class(cls):
  665          cls.cov_type = 'hac-groupsum'

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/duration/hazard_regression.py:
  343          self.ties = ties
  344  
  345:     @classmethod
  346      def from_formula(cls, formula, data, status=None, entry=None,
  347                       strata=None, offset=None, subset=None,

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/formula/tests/test_formula.py:
   16  class CheckFormulaOLS(object):
   17  
   18:     @classmethod
   19      def setupClass(cls):
   20          cls.data = load()
   ..
   46  
   47  class TestFormulaPandas(CheckFormulaOLS):
   48:     @classmethod
   49      def setupClass(cls):
   50          data = load_pandas().data
   ..
   54  
   55  class TestFormulaDict(CheckFormulaOLS):
   56:     @classmethod
   57      def setupClass(cls):
   58          data = dict((k, v.tolist()) for k, v in iteritems(load_pandas().data))
   ..
   62  
   63  class TestFormulaRecArray(CheckFormulaOLS):
   64:     @classmethod
   65      def setupClass(cls):
   66          data = load().data

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/genmod/generalized_estimating_equations.py:
  605      # Override to allow groups and time to be passed as variable
  606      # names.
  607:     @classmethod
  608      def from_formula(cls, formula, groups, data, subset=None,
  609                       time=None, offset=None, exposure=None,

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/genmod/tests/test_gee.py:
 1458  class TestGEEPoissonCovType(CheckConsistency):
 1459  
 1460:     @classmethod
 1461      def setup_class(cls):
 1462  
 ....
 1490  class TestGEEPoissonFormulaCovType(CheckConsistency):
 1491  
 1492:     @classmethod
 1493      def setup_class(cls):
 1494  
 ....
 1513  class TestGEEOrdinalCovType(CheckConsistency):
 1514  
 1515:     @classmethod
 1516      def setup_class(cls):
 1517  
 ....
 1547  class TestGEEMultinomialCovType(CheckConsistency):
 1548  
 1549:     @classmethod
 1550      def setup_class(cls):
 1551  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/genmod/tests/test_glm.py:
  637  
  638  class TestGlmPoissonOffset(CheckModelResultsMixin):
  639:     @classmethod
  640      def setupClass(cls):
  641          from .results.results_glm import Cpunish_offset
  ...
 1471  
 1472  class TestTweediePower15(CheckTweedie):
 1473:     @classmethod
 1474      def setupClass(self):
 1475          from .results.results_glm import CpunishTweediePower15
 ....
 1486  
 1487  class TestTweediePower2(CheckTweedie):
 1488:     @classmethod
 1489      def setupClass(self):
 1490          from .results.results_glm import CpunishTweediePower2
 ....
 1501  
 1502  class TestTweedieLog1(CheckTweedie):
 1503:     @classmethod
 1504      def setupClass(self):
 1505          from .results.results_glm import CpunishTweedieLog1
 ....
 1516  
 1517  class TestTweedieLog15Fair(CheckTweedie):
 1518:     @classmethod
 1519      def setupClass(self):
 1520          from .results.results_glm import FairTweedieLog15
 ....
 1547  
 1548  class TestTweedieSpecialLog0(CheckTweedieSpecial):
 1549:     @classmethod
 1550      def setupClass(self):
 1551          from statsmodels.datasets.cpunish import load_pandas
 ....
 1564  
 1565  class TestTweedieSpecialLog1(CheckTweedieSpecial):
 1566:     @classmethod
 1567      def setupClass(self):
 1568          from statsmodels.datasets.cpunish import load_pandas
 ....
 1581  
 1582  class TestTweedieSpecialLog2(CheckTweedieSpecial):
 1583:     @classmethod
 1584      def setupClass(self):
 1585          from statsmodels.datasets.cpunish import load_pandas
 ....
 1598  
 1599  class TestTweedieSpecialLog3(CheckTweedieSpecial):
 1600:     @classmethod
 1601      def setupClass(self):
 1602          from statsmodels.datasets.cpunish import load_pandas

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/genmod/tests/test_glm_weights.py:
   55  
   56  class TestGlmPoissonPlain(CheckWeight):
   57:     @classmethod
   58      def setupClass(cls):
   59          self = cls # alias
   ..
   67  
   68  class TestGlmPoissonFwNr(CheckWeight):
   69:     @classmethod
   70      def setupClass(cls):
   71          self = cls # alias
   ..
   82  
   83  class TestGlmPoissonAwNr(CheckWeight):
   84:     @classmethod
   85      def setupClass(cls):
   86          self = cls # alias
   ..
  101  # prob_weights fail with HC, not properly implemented yet
  102  class T_estGlmPoissonPwNr(CheckWeight):
  103:     @classmethod
  104      def setupClass(cls):
  105          self = cls # alias
  ...
  120  
  121  class TestGlmPoissonFwHC(CheckWeight):
  122:     @classmethod
  123      def setupClass(cls):
  124          self = cls # alias
  ...
  140  # var_weights (aweights fail with HC, not properly implemented yet
  141  class T_estGlmPoissonAwHC(CheckWeight):
  142:     @classmethod
  143      def setupClass(cls):
  144          self = cls # alias
  ...
  160  
  161  class TestGlmPoissonFwClu(CheckWeight):
  162:     @classmethod
  163      def setupClass(cls):
  164          self = cls # alias

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/graphics/tests/test_factorplots.py:
   16  class TestInteractionPlot(object):
   17  
   18:     @classmethod
   19      def setupClass(cls):
   20          if not have_matplotlib:

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/graphics/tests/test_regressionplots.py:
  166  class TestABLine(object):
  167  
  168:     @classmethod
  169      def setupClass(cls):
  170          np.random.seed(12345)
  ...
  209  
  210  class TestABLinePandas(TestABLine):
  211:     @classmethod
  212      def setupClass(cls):
  213          np.random.seed(12345)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/miscmodels/tests/test_generic_mle.py:
   96  class TestMyPareto1(CheckGenericMixin):
   97  
   98:     @classmethod
   99      def setup_class(self):
  100          params = [2, 0, 2]
  ...
  128  
  129  
  130:     @classmethod
  131      def setup_class(self):
  132          params = [2, 0, 2]

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/miscmodels/tests/test_tarma.py:
   45      #regression test for TArma
   46  
   47:     @classmethod
   48      def setup_class(cls):
   49  
   ..
   84      #regression test for TArma
   85  
   86:     @classmethod
   87      def setup_class(cls):
   88  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/miscmodels/tests/test_tmodel.py:
  137  class TestTModel(CheckTLinearModelMixin):
  138  
  139:     @classmethod
  140      def setup_class(cls):
  141          endog = mm.m_marietta
  ...
  154  class TestTModelFixed(object):
  155  
  156:     @classmethod
  157      def setup_class(cls):
  158          endog = mm.m_marietta

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/multivariate/tests/test_pca.py:
   27  
   28  class TestPCA(TestCase):
   29:     @classmethod
   30      def setUpClass(cls):
   31          rs = np.random.RandomState()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/nonparametric/tests/test_kde.py:
   34  class TestKDEExceptions(object):
   35  
   36:     @classmethod
   37      def setupClass(cls):
   38          cls.kde = KDE(Xi)
   ..
   83  
   84  class TestKDEGauss(CheckKDE):
   85:     @classmethod
   86      def setupClass(cls):
   87          res1 = KDE(Xi)
   ..
  124  
  125  class TestKDEEpanechnikov(CheckKDE):
  126:     @classmethod
  127      def setupClass(cls):
  128          res1 = KDE(Xi)
  ...
  132  
  133  class TestKDETriangular(CheckKDE):
  134:     @classmethod
  135      def setupClass(cls):
  136          res1 = KDE(Xi)
  ...
  140  
  141  class TestKDEBiweight(CheckKDE):
  142:     @classmethod
  143      def setupClass(cls):
  144          res1 = KDE(Xi)
  ...
  149  #NOTE: This is a knownfailure due to a definitional difference of Cosine kernel
  150  #class TestKDECosine(CheckKDE):
  151: #    @classmethod
  152  #    def setupClass(cls):
  153  #        res1 = KDE(Xi)
  ...
  159  class TestKdeWeights(CheckKDE):
  160  
  161:     @classmethod
  162      def setupClass(cls):
  163          res1 = KDE(Xi)
  ...
  181  
  182  class TestKDEGaussFFT(CheckKDE):
  183:     @classmethod
  184      def setupClass(cls):
  185          cls.decimal_density = 2 # low accuracy because binning is different
  ...
  192  class CheckKDEWeights(object):
  193  
  194:     @classmethod
  195      def setupClass(cls):
  196          cls.x = x = KDEWResults['x']

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/nonparametric/tests/test_kernel_regression.py:
   10  
   11  class KernelRegressionTestBase(TestCase):
   12:     @classmethod
   13      def setup_class(cls):
   14          nobs = 60

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/regression/mixed_linear_model.py:
  752          return exog_names + param_names + vc_names, exog_re_names, param_names
  753  
  754:     @classmethod
  755      def from_formula(cls, formula, data, re_formula=None, vc_formula=None,
  756                       subset=None, use_sparse=False, *args, **kwargs):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/regression/recursive_ls.py:
   92          self['obs_cov', 0, 0] = 1.
   93  
   94:     @classmethod
   95      def from_formula(cls, formula, data, subset=None):
   96          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/regression/tests/test_glsar_stata.py:
   37  class TestGLSARCorc(CheckStataResultsPMixin):
   38  
   39:     @classmethod
   40      def setup_class(self):
   41          d2 = macrodata.load().data

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/regression/tests/test_quantile_regression.py:
  116  class TestEpanechnikovHsheatherQ75(TestCase, CheckModelResultsMixin):
  117      # Vincent Arel-Bundock also spot-checked q=.1
  118:     @classmethod
  119      def setup_class(cls):
  120          data = sm.datasets.engel.load_pandas().data
  ...
  125  
  126  class TestEpanechnikovBofinger(TestCase, CheckModelResultsMixin):
  127:     @classmethod
  128      def setup_class(cls):
  129          cls.res1, cls.res2 = setup_fun('epa', 'bofinger')
  ...
  131  
  132  class TestEpanechnikovChamberlain(TestCase, CheckModelResultsMixin):
  133:     @classmethod
  134      def setup_class(cls):
  135          cls.res1, cls.res2 = setup_fun('epa', 'chamberlain')
  ...
  137  
  138  class TestEpanechnikovHsheather(TestCase, CheckModelResultsMixin):
  139:     @classmethod
  140      def setup_class(cls):
  141          cls.res1, cls.res2 = setup_fun('epa', 'hsheather')
  ...
  143  
  144  class TestGaussianBofinger(TestCase, CheckModelResultsMixin):
  145:     @classmethod
  146      def setup_class(cls):
  147          cls.res1, cls.res2 = setup_fun('gau', 'bofinger')
  ...
  149  
  150  class TestGaussianChamberlain(TestCase, CheckModelResultsMixin):
  151:     @classmethod
  152      def setup_class(cls):
  153          cls.res1, cls.res2 = setup_fun('gau', 'chamberlain')
  ...
  155  
  156  class TestGaussianHsheather(TestCase, CheckModelResultsMixin):
  157:     @classmethod
  158      def setup_class(cls):
  159          cls.res1, cls.res2 = setup_fun('gau', 'hsheather')
  ...
  161  
  162  class TestBiweightBofinger(TestCase, CheckModelResultsMixin):
  163:     @classmethod
  164      def setup_class(cls):
  165          cls.res1, cls.res2 = setup_fun('biw', 'bofinger')
  ...
  167  
  168  class TestBiweightChamberlain(TestCase, CheckModelResultsMixin):
  169:     @classmethod
  170      def setup_class(cls):
  171          cls.res1, cls.res2 = setup_fun('biw', 'chamberlain')
  ...
  173  
  174  class TestBiweightHsheather(TestCase, CheckModelResultsMixin):
  175:     @classmethod
  176      def setup_class(cls):
  177          cls.res1, cls.res2 = setup_fun('biw', 'hsheather')
  ...
  179  
  180  class TestCosineBofinger(TestCase, CheckModelResultsMixin):
  181:     @classmethod
  182      def setup_class(cls):
  183          cls.res1, cls.res2 = setup_fun('cos', 'bofinger')
  ...
  185  
  186  class TestCosineChamberlain(TestCase, CheckModelResultsMixin):
  187:     @classmethod
  188      def setup_class(cls):
  189          cls.res1, cls.res2 = setup_fun('cos', 'chamberlain')
  ...
  191  
  192  class TestCosineHsheather(TestCase, CheckModelResultsMixin):
  193:     @classmethod
  194      def setup_class(cls):
  195          cls.res1, cls.res2 = setup_fun('cos', 'hsheather')
  ...
  197  
  198  class TestParzeneBofinger(TestCase, CheckModelResultsMixin):
  199:     @classmethod
  200      def setup_class(cls):
  201          cls.res1, cls.res2 = setup_fun('par', 'bofinger')
  ...
  203  
  204  class TestParzeneChamberlain(TestCase, CheckModelResultsMixin):
  205:     @classmethod
  206      def setup_class(cls):
  207          cls.res1, cls.res2 = setup_fun('par', 'chamberlain')
  ...
  209  
  210  class TestParzeneHsheather(TestCase, CheckModelResultsMixin):
  211:     @classmethod
  212      def setup_class(cls):
  213          cls.res1, cls.res2 = setup_fun('par', 'hsheather')
  214  
  215  # class TestTriangleBofinger(TestCase, CheckModelResultsMixin):
  216: #    @classmethod
  217  #    def setup_class(cls):
  218  #        cls.res1, cls.res2 = setup_fun('tri', 'bofinger')
  219  
  220  # class TestTriangleChamberlain(TestCase, CheckModelResultsMixin):
  221: #    @classmethod
  222  #    def setup_class(cls):
  223  #        cls.res1, cls.res2 = setup_fun('tri', 'chamberlain')
  224  
  225  # class TestTriangleHsheather(TestCase, CheckModelResultsMixin):
  226: #    @classmethod
  227  #    def setup_class(cls):
  228  #        cls.res1, cls.res2 = setup_fun('tri', 'hsheather')

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/regression/tests/test_regression.py:
  149  
  150  class TestOLS(CheckRegressionResults):
  151:     @classmethod
  152      def setupClass(cls):
  153          from .results.results_regression import Longley
  ...
  251  
  252  class TestRTO(CheckRegressionResults):
  253:     @classmethod
  254      def setupClass(cls):
  255          from .results.results_regression import LongleyRTO
  ...
  268      Tests f_test vs. RegressionResults
  269      """
  270:     @classmethod
  271      def setupClass(cls):
  272          data = longley.load()
  ...
  296      Ftest1 is from statsmodels.  Results are from Rpy using R's car library.
  297      """
  298:     @classmethod
  299      def setupClass(cls):
  300          data = longley.load()
  ...
  328      made up.  Test values taken from Stata.
  329      """
  330:     @classmethod
  331      def setupClass(cls):
  332          data = longley.load()
  ...
  359  
  360          """
  361:     @classmethod
  362      def setupClass(cls):
  363          data = longley.load()
  ...
  396      Results from RPy using 'car' package.
  397      """
  398:     @classmethod
  399      def setupClass(cls):
  400          R = np.zeros(7)
  ...
  426      These test results were obtained by replication with R.
  427      """
  428:     @classmethod
  429      def setupClass(cls):
  430          from .results.results_regression import LongleyGls
  ...
  489      Test that GLS with no argument is equivalent to OLS.
  490      """
  491:     @classmethod
  492      def setupClass(cls):
  493          data = longley.load()
  ...
  519  class TestLM(object):
  520  
  521:     @classmethod
  522      def setupClass(cls):
  523          # TODO: Test HAC method
  ...
  602  class TestOLS_GLS_WLS_equivalence(object):
  603  
  604:     @classmethod
  605      def setupClass(cls):
  606          data = longley.load()
  ...
  648      # reuse test methods
  649  
  650:     @classmethod
  651      def setupClass(cls):
  652          data = longley.load()
  ...
  675  
  676  class TestNonFit(object):
  677:     @classmethod
  678      def setupClass(cls):
  679          data = longley.load()
  ...
  689  
  690  class TestWLS_CornerCases(object):
  691:     @classmethod
  692      def setupClass(cls):
  693          cls.exog = np.ones((1,))
  ...
  754  
  755  class TestWLSScalarVsArray(CheckRegressionResults):
  756:     @classmethod
  757      def setupClass(cls):
  758          from statsmodels.datasets.longley import load
  ...
  766  
  767  #class TestWLS_GLS(CheckRegressionResults):
  768: #    @classmethod
  769  #    def setupClass(cls):
  770  #        from statsmodels.datasets.ccard import load
  ...
  790  
  791  class TestWLS_OLS(CheckRegressionResults):
  792:     @classmethod
  793      def setupClass(cls):
  794          data = longley.load()
  ...
  802  
  803  class TestGLS_OLS(CheckRegressionResults):
  804:     @classmethod
  805      def setupClass(cls):
  806          data = longley.load()
  ...
  830  
  831  class TestYuleWalker(object):
  832:     @classmethod
  833      def setupClass(cls):
  834          from statsmodels.datasets.sunspots import load
  ...
  844  
  845  class TestDataDimensions(CheckRegressionResults):
  846:     @classmethod
  847      def setupClass(cls):
  848          np.random.seed(54321)
  ...
  866  
  867  class TestGLS_large_data(TestDataDimensions):
  868:     @classmethod
  869      def setupClass(cls):
  870          nobs = 1000
  ...
  889  
  890  class TestNxNx(TestDataDimensions):
  891:     @classmethod
  892      def setupClass(cls):
  893          super(TestNxNx, cls).setupClass()
  ...
  898  
  899  class TestNxOneNx(TestDataDimensions):
  900:     @classmethod
  901      def setupClass(cls):
  902          super(TestNxOneNx, cls).setupClass()
  ...
  907  
  908  class TestNxNxOne(TestDataDimensions):
  909:     @classmethod
  910      def setupClass(cls):
  911          super(TestNxNxOne, cls).setupClass()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/regression/tests/test_robustcov.py:
   91          self.res2 = res.results_hc0
   92  
   93:     @classmethod
   94      def setup_class(cls):
   95          d2 = macrodata.load().data
   ..
  335  
  336  
  337:     @classmethod
  338      def setup_class(cls):
  339          #import pandas as pa
  ...
  691  
  692  
  693:     @classmethod
  694      def setup_class(cls):
  695          #import pandas as pa
  ...
  790  class TestWLSOLSRobustSmall(object):
  791  
  792:     @classmethod
  793      def setup_class(cls):
  794          #import pandas as pa

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/regression/tests/tests_predict.py:
  109  class TestWLSPrediction(object):
  110  
  111:     @classmethod
  112      def setup_class(cls):
  113  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/sandbox/distributions/tests/test_norm_expan.py:
   59      # compare with normal, skew=0, excess_kurtosis=0
   60  
   61:     @classmethod
   62      def setup_class(kls):
   63          kls.scale = 2
   ..
   71      # precision not high enough because of mvsk from data
   72  
   73:     @classmethod
   74      def setup_class(kls):
   75          kls.dist1 = dist1 = stats.norm(1, 2)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/sandbox/nonparametric/tests/test_kernel_extras.py:
    8  
    9  class KernelExtrasTestBase(TestCase):
   10:     @classmethod
   11      def setup_class(cls):
   12          nobs = 60

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/sandbox/panel/correlation_structures.py:
  189              self.k_lags = len(self.ar)
  190  
  191:     @classmethod
  192      def fit(cls, cov, order, **kwds):
  193          rho, sigma = yule_walker_acov(cov, order=order, **kwds)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/sandbox/regression/tests/test_gmm.py:
  154  class TestGMMOLS(object):
  155  
  156:     @classmethod
  157      def setup_class(self):
  158          exog = exog_st  # with const at end
  ...
  238  class TestGMMSt1(CheckGMM):
  239  
  240:     @classmethod
  241      def setup_class(self):
  242          #self.bse_tol = [5e-7, 5e-7]
  ...
  260      #compares has_optimal_weights=True with Stata's has_optimal_weights=False
  261  
  262:     @classmethod
  263      def setup_class(self):
  264          # compare to Stata default options, twostep GMM
  ...
  284      #with Stata default `has_optimal_weights=False`
  285  
  286:     @classmethod
  287      def setup_class(self):
  288          # compare to Stata default options, twostep GMM
  ...
  307  class TestGMMStOnestep(CheckGMM):
  308  
  309:     @classmethod
  310      def setup_class(self):
  311          # compare to Stata default options, onestep GMM
  ...
  343      # matches Stats's defaults wargs={'centered':False}, has_optimal_weights=False
  344  
  345:     @classmethod
  346      def setup_class(self):
  347          # compare to Stata default options, onestep GMM
  ...
  365  class TestGMMStOneiter(CheckGMM):
  366  
  367:     @classmethod
  368      def setup_class(self):
  369          # compare to Stata default options, onestep GMM
  ...
  411  class TestGMMStOneiterNO(CheckGMM):
  412  
  413:     @classmethod
  414      def setup_class(self):
  415          # compare to Stata default options, onestep GMM
  ...
  437  class TestGMMStOneiterNO_Linear(CheckGMM):
  438  
  439:     @classmethod
  440      def setup_class(self):
  441          # compare to Stata default options, onestep GMM
  ...
  467  class TestGMMStOneiterNO_Nonlinear(CheckGMM):
  468  
  469:     @classmethod
  470      def setup_class(self):
  471          # compare to Stata default options, onestep GMM
  ...
  515  class TestGMMStOneiterOLS_Linear(CheckGMM):
  516  
  517:     @classmethod
  518      def setup_class(self):
  519          # replicating OLS by GMM - high agreement
  ...
  552      # of options with Stats
  553  
  554:     @classmethod
  555      def setup_class(self):
  556          # compare to Stata default options, iterative GMM
  ...
  682  class TestIV2SLSSt1(CheckIV2SLS):
  683  
  684:     @classmethod
  685      def setup_class(self):
  686          exog = exog_st  # with const at end

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/sandbox/regression/tests/test_gmm_poisson.py:
  126  class TestGMMAddOnestep(CheckGMM):
  127  
  128:     @classmethod
  129      def setup_class(self):
  130          XLISTEXOG2 = 'aget aget2 educyr actlim totchr'.split()
  ...
  162  class TestGMMAddTwostep(CheckGMM):
  163  
  164:     @classmethod
  165      def setup_class(self):
  166          XLISTEXOG2 = 'aget aget2 educyr actlim totchr'.split()
  ...
  198      #compares has_optimal_weights=True with Stata's has_optimal_weights=False
  199  
  200:     @classmethod
  201      def setup_class(self):
  202          # compare to Stata default options, twostep GMM
  ...
  240      #compares has_optimal_weights=True with Stata's has_optimal_weights=False
  241  
  242:     @classmethod
  243      def setup_class(self):
  244          # compare to Stata default options, twostep GMM
  ...
  282      # agreement is not very high, maybe vce(unadjusted) is different after all
  283  
  284:     @classmethod
  285      def setup_class(self):
  286          # compare to Stata default options, twostep GMM
  ...
  325      #compares my defaults with the same options in Stata
  326  
  327:     @classmethod
  328      def setup_class(self):
  329          # compare to Stata default options, twostep GMM

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/sandbox/tests/test_predict_functional.py:
   21  class TestPredFunc(object):
   22  
   23:     @classmethod
   24      def setup_class(cls):
   25          if pdf_output:
   ..
   27              cls.pdf = PdfPages("predict_functional.pdf")
   28  
   29:     @classmethod
   30      def teardown_class(cls):
   31          if pdf_output:

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/stats/contingency_tables.py:
  140  
  141  
  142:     @classmethod
  143      def from_data(cls, data, shift_zeros=True):
  144          """
  ...
  661  
  662  
  663:     @classmethod
  664      def from_data(cls, data, shift_zeros=True):
  665          """
  ...
  979  
  980  
  981:     @classmethod
  982      def from_data(cls, var1, var2, strata, data):
  983          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/stats/tests/test_anova.py:
   76  
   77  class TestAnovaLM(object):
   78:     @classmethod
   79      def setupClass(cls):
   80          # kidney data taken from JT's course
   ..
   99  
  100  class TestAnovaLMNoconstant(object):
  101:     @classmethod
  102      def setupClass(cls):
  103          # kidney data taken from JT's course

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/stats/tests/test_contrast.py:
    5  
    6  class TestContrast(object):
    7:     @classmethod
    8      def setupClass(cls):
    9          R.seed(54321)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/stats/tests/test_corrpsd.py:
  147  class TestCovPSD(object):
  148  
  149:     @classmethod
  150      def setup_class(cls):
  151          x = np.array([ 1,     0.477, 0.644, 0.478, 0.651, 0.826,
  ...
  176  class TestCorrPSD1(CheckCorrPSDMixin):
  177  
  178:     @classmethod
  179      def setup_class(cls):
  180          x = np.array([ 1,     0.477, 0.644, 0.478, 0.651, 0.826,

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/stats/tests/test_pairwise.py:
  164  class CheckTuckeyHSDMixin(object):
  165  
  166:     @classmethod
  167      def setup_class_(self):
  168          self.mc = MultiComparison(self.endog, self.groups)
  ...
  186  class TestTuckeyHSD2(CheckTuckeyHSDMixin):
  187  
  188:     @classmethod
  189      def setup_class(self):
  190          #balanced case
  ...
  235  class TestTuckeyHSD2Pandas(TestTuckeyHSD2):
  236  
  237:     @classmethod
  238      def setup_class(self):
  239          super(TestTuckeyHSD2Pandas, self).setup_class()
  ...
  289  
  290  class TestTuckeyHSD2s(CheckTuckeyHSDMixin):
  291:     @classmethod
  292      def setup_class(self):
  293          #unbalanced case
  ...
  311  class TestTuckeyHSD3(CheckTuckeyHSDMixin):
  312  
  313:     @classmethod
  314      def setup_class(self):
  315          #SAS case
  ...
  329  class TestTuckeyHSD4(CheckTuckeyHSDMixin):
  330  
  331:     @classmethod
  332      def setup_class(self):
  333          #unbalanced case verified in Matlab

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/stats/tests/test_statstools.py:
  165  
  166  class TestStattools(TestCase):
  167:     @classmethod
  168      def setup_class(cls):
  169          x = np.random.standard_normal(1000)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/stats/tests/test_weightstats.py:
   33  class CheckExternalMixin(object):
   34  
   35:     @classmethod
   36      def get_descriptives(cls, ddof=0):
   37          cls.descriptive = DescrStatsW(cls.data, cls.weights, ddof)
   38  
   39  
   40:     @classmethod
   41      def save_data(cls, fname="data.csv"):
   42          # Utility to get data into another package.
   ..
  100      quantiles = np.r_[-1.81098, -0.84052, 0.32859, 0.77808, 2.93431]
  101  
  102:     @classmethod
  103      def setup_class(cls):
  104          np.random.seed(9876789)
  ...
  119      quantiles = np.r_[0, 1, 5, 8, 9]
  120  
  121:     @classmethod
  122      def setup_class(cls):
  123          np.random.seed(9876789)
  ...
  142      quantiles = np.r_[-1.61593, -1.45576, -0.24356, 0.16770, 1.18791]
  143  
  144:     @classmethod
  145      def setup_class(cls):
  146          np.random.seed(4342)
  ...
  164           np.r_[-1.49263, -1.15403, -0.16231, 0.16464, 1.83062]))
  165  
  166:     @classmethod
  167      def setup_class(cls):
  168          np.random.seed(2249)
  ...
  424  class TestWeightstats1d_ddof(CheckWeightstats1dMixin):
  425  
  426:     @classmethod
  427      def setup_class(self):
  428          np.random.seed(9876789)
  ...
  444  class TestWeightstats2d(CheckWeightstats2dMixin):
  445  
  446:     @classmethod
  447      def setup_class(self):
  448          np.random.seed(9876789)
  ...
  465  class TestWeightstats2d_ddof(CheckWeightstats2dMixin):
  466  
  467:     @classmethod
  468      def setup_class(self):
  469          np.random.seed(9876789)
  ...
  484  class TestWeightstats2d_nobs(CheckWeightstats2dMixin):
  485  
  486:     @classmethod
  487      def setup_class(self):
  488          np.random.seed(9876789)
  ...
  673      # no weights used in tests
  674  
  675:     @classmethod
  676      def setup_class(cls):
  677          cls.x1 = np.array([7.8, 6.6, 6.5, 7.4, 7.3, 7., 6.4, 7.1, 6.7, 7.6, 6.8])

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/stats/weightstats.py:
  732  #        self.nobs2 = d2.sum_weights.astype(float)
  733  
  734:     @classmethod
  735      def from_data(cls, data1, data2, weights1=None, weights2=None, 
  736              ddof1=0, ddof2=0):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/tools/tests/test_grouputils.py:
  146  
  147  class TestMultiIndexGrouping(CheckGrouping):
  148:     @classmethod
  149      def setupClass(cls):
  150          grun_data = grunfeld.load_pandas().data
  ...
  158  
  159  class TestIndexGrouping(CheckGrouping):
  160:     @classmethod
  161      def setupClass(cls):
  162          grun_data = grunfeld.load_pandas().data

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/tools/tests/test_tools.py:
  479  
  480  class TestNanDot(object):
  481:     @classmethod
  482      def setupClass(cls):
  483          nan = np.nan
  ...
  549  
  550  class TestEnsure2d(TestCase):
  551:     @classmethod
  552      def setUpClass(cls):
  553          x = np.arange(400.0).reshape((100,4))

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/tsa/arima_process.py:
  646          self.nobs = nobs
  647  
  648:     @classmethod
  649      def from_coeffs(cls, arcoefs, macoefs, nobs=100):
  650          """
  ...
  666          return cls(np.r_[1, -arcoefs], np.r_[1, macoefs], nobs=nobs)
  667  
  668:     @classmethod
  669      def from_estimation(cls, model_results, nobs=None):
  670          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/tsa/arma_mle.py:
  371      #TODO: is this needed as a method at all?
  372      #JP: not needed in this form, but can be replace with using the parameters
  373:     @classmethod
  374      def generate_sample(cls, ar, ma, nsample, std=1):
  375          eta = std * np.random.randn(nsample)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/tsa/filters/tests/test_filters.py:
  594  
  595  class TestFilters(object):
  596:     @classmethod
  597      def setupClass(cls):
  598          # even

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/tsa/kalmanf/kalmanfilter.py:
  485      """
  486  
  487:     @classmethod
  488      def T(cls, params, r, k, p): # F in Hamilton
  489          """
  ...
  518          return arr
  519  
  520:     @classmethod
  521      def R(cls, params, r, k, q, p): # R is H in Hamilton
  522          """
  ...
  549          return arr
  550  
  551:     @classmethod
  552      def Z(cls, r):
  553          """
  ...
  569          return arr
  570  
  571:     @classmethod
  572      def geterrors(cls, y, k, k_ar, k_ma, k_lags, nobs, Z_mat, m, R_mat, T_mat,
  573                    paramsdtype):
  ...
  585                              "Please file a bug report" % paramsdtype)
  586  
  587:     @classmethod
  588      def _init_kalman_state(cls, params, arma_model):
  589          """
  ...
  615                 newparams, Z_mat, m, R_mat, T_mat, paramsdtype)
  616  
  617:     @classmethod
  618      def loglike(cls, params, arma_model, set_sigma2=True):
  619          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/tsa/regime_switching/tests/test_markov_autoregression.py:
  213  
  214  class MarkovAutoregression(object):
  215:     @classmethod
  216      def setup_class(cls, true, endog, atol=1e-5, rtol=1e-7, **kwargs):
  217          cls.model = markov_autoregression.MarkovAutoregression(endog, **kwargs)
  ...
  366  class TestHamiltonAR2Short(MarkovAutoregression):
  367      # This is just a set of regression tests
  368:     @classmethod
  369      def setup_class(cls):
  370          true = {
  ...
  473  
  474  class TestHamiltonAR4(MarkovAutoregression):
  475:     @classmethod
  476      def setup_class(cls):
  477          # Results from E-views:
  ...
  524  class TestHamiltonAR2Switch(MarkovAutoregression):
  525      # Results from Stata, see http://www.stata.com/manuals14/tsmswitch.pdf
  526:     @classmethod
  527      def setup_class(cls):
  528          path = os.path.join(current_path, 'results',
  ...
  630  
  631  class TestHamiltonAR1Switch(MarkovAutoregression):
  632:     @classmethod
  633      def setup_class(cls):
  634          # Results from E-views:
  ...
  766  
  767  class TestHamiltonAR1SwitchTVTP(MarkovAutoregression):
  768:     @classmethod
  769      def setup_class(cls):
  770          # Results from E-views:
  ...
  808  
  809  class TestFilardo(MarkovAutoregression):
  810:     @classmethod
  811      def setup_class(cls):
  812          path = os.path.join(current_path, 'results', 'mar_filardo.csv')
  ...
  849  
  850  class TestFilardoPandas(MarkovAutoregression):
  851:     @classmethod
  852      def setup_class(cls):
  853          path = os.path.join(current_path, 'results', 'mar_filardo.csv')

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/tsa/regime_switching/tests/test_markov_regression.py:
  408  
  409  class MarkovRegression(object):
  410:     @classmethod
  411      def setup_class(cls, true, endog, atol=1e-5, rtol=1e-7, **kwargs):
  412          cls.model = markov_regression.MarkovRegression(endog, **kwargs)
  ...
  748  class TestFedFundsConst(MarkovRegression):
  749      # Results from Stata, see http://www.stata.com/manuals14/tsmswitch.pdf
  750:     @classmethod
  751      def setup_class(cls):
  752          path = os.path.join(current_path, 'results',
  ...
  900  class TestFedFundsConstShort(MarkovRegression):
  901      # This is just a set of regression tests
  902:     @classmethod
  903      def setup_class(cls):
  904          true = {
  ...
  962  class TestFedFundsConstL1(MarkovRegression):
  963      # Results from Stata, see http://www.stata.com/manuals14/tsmswitch.pdf
  964:     @classmethod
  965      def setup_class(cls):
  966          true = {
  ...
  985  class TestFedFundsConstL1Exog(MarkovRegression):
  986      # Results from Stata, see http://www.stata.com/manuals14/tsmswitch.pdf
  987:     @classmethod
  988      def setup_class(cls):
  989          path = os.path.join(current_path, 'results',
  ...
 1047  class TestFedFundsConstL1Exog3(MarkovRegression):
 1048      # Results from Stata, see http://www.stata.com/manuals14/tsmswitch.pdf
 1049:     @classmethod
 1050      def setup_class(cls):
 1051          true = {
 ....
 1073  class TestAreturnsConstL1Variance(MarkovRegression):
 1074      # Results from Stata, see http://www.stata.com/manuals14/tsmswitch.pdf
 1075:     @classmethod
 1076      def setup_class(cls):
 1077          true = {
 ....
 1102  class TestMumpspcNoconstL1Variance(MarkovRegression):
 1103      # Results from Stata, see http://www.stata.com/manuals14/tsmswitch.pdf
 1104:     @classmethod
 1105      def setup_class(cls):
 1106          true = {

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/tsa/statespace/mlemodel.py:
 1497          return irfs
 1498  
 1499:     @classmethod
 1500      def from_formula(cls, formula, data, subset=None):
 1501          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/tsa/statespace/tests/test_dynamic_factor.py:
   32  
   33  class CheckDynamicFactor(object):
   34:     @classmethod
   35      def setup_class(cls, true, k_factors, factor_order, cov_type='approx',
   36                   included_vars=['dln_inv', 'dln_inc', 'dln_consump'],
   ..
  142      Test for a dynamic factor model with 1 AR(2) factor
  143      """
  144:     @classmethod
  145      def setup_class(cls):
  146          true = results_dynamic_factor.lutkepohl_dfm.copy()
  ...
  157      Test for a dynamic factor model with two VAR(1) factors
  158      """
  159:     @classmethod
  160      def setup_class(cls):
  161          true = results_dynamic_factor.lutkepohl_dfm2.copy()
  ...
  251      Test for a dynamic factor model with 1 exogenous regressor: a constant
  252      """
  253:     @classmethod
  254      def setup_class(cls):
  255          true = results_dynamic_factor.lutkepohl_dfm_exog1.copy()
  ...
  276      and a time-trend
  277      """
  278:     @classmethod
  279      def setup_class(cls):
  280          true = results_dynamic_factor.lutkepohl_dfm_exog2.copy()
  ...
  364      - Innovations are correlated
  365      """
  366:     @classmethod
  367      def setup_class(cls):
  368          true = results_dynamic_factor.lutkepohl_dfm_gen.copy()
  ...
  483      - Innovations are correlated
  484      """
  485:     @classmethod
  486      def setup_class(cls):
  487          true = results_dynamic_factor.lutkepohl_dfm_ar2.copy()
  ...
  508      are forced to have the same variance.
  509      """
  510:     @classmethod
  511      def setup_class(cls):
  512          true = results_dynamic_factor.lutkepohl_dfm_scalar.copy()
  ...
  533      Test for a static factor model (i.e. factors are not autocorrelated).
  534      """
  535:     @classmethod
  536      def setup_class(cls):
  537          true = results_dynamic_factor.lutkepohl_sfm.copy()
  ...
  555      errors cross-sectionally, but not auto-, correlated
  556      """
  557:     @classmethod
  558      def setup_class(cls):
  559          true = results_dynamic_factor.lutkepohl_sur.copy()
  ...
  582  
  583      """
  584:     @classmethod
  585      def setup_class(cls):
  586          true = results_dynamic_factor.lutkepohl_sur_auto.copy()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/tsa/statespace/tests/test_kalman.py:
   65      See `results.results_kalman_filter` for more information.
   66      """
   67:     @classmethod
   68      def setup_class(cls, dtype=float, conserve_memory=0, loglikelihood_burn=0):
   69          cls.true = results_kalman_filter.uc_uni
   ..
  140          )
  141  
  142:     @classmethod
  143      def init_filter(cls):
  144          # Use the appropriate Statespace model
  ...
  161          return model, kfilter
  162  
  163:     @classmethod
  164      def run_filter(cls):
  165          # Filter the data
  ...
  196      Basic single precision test for the loglikelihood and filtered states.
  197      """
  198:     @classmethod
  199      def setup_class(cls):
  200          raise SkipTest('Not implemented')
  ...
  233      Basic double precision test for the loglikelihood and filtered states.
  234      """
  235:     @classmethod
  236      def setup_class(cls):
  237          super(TestClark1987Double, cls).setup_class(
  ...
  247      states.
  248      """
  249:     @classmethod
  250      def setup_class(cls):
  251          raise SkipTest('Not implemented')
  ...
  285      states.
  286      """
  287:     @classmethod
  288      def setup_class(cls):
  289          super(TestClark1987DoubleComplex, cls).setup_class(
  ...
  298      Memory conservation test for the loglikelihood and filtered states.
  299      """
  300:     @classmethod
  301      def setup_class(cls):
  302          super(TestClark1987Conserve, cls).setup_class(
  ...
  311      Forecasting test for the loglikelihood and filtered states.
  312      """
  313:     @classmethod
  314      def setup_class(cls, dtype=float, nforecast=100, conserve_memory=0):
  315          super(Clark1987Forecast, cls).setup_class(
  ...
  342      Basic double forecasting test for the loglikelihood and filtered states.
  343      """
  344:     @classmethod
  345      def setup_class(cls):
  346          super(TestClark1987ForecastDouble, cls).setup_class()
  ...
  354      states.
  355      """
  356:     @classmethod
  357      def setup_class(cls):
  358          super(TestClark1987ForecastDoubleComplex, cls).setup_class(
  ...
  368      states.
  369      """
  370:     @classmethod
  371      def setup_class(cls):
  372          super(TestClark1987ForecastConserve, cls).setup_class(
  ...
  382      states.
  383      """
  384:     @classmethod
  385      def setup_class(cls):
  386          super(TestClark1987ConserveAll, cls).setup_class(
  ...
  420      See `results.results_kalman_filter` for more information.
  421      """
  422:     @classmethod
  423      def setup_class(cls, dtype=float, conserve_memory=0, loglikelihood_burn=0):
  424          cls.true = results_kalman_filter.uc_bi
  ...
  503          )
  504  
  505:     @classmethod
  506      def init_filter(cls):
  507          # Use the appropriate Statespace model
  ...
  524          return model, kfilter
  525  
  526:     @classmethod
  527      def run_filter(cls):
  528          # Filter the data
  ...
  566      states with two-dimensional observation vector.
  567      """
  568:     @classmethod
  569      def setup_class(cls):
  570          super(TestClark1989, cls).setup_class(dtype=float, conserve_memory=0)
  ...
  578      two-dimensional observation vector.
  579      """
  580:     @classmethod
  581      def setup_class(cls):
  582          super(TestClark1989Conserve, cls).setup_class(
  ...
  592      two-dimensional observation vector.
  593      """
  594:     @classmethod
  595      def setup_class(cls, dtype=float, nforecast=100, conserve_memory=0):
  596          super(Clark1989Forecast, cls).setup_class(dtype, conserve_memory)
  ...
  633      Basic double forecasting test for the loglikelihood and filtered states.
  634      """
  635:     @classmethod
  636      def setup_class(cls):
  637          super(TestClark1989ForecastDouble, cls).setup_class()
  ...
  645      states.
  646      """
  647:     @classmethod
  648      def setup_class(cls):
  649          super(TestClark1989ForecastDoubleComplex, cls).setup_class(
  ...
  659      states.
  660      """
  661:     @classmethod
  662      def setup_class(cls):
  663          super(TestClark1989ForecastConserve, cls).setup_class(
  ...
  673      states.
  674      """
  675:     @classmethod
  676      def setup_class(cls):
  677          super(TestClark1989ConserveAll, cls).setup_class(

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/tsa/statespace/tests/test_options.py:
   42  
   43  class Options(object):
   44:     @classmethod
   45      def setup_class(cls, *args, **kwargs):
   46  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/tsa/statespace/tests/test_representation.py:
   44      See `results.results_kalman_filter` for more information.
   45      """
   46:     @classmethod
   47      def setup_class(cls, dtype=float, **kwargs):
   48          cls.true = results_kalman_filter.uc_uni
   ..
   89          cls.model.initialize_known(initial_state, initial_state_cov)
   90  
   91:     @classmethod
   92      def run_filter(cls):
   93          # Filter the data
   ..
  119      Basic single precision test for the loglikelihood and filtered states.
  120      """
  121:     @classmethod
  122      def setup_class(cls):
  123          raise SkipTest('Not implemented')
  ...
  132      Basic double precision test for the loglikelihood and filtered states.
  133      """
  134:     @classmethod
  135      def setup_class(cls):
  136          super(TestClark1987Double, cls).setup_class(
  ...
  145      states.
  146      """
  147:     @classmethod
  148      def setup_class(cls):
  149          raise SkipTest('Not implemented')
  ...
  159      states.
  160      """
  161:     @classmethod
  162      def setup_class(cls):
  163          super(TestClark1987DoubleComplex, cls).setup_class(
  ...
  171      Memory conservation test for the loglikelihood and filtered states.
  172      """
  173:     @classmethod
  174      def setup_class(cls):
  175          super(TestClark1987Conserve, cls).setup_class(
  ...
  183      Forecasting test for the loglikelihood and filtered states.
  184      """
  185:     @classmethod
  186      def setup_class(cls, dtype=float, nforecast=100, conserve_memory=0):
  187          super(Clark1987Forecast, cls).setup_class(
  ...
  216      Basic double forecasting test for the loglikelihood and filtered states.
  217      """
  218:     @classmethod
  219      def setup_class(cls):
  220          super(TestClark1987ForecastDouble, cls).setup_class()
  ...
  227      states.
  228      """
  229:     @classmethod
  230      def setup_class(cls):
  231          super(TestClark1987ForecastDoubleComplex, cls).setup_class(
  ...
  240      states.
  241      """
  242:     @classmethod
  243      def setup_class(cls):
  244          super(TestClark1987ForecastConserve, cls).setup_class(
  ...
  253      states.
  254      """
  255:     @classmethod
  256      def setup_class(cls):
  257          super(TestClark1987ConserveAll, cls).setup_class(
  ...
  290      See `results.results_kalman_filter` for more information.
  291      """
  292:     @classmethod
  293      def setup_class(cls, dtype=float, **kwargs):
  294          cls.true = results_kalman_filter.uc_bi
  ...
  343          cls.model.initialize_known(initial_state, initial_state_cov)
  344  
  345:     @classmethod
  346      def run_filter(cls):
  347          # Filter the data
  ...
  379      states with two-dimensional observation vector.
  380      """
  381:     @classmethod
  382      def setup_class(cls):
  383          super(TestClark1989, cls).setup_class(dtype=float, conserve_memory=0)
  ...
  394      two-dimensional observation vector.
  395      """
  396:     @classmethod
  397      def setup_class(cls):
  398          super(TestClark1989Conserve, cls).setup_class(
  ...
  407      two-dimensional observation vector.
  408      """
  409:     @classmethod
  410      def setup_class(cls, dtype=float, nforecast=100, conserve_memory=0):
  411          super(Clark1989Forecast, cls).setup_class(
  ...
  449      Basic double forecasting test for the loglikelihood and filtered states.
  450      """
  451:     @classmethod
  452      def setup_class(cls):
  453          super(TestClark1989ForecastDouble, cls).setup_class()
  ...
  460      states.
  461      """
  462:     @classmethod
  463      def setup_class(cls):
  464          super(TestClark1989ForecastDoubleComplex, cls).setup_class(
  ...
  473      states.
  474      """
  475:     @classmethod
  476      def setup_class(cls):
  477          super(TestClark1989ForecastConserve, cls).setup_class(
  ...
  486      states.
  487      """
  488:     @classmethod
  489      def setup_class(cls):
  490          super(TestClark1989ConserveAll, cls).setup_class(
  ...
  521  
  522  class TestClark1989PartialMissing(Clark1989):
  523:     @classmethod
  524      def setup_class(cls):
  525          super(TestClark1989PartialMissing, cls).setup_class()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/tsa/statespace/tests/test_sarimax.py:
   45      Standard errors are quite good for the OPG case.
   46      """
   47:     @classmethod
   48      def setup_class(cls):
   49          cls.true = results_sarimax.wpi1_stationary
   ..
   99      well-tested elsewhere.
  100      """
  101:     @classmethod
  102      def setup_class(cls):
  103          dlgdp = np.log(realgdp_results['value']).diff()[1:].values
  ...
  165      Stata arima documentation, Example 1
  166      """
  167:     @classmethod
  168      def setup_class(cls, true, *args, **kwargs):
  169          cls.true = true
  ...
  200      cases.
  201      """
  202:     @classmethod
  203      def setup_class(cls):
  204          super(TestARIMAStationary, cls).setup_class(
  ...
  263      step approximation cases.
  264      """
  265:     @classmethod
  266      def setup_class(cls, **kwargs):
  267          kwargs['initialization'] = 'approximate_diffuse'
  ...
  317      Stata arima documentation, Example 2
  318      """
  319:     @classmethod
  320      def setup_class(cls, true, *args, **kwargs):
  321          cls.true = true
  ...
  353      step approximation cases.
  354      """
  355:     @classmethod
  356      def setup_class(cls):
  357          super(TestAdditiveSeasonal, cls).setup_class(
  ...
  405      Stata arima documentation, Example 3
  406      """
  407:     @classmethod
  408      def setup_class(cls, true, *args, **kwargs):
  409          cls.true = true
  ...
  442      cases.
  443      """
  444:     @classmethod
  445      def setup_class(cls):
  446          super(TestAirlineHamilton, cls).setup_class(
  ...
  496      cases.
  497      """
  498:     @classmethod
  499      def setup_class(cls):
  500          super(TestAirlineHarvey, cls).setup_class(
  ...
  550      step approximation cases.
  551      """
  552:     @classmethod
  553      def setup_class(cls):
  554          super(TestAirlineStateDifferencing, cls).setup_class(
  ...
  618      Stata arima documentation, Example 4
  619      """
  620:     @classmethod
  621      def setup_class(cls, true, exog=None, *args, **kwargs):
  622          cls.true = true
  ...
  646      cases.
  647      """
  648:     @classmethod
  649      def setup_class(cls):
  650          super(TestFriedmanMLERegression, cls).setup_class(
  ...
  719      considered just a very basic "sanity" test.
  720      """
  721:     @classmethod
  722      def setup_class(cls):
  723          # Remove the regression coefficients from the parameters, since they
  ...
  825      `test_dynamic_predict` matches the second.
  826      """
  827:     @classmethod
  828      def setup_class(cls):
  829          super(TestFriedmanPredict, cls).setup_class(
  ...
  875      meaningful.
  876      """
  877:     @classmethod
  878      def setup_class(cls):
  879          true = dict(results_sarimax.friedman2_predict)
  ...
  922  
  923  class SARIMAXCoverageTest(object):
  924:     @classmethod
  925      def setup_class(cls, i, decimal=4, endog=None, *args, **kwargs):
  926          # Dataset
  ...
 1069      # arima wpi, arima(3,0,0) noconstant vce(oim)
 1070      # save_results 1
 1071:     @classmethod
 1072      def setup_class(cls, *args, **kwargs):
 1073          kwargs['order'] = (3,0,0)
 ....
 1078      # arima wpi, arima(3,0,0) noconstant vce(oim)
 1079      # save_results 1
 1080:     @classmethod
 1081      def setup_class(cls, *args, **kwargs):
 1082          kwargs['order'] = ([1,1,1],0,0)
 ....
 1087      # arima wpi c, arima(3,0,0) noconstant vce(oim)
 1088      # save_results 2
 1089:     @classmethod
 1090      def setup_class(cls, *args, **kwargs):
 1091          kwargs['order'] = (3,0,0)
 ....
 1099      # arima wpi c t, arima(3,0,0) noconstant vce(oim)
 1100      # save_results 3
 1101:     @classmethod
 1102      def setup_class(cls, *args, **kwargs):
 1103          kwargs['order'] = (3,0,0)
 ....
 1111      # arima wpi c t3, arima(3,0,0) noconstant vce(oim)
 1112      # save_results 4
 1113:     @classmethod
 1114      def setup_class(cls, *args, **kwargs):
 1115          kwargs['order'] = (3,0,0)
 ....
 1123      # arima wpi, arima(3,2,0) noconstant vce(oim)
 1124      # save_results 5
 1125:     @classmethod
 1126      def setup_class(cls, *args, **kwargs):
 1127          kwargs['order'] = (3,2,0)
 ....
 1132      # arima wpi, arima(3,0,0) sarima(0,2,0,4) noconstant vce(oim)
 1133      # save_results 6
 1134:     @classmethod
 1135      def setup_class(cls, *args, **kwargs):
 1136          kwargs['order'] = (3,0,0)
 ....
 1142      # arima wpi, arima(3,0,0) noconstant vce(oim) diffuse
 1143      # save_results 7
 1144:     @classmethod
 1145      def setup_class(cls, *args, **kwargs):
 1146          kwargs['order'] = (3,0,0)
 ....
 1153      # arima wpi, arima(3,0,0) noconstant vce(oim)
 1154      # save_results 1
 1155:     @classmethod
 1156      def setup_class(cls, *args, **kwargs):
 1157          kwargs['order'] = (3,0,0)
 ....
 1180      # arima wpi x, arima(3,0,0) noconstant vce(oim)
 1181      # save_results 8
 1182:     @classmethod
 1183      def setup_class(cls, *args, **kwargs):
 1184          kwargs['order'] = (3,0,0)
 ....
 1191      # arima wpi x, arima(3,0,0) noconstant vce(oim)
 1192      # save_results 8
 1193:     @classmethod
 1194      def setup_class(cls, *args, **kwargs):
 1195          kwargs['order'] = (3,0,0)
 ....
 1228      # arima wpi, arima(0,0,3) noconstant vce(oim)
 1229      # save_results 9
 1230:     @classmethod
 1231      def setup_class(cls, *args, **kwargs):
 1232          kwargs['order'] = (0,0,3)
 ....
 1237      # arima wpi, arima(0,0,3) noconstant vce(oim)
 1238      # save_results 9
 1239:     @classmethod
 1240      def setup_class(cls, *args, **kwargs):
 1241          kwargs['order'] = (0,0,[1,1,1])
 ....
 1246      # arima wpi c, arima(0,0,3) noconstant vce(oim)
 1247      # save_results 10
 1248:     @classmethod
 1249      def setup_class(cls, *args, **kwargs):
 1250          kwargs['order'] = (0,0,3)
 ....
 1256      # arima wpi c t, arima(0,0,3) noconstant vce(oim)
 1257      # save_results 11
 1258:     @classmethod
 1259      def setup_class(cls, *args, **kwargs):
 1260          kwargs['order'] = (0,0,3)
 ....
 1266      # arima wpi c t3, arima(0,0,3) noconstant vce(oim)
 1267      # save_results 12
 1268:     @classmethod
 1269      def setup_class(cls, *args, **kwargs):
 1270          kwargs['order'] = (0,0,3)
 ....
 1276      # arima wpi, arima(0,2,3) noconstant vce(oim)
 1277      # save_results 13
 1278:     @classmethod
 1279      def setup_class(cls, *args, **kwargs):
 1280          kwargs['order'] = (0,2,3)
 ....
 1285      # arima wpi, arima(0,0,3) sarima(0,2,0,4) noconstant vce(oim)
 1286      # save_results 14
 1287:     @classmethod
 1288      def setup_class(cls, *args, **kwargs):
 1289          kwargs['order'] = (0,0,3)
 ....
 1295      # arima wpi, arima(0,0,3) noconstant vce(oim) diffuse
 1296      # save_results 15
 1297:     @classmethod
 1298      def setup_class(cls, *args, **kwargs):
 1299          kwargs['order'] = (0,0,3)
 ....
 1306      # arima wpi x, arima(0,0,3) noconstant vce(oim)
 1307      # save_results 16
 1308:     @classmethod
 1309      def setup_class(cls, *args, **kwargs):
 1310          kwargs['order'] = (0,0,3)
 ....
 1317      # arima wpi, arima(3,0,3) noconstant vce(oim)
 1318      # save_results 17
 1319:     @classmethod
 1320      def setup_class(cls, *args, **kwargs):
 1321          kwargs['order'] = (3,0,3)
 ....
 1326      # arima wpi c, arima(3,0,2) noconstant vce(oim)
 1327      # save_results 18
 1328:     @classmethod
 1329      def setup_class(cls, *args, **kwargs):
 1330          kwargs['order'] = (3,0,2)
 ....
 1338      # arima wpi c t, arima(3,0,2) noconstant vce(oim)
 1339      # save_results 19
 1340:     @classmethod
 1341      def setup_class(cls, *args, **kwargs):
 1342          kwargs['order'] = (3,0,2)
 ....
 1350      # arima wpi c t3, arima(3,0,2) noconstant vce(oim)
 1351      # save_results 20
 1352:     @classmethod
 1353      def setup_class(cls, *args, **kwargs):
 1354          kwargs['order'] = (3,0,2)
 ....
 1362      # arima wpi, arima(3,2,2) noconstant vce(oim)
 1363      # save_results 21
 1364:     @classmethod
 1365      def setup_class(cls, *args, **kwargs):
 1366          kwargs['order'] = (3,2,2)
 ....
 1371      # arima wpi, arima(3,0,2) sarima(0,2,0,4) noconstant vce(oim)
 1372      # save_results 22
 1373:     @classmethod
 1374      def setup_class(cls, *args, **kwargs):
 1375          kwargs['order'] = (3,0,2)
 ....
 1381      # arima wpi, arima(3,2,2) sarima(0,2,0,4) noconstant vce(oim)
 1382      # save_results 23
 1383:     @classmethod
 1384      def setup_class(cls, *args, **kwargs):
 1385          kwargs['order'] = (3,2,2)
 ....
 1391      # arima wpi, arima(3,0,2) noconstant vce(oim) diffuse
 1392      # save_results 24
 1393:     @classmethod
 1394      def setup_class(cls, *args, **kwargs):
 1395          kwargs['order'] = (3,0,2)
 ....
 1402      # arima wpi x, arima(3,0,2) noconstant vce(oim)
 1403      # save_results 25
 1404:     @classmethod
 1405      def setup_class(cls, *args, **kwargs):
 1406          kwargs['order'] = (3,0,2)
 ....
 1413      # arima wpi, sarima(3,0,0,4) noconstant vce(oim)
 1414      # save_results 26
 1415:     @classmethod
 1416      def setup_class(cls, *args, **kwargs):
 1417          kwargs['order'] = (0,0,0)
 ....
 1423      # arima wpi, sarima(3,0,0,4) noconstant vce(oim)
 1424      # save_results 26
 1425:     @classmethod
 1426      def setup_class(cls, *args, **kwargs):
 1427          kwargs['order'] = (0,0,0)
 ....
 1433      # arima wpi c, sarima(3,0,0,4) noconstant vce(oim)
 1434      # save_results 27
 1435:     @classmethod
 1436      def setup_class(cls, *args, **kwargs):
 1437          kwargs['order'] = (0,0,0)
 ....
 1446      # arima wpi c t, sarima(3,0,0,4) noconstant vce(oim)
 1447      # save_results 28
 1448:     @classmethod
 1449      def setup_class(cls, *args, **kwargs):
 1450          kwargs['order'] = (0,0,0)
 ....
 1459      # arima wpi c t3, sarima(3,0,0,4) noconstant vce(oim)
 1460      # save_results 29
 1461:     @classmethod
 1462      def setup_class(cls, *args, **kwargs):
 1463          kwargs['order'] = (0,0,0)
 ....
 1472      # arima wpi, arima(0,2,0) sarima(3,0,0,4) noconstant vce(oim)
 1473      # save_results 30
 1474:     @classmethod
 1475      def setup_class(cls, *args, **kwargs):
 1476          kwargs['order'] = (0,2,0)
 ....
 1482      # arima wpi, sarima(3,2,0,4) noconstant vce(oim)
 1483      # save_results 31
 1484:     @classmethod
 1485      def setup_class(cls, *args, **kwargs):
 1486          kwargs['order'] = (0,0,0)
 ....
 1492      # arima wpi, sarima(3,0,0,4) noconstant vce(oim) diffuse
 1493      # save_results 32
 1494:     @classmethod
 1495      def setup_class(cls, *args, **kwargs):
 1496          kwargs['order'] = (0,0,0)
 ....
 1504      # arima wpi x, sarima(3,0,0,4) noconstant vce(oim)
 1505      # save_results 33
 1506:     @classmethod
 1507      def setup_class(cls, *args, **kwargs):
 1508          kwargs['order'] = (0,0,0)
 ....
 1516      # arima wpi, sarima(0,0,3,4) noconstant vce(oim)
 1517      # save_results 34
 1518:     @classmethod
 1519      def setup_class(cls, *args, **kwargs):
 1520          kwargs['order'] = (0,0,0)
 ....
 1526      # arima wpi, sarima(0,0,3,4) noconstant vce(oim)
 1527      # save_results 34
 1528:     @classmethod
 1529      def setup_class(cls, *args, **kwargs):
 1530          kwargs['order'] = (0,0,0)
 ....
 1536      # arima wpi c, sarima(0,0,3,4) noconstant vce(oim)
 1537      # save_results 35
 1538:     @classmethod
 1539      def setup_class(cls, *args, **kwargs):
 1540          kwargs['order'] = (0,0,0)
 ....
 1548      # arima wpi c t, sarima(0,0,3,4) noconstant vce(oim)
 1549      # save_results 36
 1550:     @classmethod
 1551      def setup_class(cls, *args, **kwargs):
 1552          kwargs['order'] = (0,0,0)
 ....
 1559      # arima wpi c t3, sarima(0,0,3,4) noconstant vce(oim)
 1560      # save_results 37
 1561:     @classmethod
 1562      def setup_class(cls, *args, **kwargs):
 1563          kwargs['order'] = (0,0,0)
 ....
 1571      # arima wpi, arima(0,2,0) sarima(0,0,3,4) noconstant vce(oim)
 1572      # save_results 38
 1573:     @classmethod
 1574      def setup_class(cls, *args, **kwargs):
 1575          kwargs['order'] = (0,2,0)
 ....
 1581      # arima wpi, sarima(0,2,3,4) noconstant vce(oim)
 1582      # save_results 39
 1583:     @classmethod
 1584      def setup_class(cls, *args, **kwargs):
 1585          kwargs['order'] = (0,0,0)
 ....
 1591      # arima wpi, sarima(0,0,3,4) noconstant vce(oim) diffuse
 1592      # save_results 40
 1593:     @classmethod
 1594      def setup_class(cls, *args, **kwargs):
 1595          kwargs['order'] = (0,0,0)
 ....
 1603      # arima wpi x, sarima(0,0,3,4) noconstant vce(oim)
 1604      # save_results 41
 1605:     @classmethod
 1606      def setup_class(cls, *args, **kwargs):
 1607          kwargs['order'] = (0,0,0)
 ....
 1615      # arima wpi, sarima(3,0,2,4) noconstant vce(oim)
 1616      # save_results 42
 1617:     @classmethod
 1618      def setup_class(cls, *args, **kwargs):
 1619          kwargs['order'] = (0,0,0)
 ....
 1625      # arima wpi c, sarima(3,0,2,4) noconstant vce(oim)
 1626      # save_results 43
 1627:     @classmethod
 1628      def setup_class(cls, *args, **kwargs):
 1629          kwargs['order'] = (0,0,0)
 ....
 1638      # arima wpi c t, sarima(3,0,2,4) noconstant vce(oim)
 1639      # save_results 44
 1640:     @classmethod
 1641      def setup_class(cls, *args, **kwargs):
 1642          kwargs['order'] = (0,0,0)
 ....
 1651      # arima wpi c t3, sarima(3,0,2,4) noconstant vce(oim)
 1652      # save_results 45
 1653:     @classmethod
 1654      def setup_class(cls, *args, **kwargs):
 1655          kwargs['order'] = (0,0,0)
 ....
 1685      # arima wpi, arima(0,2,0) sarima(3,0,2,4) noconstant vce(oim)
 1686      # save_results 46
 1687:     @classmethod
 1688      def setup_class(cls, *args, **kwargs):
 1689          kwargs['order'] = (0,2,0)
 ....
 1695      # arima wpi, sarima(3,2,2,4) noconstant vce(oim)
 1696      # save_results 47
 1697:     @classmethod
 1698      def setup_class(cls, *args, **kwargs):
 1699          kwargs['order'] = (0,0,0)
 ....
 1705      # arima wpi, arima(0,2,0) sarima(3,2,2,4) noconstant vce(oim)
 1706      # save_results 48
 1707:     @classmethod
 1708      def setup_class(cls, *args, **kwargs):
 1709          kwargs['order'] = (0,2,0)
 ....
 1735      # arima wpi, sarima(3,0,2,4) noconstant vce(oim) diffuse
 1736      # save_results 49
 1737:     @classmethod
 1738      def setup_class(cls, *args, **kwargs):
 1739          kwargs['order'] = (0,0,0)
 ....
 1748      # arima wpi x, sarima(3,0,2,4) noconstant vce(oim)
 1749      # save_results 50
 1750:     @classmethod
 1751      def setup_class(cls, *args, **kwargs):
 1752          kwargs['order'] = (0,0,0)
 ....
 1760      # arima wpi x, arima(3,2,2) sarima(3,2,2,4) noconstant vce(oim)
 1761      # save_results 51
 1762:     @classmethod
 1763      def setup_class(cls, *args, **kwargs):
 1764          kwargs['order'] = (3,2,2)
 ....
 1772      # arima wpi x, arima(3,2,2) sarima(3,2,2,4) noconstant vce(oim)
 1773      # save_results 51
 1774:     @classmethod
 1775      def setup_class(cls, *args, **kwargs):
 1776          kwargs['order'] = (3,2,2)
 ....
 1786      # arima wpi x, arima(3,2,2) sarima(3,2,2,4) noconstant vce(oim) diffuse
 1787      # save_results 52
 1788:     @classmethod
 1789      def setup_class(cls, *args, **kwargs):
 1790          kwargs['order'] = (3,2,2)
 ....
 1803      # arima wpi2 x c t3, arima(3,0,2) noconstant vce(oim)
 1804      # save_results 53
 1805:     @classmethod
 1806      def setup_class(cls, *args, **kwargs):
 1807          endog = np.r_[results_sarimax.wpi1_data]

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/tsa/statespace/tests/test_smoothing.py:
   28  
   29  class TestStatesAR3(object):
   30:     @classmethod
   31      def setup_class(cls, *args, **kwargs):
   32          # Dataset / Stata comparison
   ..
  142  
  143  class TestStatesMissingAR3(object):
  144:     @classmethod
  145      def setup_class(cls, *args, **kwargs):
  146          # Dataset
  ...
  232      not.
  233      """
  234:     @classmethod
  235      def setup_class(cls):
  236          # Results

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/tsa/statespace/tests/test_varmax.py:
  118  
  119  class CheckLutkepohl(CheckVARMAX):
  120:     @classmethod
  121      def setup_class(cls, true, order, trend, error_cov_type, cov_type='approx',
  122               included_vars=['dln_inv', 'dln_inc', 'dln_consump'],
  ...
  147  
  148  class TestVAR(CheckLutkepohl):
  149:     @classmethod
  150      def setup_class(cls):
  151          true = results_varmax.lutkepohl_var1.copy()
  ...
  200  
  201  class TestVAR_diagonal(CheckLutkepohl):
  202:     @classmethod
  203      def setup_class(cls):
  204          true = results_varmax.lutkepohl_var1_diag.copy()
  ...
  266      measurement errors is correct.
  267      """
  268:     @classmethod
  269      def setup_class(cls):
  270          true = results_varmax.lutkepohl_var1_diag_meas.copy()
  ...
  354  
  355  class TestVAR_obs_intercept(CheckLutkepohl):
  356:     @classmethod
  357      def setup_class(cls):
  358          true = results_varmax.lutkepohl_var1_obs_intercept.copy()
  ...
  385      # Note: unlike the other tests in this file, this is against the Stata
  386      # var function rather than the Stata dfactor function
  387:     @classmethod
  388      def setup_class(cls):
  389          true = results_varmax.lutkepohl_var1_exog.copy()
  ...
  483      # this model. Likely the small discrepancy (see the results file) is from
  484      # the approximate diffuse initialization.
  485:     @classmethod
  486      def setup_class(cls):
  487          true = results_varmax.lutkepohl_var1_exog2.copy()
  ...
  525  
  526  class TestVAR2(CheckLutkepohl):
  527:     @classmethod
  528      def setup_class(cls):
  529          true = results_varmax.lutkepohl_var2.copy()
  ...
  582  
  583  class CheckFREDManufacturing(CheckVARMAX):
  584:     @classmethod
  585      def setup_class(cls, true, order, trend, error_cov_type, cov_type='approx',
  586                   **kwargs):
  ...
  608      """
  609  
  610:     @classmethod
  611      def setup_class(cls):
  612          true = results_varmax.fred_varma11.copy()
  ...
  691      """
  692  
  693:     @classmethod
  694      def setup_class(cls):
  695          true = results_varmax.fred_vma1.copy()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/tsa/tests/test_ar.py:
   46      Test AR fit by OLS with a constant.
   47      """
   48:     @classmethod
   49      def setupClass(cls):
   50          data = sm.datasets.sunspots.load()
   ..
   83      Test AR fit by OLS without a constant.
   84      """
   85:     @classmethod
   86      def setupClass(cls):
   87          data = sm.datasets.sunspots.load()
   ..
  119  
  120  class TestARMLEConstant(object):
  121:     @classmethod
  122      def setupClass(cls):
  123          data = sm.datasets.sunspots.load()
  ...
  222  
  223  class TestAutolagAR(object):
  224:     @classmethod
  225      def setupClass(cls):
  226          data = sm.datasets.sunspots.load()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/tsa/tests/test_arima.py:
  193  
  194  class Test_Y_ARMA11_NoConst(CheckArmaResultsMixin, CheckForecastMixin):
  195:     @classmethod
  196      def setupClass(cls):
  197          endog = y_arma[:,0]
  ...
  211  
  212  class Test_Y_ARMA14_NoConst(CheckArmaResultsMixin):
  213:     @classmethod
  214      def setupClass(cls):
  215          endog = y_arma[:,1]
  ...
  220  @dec.slow
  221  class Test_Y_ARMA41_NoConst(CheckArmaResultsMixin, CheckForecastMixin):
  222:     @classmethod
  223      def setupClass(cls):
  224          endog = y_arma[:,2]
  ...
  231  
  232  class Test_Y_ARMA22_NoConst(CheckArmaResultsMixin):
  233:     @classmethod
  234      def setupClass(cls):
  235          endog = y_arma[:,3]
  ...
  239  
  240  class Test_Y_ARMA50_NoConst(CheckArmaResultsMixin, CheckForecastMixin):
  241:     @classmethod
  242      def setupClass(cls):
  243          endog = y_arma[:,4]
  ...
  249  
  250  class Test_Y_ARMA02_NoConst(CheckArmaResultsMixin):
  251:     @classmethod
  252      def setupClass(cls):
  253          endog = y_arma[:,5]
  ...
  257  
  258  class Test_Y_ARMA11_Const(CheckArmaResultsMixin, CheckForecastMixin):
  259:     @classmethod
  260      def setupClass(cls):
  261          endog = y_arma[:,6]
  ...
  267  
  268  class Test_Y_ARMA14_Const(CheckArmaResultsMixin):
  269:     @classmethod
  270      def setupClass(cls):
  271          endog = y_arma[:,7]
  ...
  275  
  276  class Test_Y_ARMA41_Const(CheckArmaResultsMixin, CheckForecastMixin):
  277:     @classmethod
  278      def setupClass(cls):
  279          endog = y_arma[:,8]
  ...
  290  
  291  class Test_Y_ARMA22_Const(CheckArmaResultsMixin):
  292:     @classmethod
  293      def setupClass(cls):
  294          endog = y_arma[:,9]
  ...
  298  
  299  class Test_Y_ARMA50_Const(CheckArmaResultsMixin, CheckForecastMixin):
  300:     @classmethod
  301      def setupClass(cls):
  302          endog = y_arma[:,10]
  ...
  308  
  309  class Test_Y_ARMA02_Const(CheckArmaResultsMixin):
  310:     @classmethod
  311      def setupClass(cls):
  312          endog = y_arma[:,11]
  ...
  317  # cov_params and tvalues are off still but not as much vs. R
  318  class Test_Y_ARMA11_NoConst_CSS(CheckArmaResultsMixin):
  319:     @classmethod
  320      def setupClass(cls):
  321          endog = y_arma[:,0]
  ...
  328  # better vs. R
  329  class Test_Y_ARMA14_NoConst_CSS(CheckArmaResultsMixin):
  330:     @classmethod
  331      def setupClass(cls):
  332          endog = y_arma[:,1]
  ...
  342  # maroot is off because maparams is off a bit (adjust tolerance?)
  343  class Test_Y_ARMA41_NoConst_CSS(CheckArmaResultsMixin):
  344:     @classmethod
  345      def setupClass(cls):
  346          endog = y_arma[:,2]
  ...
  356  #same notes as above
  357  class Test_Y_ARMA22_NoConst_CSS(CheckArmaResultsMixin):
  358:     @classmethod
  359      def setupClass(cls):
  360          endog = y_arma[:,3]
  ...
  375  # consistent with the rest of the models
  376  class Test_Y_ARMA50_NoConst_CSS(CheckArmaResultsMixin):
  377:     @classmethod
  378      def setupClass(cls):
  379          endog = y_arma[:,4]
  ...
  386  
  387  class Test_Y_ARMA02_NoConst_CSS(CheckArmaResultsMixin):
  388:     @classmethod
  389      def setupClass(cls):
  390          endog = y_arma[:,5]
  ...
  396  #NOTE: our results are close to --x-12-arima option and R
  397  class Test_Y_ARMA11_Const_CSS(CheckArmaResultsMixin):
  398:     @classmethod
  399      def setupClass(cls):
  400          endog = y_arma[:,6]
  ...
  408  
  409  class Test_Y_ARMA14_Const_CSS(CheckArmaResultsMixin):
  410:     @classmethod
  411      def setupClass(cls):
  412          endog = y_arma[:,7]
  ...
  419  
  420  class Test_Y_ARMA41_Const_CSS(CheckArmaResultsMixin):
  421:     @classmethod
  422      def setupClass(cls):
  423          endog = y_arma[:,8]
  ...
  432  
  433  class Test_Y_ARMA22_Const_CSS(CheckArmaResultsMixin):
  434:     @classmethod
  435      def setupClass(cls):
  436          endog = y_arma[:,9]
  ...
  443  
  444  class Test_Y_ARMA50_Const_CSS(CheckArmaResultsMixin):
  445:     @classmethod
  446      def setupClass(cls):
  447          endog = y_arma[:,10]
  ...
  455  
  456  class Test_Y_ARMA02_Const_CSS(CheckArmaResultsMixin):
  457:     @classmethod
  458      def setupClass(cls):
  459          endog = y_arma[:,11]
  ...
  540  class Test_ARIMA101(CheckArmaResultsMixin):
  541      # just make sure this works
  542:     @classmethod
  543      def setupClass(cls):
  544          endog = y_arma[:,6]
  ...
  554  class Test_ARIMA111(CheckArimaResultsMixin, CheckForecastMixin,
  555                      CheckDynamicForecastMixin):
  556:     @classmethod
  557      def setupClass(cls):
  558          cpi = load_macrodata().data['cpi']
  ...
  585  class Test_ARIMA111CSS(CheckArimaResultsMixin, CheckForecastMixin,
  586                         CheckDynamicForecastMixin):
  587:     @classmethod
  588      def setupClass(cls):
  589          cpi = load_macrodata().data['cpi']
  ...
  616  
  617  class Test_ARIMA112CSS(CheckArimaResultsMixin):
  618:     @classmethod
  619      def setupClass(cls):
  620          cpi = load_macrodata().data['cpi']
  ...
  653  
  654  #class Test_ARIMADates(CheckArmaResults, CheckForecast, CheckDynamicForecast):
  655: #    @classmethod
  656  #    def setupClass(cls):
  657  #        from statsmodels.tsa.datetools import dates_from_range
  ...
 1917  class TestARMA00(TestCase):
 1918  
 1919:     @classmethod
 1920      def setup_class(cls):
 1921          from statsmodels.datasets.sunspots import load

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/tsa/tests/test_seasonal.py:
    6  
    7  class TestDecompose:
    8:     @classmethod
    9      def setupClass(cls):
   10          # even

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/tsa/tests/test_tsa_tools.py:
  106  
  107  class TestLagmat(unittest.TestCase):
  108:     @classmethod
  109      def setUpClass(cls):
  110          data = sm.datasets.macrodata.load()
  ...
  379  
  380  class TestDetrend(unittest.TestCase):
  381:     @classmethod
  382      def setup_class(cls):
  383          cls.data_1d = np.arange(5.0)
  ...
  426  
  427  class TestAddTrend(unittest.TestCase):
  428:     @classmethod
  429      def setup_class(cls):
  430          cls.n = 200
  ...
  554  
  555  class TestLagmat2DS(unittest.TestCase):
  556:     @classmethod
  557      def setUpClass(cls):
  558          data = sm.datasets.macrodata.load()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/tsa/tests/test_x13.py:
   13  
   14  class TestX13(object):
   15:     @classmethod
   16      def setupClass(cls):
   17          if not _have_x13:

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/tsa/vector_ar/tests/test_svar.py:
   15  
   16  class TestSVAR(object):
   17:     @classmethod
   18      def setupClass(cls):
   19          mdata = sm.datasets.macrodata.load_pandas().data

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/statsmodels/tsa/vector_ar/tests/test_var.py:
  251  class TestVARResults(CheckIRF, CheckFEVD):
  252  
  253:     @classmethod
  254      def setupClass(cls):
  255          cls.p = 2

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/ZConfig/tests/test_info.py:
  113      class MockSectionType(object):
  114          name = None
  115:         @classmethod
  116          def isabstract(cls):
  117              return True

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/ZODB/fsIndex.py:
  118              pickler.dump(None)
  119  
  120:     @classmethod
  121      def load(class_, fname):
  122          with open(fname, 'rb') as f:

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/zope.testing-4.6.2.dist-info/DESCRIPTION.rst:
  734      >>> old_mock = sys.modules.get('mock')
  735      >>> class FauxMock:
  736:     ...     @classmethod
  737      ...     def patch(self, *args, **kw):
  738      ...         return Manager(*args, **kw)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/zope.testing-4.6.2.dist-info/METADATA:
  764      >>> old_mock = sys.modules.get('mock')
  765      >>> class FauxMock:
  766:     ...     @classmethod
  767      ...     def patch(self, *args, **kw):
  768      ...         return Manager(*args, **kw)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/zope/component/testlayer.py:
   32      zope.testing implements an advanced mechanism so that layer setUp,
   33      tearDown, testSetUp and testTearDown code gets called in the right
   34:     order. These methods are supposed to be @classmethods and should
   35      not use super() as the test runner is supposed to take care of that.
   36  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/zope/interface/declarations.py:
  131      __name__ = '?'
  132  
  133:     @classmethod
  134      def named(cls, name, *interfaces):
  135          # Implementation method: Produce an Implements interface with

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/zope/pagetemplate/pagetemplate.py:
  261          return output.getvalue()
  262  
  263:     @classmethod
  264      def cook(cls, source_file, text, engine, content_type):
  265          if content_type == 'text/html':

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/zope/schema/vocabulary.py:
   86              directlyProvides(self, *interfaces)
   87  
   88:     @classmethod
   89      def fromItems(cls, items, *interfaces):
   90          """Construct a vocabulary from a list of (token, value) pairs.
   ..
  100          return cls(terms, *interfaces)
  101  
  102:     @classmethod
  103      def fromValues(cls, values, *interfaces):
  104          """Construct a vocabulary from a simple list.
  ...
  116          return cls(terms, *interfaces)
  117  
  118:     @classmethod
  119      def createTerm(cls, *args):
  120          """Create a single term from data.
  ...
  252          return self._terms.items()
  253  
  254:     @classmethod
  255      def fromDict(cls, dict_, *interfaces):
  256          """Constructs a vocabulary from a dictionary-like object (like dict or

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/zope/testing/setupstack.txt:
  145      >>> old_mock = sys.modules.get('mock')
  146      >>> class FauxMock:
  147:     ...     @classmethod
  148      ...     def patch(self, *args, **kw):
  149      ...         return Manager(*args, **kw)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/site-packages/zope/testrunner/tests/testrunner-debugging-layer-setup.test:
   20      ...
   21      ... class Layer:
   22:     ...     @classmethod
   23      ...     def setUp(self):
   24      ...         x = 1
   ..
   74      ...
   75      ... class Layer1:
   76:     ...     @classmethod
   77      ...     def setUp(self):
   78      ...         pass
   79      ...
   80:     ...     @classmethod
   81      ...     def tearDown(self):
   82      ...         raise NotImplementedError
   83      ...
   84      ... class Layer2:
   85:     ...     @classmethod
   86      ...     def setUp(self):
   87      ...         x = 1

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py27/lib/python2.7/UserDict.py:
  103      def __contains__(self, key):
  104          return key in self.data
  105:     @classmethod
  106      def fromkeys(cls, iterable, value=None):
  107          d = cls()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/_collections_abc.py:
   90          return 0
   91  
   92:     @classmethod
   93      def __subclasshook__(cls, C):
   94          if cls is Hashable:
   ..
  105          yield
  106  
  107:     @classmethod
  108      def __subclasshook__(cls, C):
  109          if cls is Awaitable:
  ...
  146              raise RuntimeError("coroutine ignored GeneratorExit")
  147  
  148:     @classmethod
  149      def __subclasshook__(cls, C):
  150          if cls is Coroutine:
  ...
  164          return AsyncIterator()
  165  
  166:     @classmethod
  167      def __subclasshook__(cls, C):
  168          if cls is AsyncIterable:
  ...
  183          return self
  184  
  185:     @classmethod
  186      def __subclasshook__(cls, C):
  187          if cls is AsyncIterator:
  ...
  230              raise RuntimeError("asynchronous generator ignored GeneratorExit")
  231  
  232:     @classmethod
  233      def __subclasshook__(cls, C):
  234          if cls is AsyncGenerator:
  ...
  250              yield None
  251  
  252:     @classmethod
  253      def __subclasshook__(cls, C):
  254          if cls is Iterable:
  ...
  269          return self
  270  
  271:     @classmethod
  272      def __subclasshook__(cls, C):
  273          if cls is Iterator:
  ...
  300              yield None
  301  
  302:     @classmethod
  303      def __subclasshook__(cls, C):
  304          if cls is Reversible:
  ...
  347              raise RuntimeError("generator ignored GeneratorExit")
  348  
  349:     @classmethod
  350      def __subclasshook__(cls, C):
  351          if cls is Generator:
  ...
  365          return 0
  366  
  367:     @classmethod
  368      def __subclasshook__(cls, C):
  369          if cls is Sized:
  ...
  380          return False
  381  
  382:     @classmethod
  383      def __subclasshook__(cls, C):
  384          if cls is Container:
  ...
  390      __slots__ = ()
  391  
  392:     @classmethod
  393      def __subclasshook__(cls, C):
  394          if cls is Collection:
  ...
  404          return False
  405  
  406:     @classmethod
  407      def __subclasshook__(cls, C):
  408          if cls is Callable:
  ...
  463          return len(self) == len(other) and self.__le__(other)
  464  
  465:     @classmethod
  466      def _from_iterable(cls, it):
  467          '''Construct an instance of the class from any iterable input.
  ...
  710      __slots__ = ()
  711  
  712:     @classmethod
  713      def _from_iterable(self, it):
  714          return set(it)
  ...
  727      __slots__ = ()
  728  
  729:     @classmethod
  730      def _from_iterable(self, it):
  731          return set(it)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/collections/__init__.py:
  273          return self.__class__(self)
  274  
  275:     @classmethod
  276      def fromkeys(cls, iterable, value=None):
  277          '''OD.fromkeys(S[, v]) -> New ordered dictionary with keys from S.
  ...
  321          return _tuple.__new__(_cls, ({arg_list}))
  322  
  323:     @classmethod
  324      def _make(cls, iterable, new=tuple.__new__, len=len):
  325          'Make a new {typename} object from a sequence or iterable'
  ...
  579      # Override dict methods where necessary
  580  
  581:     @classmethod
  582      def fromkeys(cls, iterable, v=None):
  583          # There is no equivalent method for counters because setting v=1
  ...
  905              self, ', '.join(map(repr, self.maps)))
  906  
  907:     @classmethod
  908      def fromkeys(cls, iterable, *args):
  909          'Create a ChainMap with a single dict created from the iterable.'
  ...
 1015          c.update(self)
 1016          return c
 1017:     @classmethod
 1018      def fromkeys(cls, iterable, value=None):
 1019          d = cls()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/enum.py:
  112  class EnumMeta(type):
  113      """Metaclass for Enum"""
  114:     @classmethod
  115      def __prepare__(metacls, cls, bases):
  116          # create the namespace dict
  ...
  542              return start
  543  
  544:     @classmethod
  545      def _missing_(cls, value):
  546          raise ValueError("%r is not a valid %s" % (value, cls.__name__))
  ...
  600          return self._value_
  601  
  602:     @classmethod
  603      def _convert(cls, name, module, filter, source=None):
  604          """
  ...
  666          return 2 ** (high_bit+1)
  667  
  668:     @classmethod
  669      def _missing_(cls, value):
  670          original_value = value
  ...
  676          return possible_member
  677  
  678:     @classmethod
  679      def _create_pseudo_member_(cls, value):
  680          """
  ...
  756      """Support for integer-based Flags"""
  757  
  758:     @classmethod
  759      def _missing_(cls, value):
  760          if not isinstance(value, int):
  ...
  763          return new_member
  764  
  765:     @classmethod
  766      def _create_pseudo_member_(cls, value):
  767          pseudo_member = cls._value2member_map_.get(value, None)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/importlib/_bootstrap.py:
  696          return '<module {!r} (built-in)>'.format(module.__name__)
  697  
  698:     @classmethod
  699      def find_spec(cls, fullname, path=None, target=None):
  700          if path is not None:
  ...
  705              return None
  706  
  707:     @classmethod
  708      def find_module(cls, fullname, path=None):
  709          """Find the built-in module.
  ...
  717          return spec.loader if spec is not None else None
  718  
  719:     @classmethod
  720      def create_module(self, spec):
  721          """Create a built-in module"""
  ...
  725          return _call_with_frames_removed(_imp.create_builtin, spec)
  726  
  727:     @classmethod
  728      def exec_module(self, module):
  729          """Exec a built-in module"""
  730          _call_with_frames_removed(_imp.exec_builtin, module)
  731  
  732:     @classmethod
  733      @_requires_builtin
  734      def get_code(cls, fullname):
  ...
  736          return None
  737  
  738:     @classmethod
  739      @_requires_builtin
  740      def get_source(cls, fullname):
  ...
  742          return None
  743  
  744:     @classmethod
  745      @_requires_builtin
  746      def is_package(cls, fullname):
  ...
  769          return '<module {!r} (frozen)>'.format(m.__name__)
  770  
  771:     @classmethod
  772      def find_spec(cls, fullname, path=None, target=None):
  773          if _imp.is_frozen(fullname):
  ...
  776              return None
  777  
  778:     @classmethod
  779      def find_module(cls, fullname, path=None):
  780          """Find a frozen module.
  ...
  785          return cls if _imp.is_frozen(fullname) else None
  786  
  787:     @classmethod
  788      def create_module(cls, spec):
  789          """Use default semantics for module creation."""
  ...
  798          exec(code, module.__dict__)
  799  
  800:     @classmethod
  801      def load_module(cls, fullname):
  802          """Load a frozen module.
  ...
  807          return _load_module_shim(cls, fullname)
  808  
  809:     @classmethod
  810      @_requires_frozen
  811      def get_code(cls, fullname):
  ...
  813          return _imp.get_frozen_object(fullname)
  814  
  815:     @classmethod
  816      @_requires_frozen
  817      def get_source(cls, fullname):
  ...
  819          return None
  820  
  821:     @classmethod
  822      @_requires_frozen
  823      def is_package(cls, fullname):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/importlib/_bootstrap_external.py:
  602      DEBUG_BUILD = False  # Changed in _setup()
  603  
  604:     @classmethod
  605      def _open_registry(cls, key):
  606          try:
  ...
  609              return _winreg.OpenKey(_winreg.HKEY_LOCAL_MACHINE, key)
  610  
  611:     @classmethod
  612      def _search_registry(cls, fullname):
  613          if cls.DEBUG_BUILD:
  ...
  624          return filepath
  625  
  626:     @classmethod
  627      def find_spec(cls, fullname, path=None, target=None):
  628          filepath = cls._search_registry(fullname)
  ...
  640                  return spec
  641  
  642:     @classmethod
  643      def find_module(cls, fullname, path=None):
  644          """Find module named in the registry.
  ...
 1015          self._path = _NamespacePath(name, path, path_finder)
 1016  
 1017:     @classmethod
 1018      def module_repr(cls, module):
 1019          """Return repr for the module.
 ....
 1057      """Meta path finder for sys.path and package __path__ attributes."""
 1058  
 1059:     @classmethod
 1060      def invalidate_caches(cls):
 1061          """Call the invalidate_caches() method on all path entry finders
 ....
 1065                  finder.invalidate_caches()
 1066  
 1067:     @classmethod
 1068      def _path_hooks(cls, path):
 1069          """Search sys.path_hooks for a finder for 'path'."""
 ....
 1078              return None
 1079  
 1080:     @classmethod
 1081      def _path_importer_cache(cls, path):
 1082          """Get the finder for the path entry from sys.path_importer_cache.
 ....
 1100          return finder
 1101  
 1102:     @classmethod
 1103      def _legacy_get_spec(cls, fullname, finder):
 1104          # This would be a good place for a DeprecationWarning if
 ....
 1115          return spec
 1116  
 1117:     @classmethod
 1118      def _get_spec(cls, fullname, path, target=None):
 1119          """Find the loader or namespace_path for this module/package name."""
 ....
 1147              return spec
 1148  
 1149:     @classmethod
 1150      def find_spec(cls, fullname, path=None, target=None):
 1151          """Try to find a spec for 'fullname' on sys.path or 'path'.
 ....
 1171              return spec
 1172  
 1173:     @classmethod
 1174      def find_module(cls, fullname, path=None):
 1175          """find the module on sys.path or 'path' based on sys.path_hooks and
 ....
 1310              self._relaxed_path_cache = {fn.lower() for fn in contents}
 1311  
 1312:     @classmethod
 1313      def path_hook(cls, *loader_details):
 1314          """A class method which returns a closure to use on sys.path_hook

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/importlib/util.py:
  261              raise TypeError('loader must define exec_module()')
  262  
  263:     @classmethod
  264      def factory(cls, loader):
  265          """Construct a callable which returns the eager loader made lazy."""

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/os.py:
 1063          raise NotImplementedError
 1064  
 1065:     @classmethod
 1066      def __subclasshook__(cls, subclass):
 1067          return hasattr(subclass, '__fspath__')

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/cycler.py:
  189              yield out
  190  
  191:     @classmethod
  192      def _from_iter(cls, label, itr):
  193          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/dateutil/parser.py:
  188          return self.__next__()  # Python 2.x support
  189  
  190:     @classmethod
  191      def split(cls, s):
  192          return list(cls(s))
  193  
  194:     @classmethod
  195      def isword(cls, nextchar):
  196          """ Whether or not the next character is part of a word """
  197          return nextchar.isalpha()
  198  
  199:     @classmethod
  200      def isnum(cls, nextchar):
  201          """ Whether the next character is part of a number """
  202          return nextchar.isdigit()
  203  
  204:     @classmethod
  205      def isspace(cls, nextchar):
  206          """ Whether the next character is whitespace """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/matplotlib/_pylab_helpers.py:
   36      figs = {}
   37  
   38:     @classmethod
   39      def get_fig_manager(cls, num):
   40          """
   ..
   47          return manager
   48  
   49:     @classmethod
   50      def destroy(cls, num):
   51          """
   ..
   72          gc.collect(1)
   73  
   74:     @classmethod
   75      def destroy_fig(cls, fig):
   76          "*fig* is a Figure instance"
   ..
   83              cls.destroy(num)
   84  
   85:     @classmethod
   86      def destroy_all(cls):
   87          # this is need to ensure that gc is available in corner cases
   ..
   96          gc.collect(1)
   97  
   98:     @classmethod
   99      def has_fignum(cls, num):
  100          """
  ...
  103          return num in cls.figs
  104  
  105:     @classmethod
  106      def get_all_fig_managers(cls):
  107          """
  ...
  110          return list(cls.figs.values())
  111  
  112:     @classmethod
  113      def get_num_fig_managers(cls):
  114          """
  ...
  117          return len(cls.figs)
  118  
  119:     @classmethod
  120      def get_active(cls):
  121          """
  ...
  127              return cls._activeQue[-1]
  128  
  129:     @classmethod
  130      def set_active(cls, manager):
  131          """
  ...
  140          cls.figs[manager.num] = manager
  141  
  142:     @classmethod
  143      def draw_all(cls, force=False):
  144          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/matplotlib/animation.py:
  353                         'Command stderr:\n%s' % err, level='debug')
  354  
  355:     @classmethod
  356      def bin_path(cls):
  357          '''
  ...
  362          return str(rcParams[cls.exec_key])
  363  
  364:     @classmethod
  365      def isAvailable(cls):
  366          '''
  ...
  382              return False
  383  
  384:     @classmethod
  385      def _handle_subprocess(cls, process):
  386          process.communicate()
  ...
  557          return args + ['-y', self.outfile]
  558  
  559:     @classmethod
  560      def _handle_subprocess(cls, process):
  561          _, err = process.communicate()
  ...
  738          return [self.outfile]
  739  
  740:     @classmethod
  741      def _init_from_registry(cls):
  742          if sys.platform != 'win32' or rcParams[cls.exec_key] != 'convert':
  ...
  756          rcParams[cls.exec_key] = rcParamsDefault[cls.exec_key] = binpath
  757  
  758:     @classmethod
  759      def isAvailable(cls):
  760          '''

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/matplotlib/backend_bases.py:
 2054          return int(self.figure.bbox.width), int(self.figure.bbox.height)
 2055  
 2056:     @classmethod
 2057      def get_supported_filetypes(cls):
 2058          """Return dict of savefig file formats supported by this backend"""
 2059          return cls.filetypes
 2060  
 2061:     @classmethod
 2062      def get_supported_filetypes_grouped(cls):
 2063          """Return a dict of savefig file formats supported by this backend,
 ....
 2263          return result
 2264  
 2265:     @classmethod
 2266      def get_default_filetype(cls):
 2267          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/matplotlib/backends/backend_nbagg.py:
  147          return bool(self.web_sockets)
  148  
  149:     @classmethod
  150      def get_javascript(cls, stream=None):
  151          if stream is None:

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/matplotlib/backends/backend_webagg.py:
  275              template_path=core.FigureManagerWebAgg.get_static_file_path())
  276  
  277:     @classmethod
  278      def initialize(cls, url_prefix='', port=None):
  279          if cls.initialized:
  ...
  319          cls.initialized = True
  320  
  321:     @classmethod
  322      def start(cls):
  323          if cls.started:

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/matplotlib/backends/backend_webagg_core.py:
  483                  s.send_binary(diff)
  484  
  485:     @classmethod
  486      def get_javascript(cls, stream=None):
  487          if stream is None:
  ...
  520              return output.getvalue()
  521  
  522:     @classmethod
  523      def get_static_file_path(cls):
  524          return os.path.join(os.path.dirname(__file__), 'web_backend')

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/matplotlib/docstring.py:
   50          self.params.update(*args, **kwargs)
   51  
   52:     @classmethod
   53      def from_params(cls, params):
   54          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/matplotlib/legend.py:
  517      # modify the default handler map.
  518  
  519:     @classmethod
  520      def get_default_handler_map(cls):
  521          """
  ...
  524          return cls._default_handler_map
  525  
  526:     @classmethod
  527      def set_default_handler_map(cls, handler_map):
  528          """
  ...
  531          cls._default_handler_map = handler_map
  532  
  533:     @classmethod
  534      def update_default_handler_map(cls, handler_map):
  535          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/matplotlib/patches.py:
 1888          return _cls(**_args)
 1889  
 1890:     @classmethod
 1891      def get_styles(klass):
 1892          """
 ....
 1895          return klass._style_list
 1896  
 1897:     @classmethod
 1898      def pprint_styles(klass):
 1899          """
 ....
 1902          return _pprint_styles(klass._style_list)
 1903  
 1904:     @classmethod
 1905      def register(klass, name, style):
 1906          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/matplotlib/path.py:
  170              self._readonly = False
  171  
  172:     @classmethod
  173      def _fast_from_codes_and_verts(cls, verts, codes, internals=None):
  174          """
  ...
  314      deepcopy = __deepcopy__
  315  
  316:     @classmethod
  317      def make_compound_path_from_polys(cls, XY):
  318          """
  ...
  343          return cls(verts, codes)
  344  
  345:     @classmethod
  346      def make_compound_path(cls, *args):
  347          """Make a compound path from a list of Path objects."""
  ...
  632      _unit_rectangle = None
  633  
  634:     @classmethod
  635      def unit_rectangle(cls):
  636          """
  ...
  649      _unit_regular_polygons = WeakValueDictionary()
  650  
  651:     @classmethod
  652      def unit_regular_polygon(cls, numVertices):
  653          """
  ...
  678      _unit_regular_stars = WeakValueDictionary()
  679  
  680:     @classmethod
  681      def unit_regular_star(cls, numVertices, innerCircle=0.5):
  682          """
  ...
  707          return path
  708  
  709:     @classmethod
  710      def unit_regular_asterisk(cls, numVertices):
  711          """
  ...
  718      _unit_circle = None
  719  
  720:     @classmethod
  721      def unit_circle(cls):
  722          """
  ...
  731          return cls._unit_circle
  732  
  733:     @classmethod
  734      def circle(cls, center=(0., 0.), radius=1., readonly=False):
  735          """
  ...
  804      _unit_circle_righthalf = None
  805  
  806:     @classmethod
  807      def unit_circle_righthalf(cls):
  808          """
  ...
  850          return cls._unit_circle_righthalf
  851  
  852:     @classmethod
  853      def arc(cls, theta1, theta2, n=None, is_wedge=False):
  854          """
  ...
  926          return cls(vertices, codes, readonly=True)
  927  
  928:     @classmethod
  929      def wedge(cls, theta1, theta2, n=None):
  930          """
  ...
  940      _hatch_dict = maxdict(8)
  941  
  942:     @classmethod
  943      def hatch(cls, hatchpattern, density=6):
  944          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/matplotlib/sphinxext/tests/test_tinypages.py:
   36      # Test build and output of tinypages project
   37  
   38:     @classmethod
   39      def setup_class(cls):
   40          cls.page_build = tempfile.mkdtemp()
   ..
   58                                      out, err))
   59  
   60:     @classmethod
   61      def teardown_class(cls):
   62          shutil.rmtree(cls.page_build)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/matplotlib/spines.py:
  451          return self._bounds
  452  
  453:     @classmethod
  454      def linear_spine(cls, axes, spine_type, **kwargs):
  455          """
  ...
  472          return result
  473  
  474:     @classmethod
  475      def circular_spine(cls, axes, center, radius, **kwargs):
  476          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/matplotlib/testing/decorators.py:
   86  
   87  class CleanupTest(object):
   88:     @classmethod
   89      def setup_class(cls):
   90          cls.original_units_registry = matplotlib.units.registry.copy()
   ..
   92          matplotlib.testing.setup()
   93  
   94:     @classmethod
   95      def teardown_class(cls):
   96          _do_cleanup(cls.original_units_registry,
   ..
  103  class CleanupTestCase(unittest.TestCase):
  104      '''A wrapper for unittest.TestCase that includes cleanup operations'''
  105:     @classmethod
  106      def setUpClass(cls):
  107          import matplotlib.units
  ...
  109          cls.original_settings = mpl.rcParams.copy()
  110  
  111:     @classmethod
  112      def tearDownClass(cls):
  113          _do_cleanup(cls.original_units_registry,
  ...
  182  
  183  class ImageComparisonTest(CleanupTest):
  184:     @classmethod
  185      def setup_class(cls):
  186          CleanupTest.setup_class()
  ...
  194              raise
  195  
  196:     @classmethod
  197      def teardown_class(cls):
  198          CleanupTest.teardown_class()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/matplotlib/tests/test_dates.py:
  412              return self.mk_tzaware(dt)
  413  
  414:         @classmethod
  415          def mk_tzaware(cls, datetime_obj):
  416              kwargs = {}

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/matplotlib/type1font.py:
  151      _number = object()
  152  
  153:     @classmethod
  154      def _tokens(cls, text):
  155          """
  ...
  250          self.prop = prop
  251  
  252:     @classmethod
  253      def _transformer(cls, tokens, slant, extend):
  254          def fontname(name):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/mpl_toolkits/axes_grid1/parasite_axes.py:
   76  # #class ParasiteAxes(ParasiteAxesBase, Axes):
   77  
   78: #     @classmethod
   79  #     def _get_base_axes_attr(cls, attrname):
   80  #         return getattr(Axes, attrname)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/machine_learning/tests/__init__.py:
   35      set_up_packages = ('nti.machine_learning',)
   36  
   37:     @classmethod
   38      def setUp(cls):
   39          setHooks()
   40          cls.setUpPackages()
   41  
   42:     @classmethod
   43      def tearDown(cls):
   44          cls.tearDownPackages()
   45          zope.testing.cleanup.cleanUp()
   46  
   47:     @classmethod
   48      def testSetUp(cls, unused_test=None):
   49          setHooks()
   50  
   51:     @classmethod
   52      def testTearDown(cls):
   53          pass
   ..
   58      layer = SharedConfiguringTestLayer
   59  
   60:     @classmethod
   61      def setUp(self):
   62          examples = []
   ..
   74      layer = SharedConfiguringTestLayer
   75  
   76:     @classmethod
   77      def setUp(self):
   78          points = []
   ..
   94      layer = SharedConfiguringTestLayer
   95  
   96:     @classmethod
   97      def setUp(self):
   98          iris = load_iris()
   ..
  106      layer = SharedConfiguringTestLayer
  107  
  108:     @classmethod
  109      def setUp(self):
  110          iris = load_iris()
  ...
  118      layer = SharedConfiguringTestLayer
  119  
  120:     @classmethod
  121      def setUp(self):
  122          data = load_breast_cancer()
  ...
  130      layer = SharedConfiguringTestLayer
  131  
  132:     @classmethod
  133      def setUp(self):
  134          boston = load_boston()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/property/schema.py:
   25      DATA = 'data:'
   26  
   27:     @classmethod
   28      def is_valid_data_uri(cls, value):
   29          return value and value.startswith(cls.DATA)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/property/tests/__init__.py:
   23      set_up_packages = ()
   24  
   25:     @classmethod
   26      def setUp(cls):
   27          cls.setUpPackages()
   28  
   29:     @classmethod
   30      def tearDown(cls):
   31          cls.tearDownPackages()
   32          zope.testing.cleanup.cleanUp()
   33  
   34:     @classmethod
   35      def testSetUp(cls, test=None):
   36          pass
   37  
   38:     @classmethod
   39      def testTearDown(cls):
   40          pass

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/schema/tests/__init__.py:
   21      set_up_packages = ('nti.schema',)
   22  
   23:     @classmethod
   24      def setUp(cls):
   25          cls.setUpPackages()
   26  
   27:     @classmethod
   28      def tearDown(cls):
   29          cls.tearDownPackages()
   30          cleanup.cleanUp()
   31  
   32:     @classmethod
   33      def testSetUp(cls, test=None):
   34          pass

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/schema/vocabulary.py:
   40          super(CountryTerm, self).__init__(*args, **kwargs)
   41  
   42:     @classmethod
   43      def fromItem(cls, item):
   44          token, cdata = item

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/testing/base.py:
   86              __mro__ = __bases__ = (object,)
   87  
   88:             @classmethod
   89              def setUp(cls):
   90                  the_type.setUpClass()
   91:             @classmethod
   92              def tearDown(cls):
   93                  the_type.tearDownClass()
   94:             @classmethod
   95              def testSetUp(cls):
   96                  pass
   97:             @classmethod
   98              def testTearDown(cls):
   99                  pass
  ...
  116      HANDLE_GC = False
  117  
  118:     @classmethod
  119      def setUpClass(cls):
  120          """
  ...
  139                  gc.disable() # PyPy GC is fast
  140  
  141:     @classmethod
  142      def tearDownClass(cls):
  143          zope.testing.cleanup.cleanUp()
  ...
  330      configure_events = True
  331  
  332:     @classmethod
  333      def setUpClass( cls ):
  334          super(SharedConfiguringTestBase,cls).setUpClass()
  ...
  343                                                             context=cls.configuration_context)
  344  
  345:     @classmethod
  346      def configure_packages(cls, set_up_packages=(), features=(), context=None ):
  347          cls.configuration_context = _configure(self=cls,
  ...
  351          return cls.configuration_context
  352  
  353:     @classmethod
  354      def tearDownClass( cls ):
  355          # always safe to clear events

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/nti/testing/layers.py:
   37      """
   38  
   39:     @classmethod
   40      def setUp(cls):
   41          pass
   42  
   43:     @classmethod
   44      def tearDown(cls):
   45          pass
   46  
   47:     @classmethod
   48      def testSetUp( cls ):
   49          pass
   50  
   51:     @classmethod
   52      def testTearDown(cls):
   53          # Must implement
   54          pass
   55  
   56:     @classmethod
   57      def setUpGC(cls):
   58          """
   ..
   74          gc.disable()
   75  
   76:     @classmethod
   77      def tearDownGC(cls):
   78          zope.testing.cleanup.cleanUp()
   ..
   90      """
   91  
   92:     @classmethod
   93      def setUp(cls):
   94          # You MUST implement this, otherwise zope.testrunner
   ..
   96          zope.testing.cleanup.cleanUp()
   97  
   98:     @classmethod
   99      def tearDown(cls):
  100          # You MUST implement this, otherwise zope.testrunner
  ...
  102          zope.testing.cleanup.cleanUp()
  103  
  104:     @classmethod
  105      def testSetUp(cls):
  106          sharedCleanup()
  107  
  108:     @classmethod
  109      def testTearDown(cls):
  110          sharedCleanup()
  ...
  123      """
  124  
  125:     @classmethod
  126      def setUp( cls ):
  127          setHooks() # zope.component.hooks registers a zope.testing.cleanup to reset these
  128  
  129  
  130:     @classmethod
  131      def tearDown( cls ):
  132          # always safe to clear events
  ...
  134          # resetHooks()  we never actually want to do this, it's not needed and can mess up other fixtures
  135  
  136:     @classmethod
  137      def testSetUp(cls):
  138          setHooks() # ensure these are still here; cheap and easy
  139  
  140:     @classmethod
  141      def testTearDown( cls ):
  142          # Some tear down needs to happen always
  ...
  184      configuration_context = None
  185  
  186:     @classmethod
  187      def setUp(cls):
  188          # You MUST implement this, otherwise zope.testrunner
  ...
  190          pass
  191  
  192:     @classmethod
  193      def tearDown(cls):
  194          # You MUST implement this, otherwise zope.testrunner
  ...
  196          pass
  197  
  198:     @classmethod
  199      def testSetUp( cls ):
  200          pass
  201  
  202:     @classmethod
  203      def testTearDown(cls):
  204          # Must implement
  205          pass
  206  
  207:     @classmethod
  208      def setUpPackages(cls):
  209          logger.info( 'Setting up packages %s for layer %s', cls.set_up_packages, cls )
  ...
  215          gc.collect()
  216  
  217:     @classmethod
  218      def configure_packages(cls, set_up_packages=(), features=(), context=None ):
  219          cls.configuration_context = _configure(self=cls,
  ...
  223          return cls.configuration_context
  224  
  225:     @classmethod
  226      def tearDownPackages(cls):
  227          # This is a duplicate of zope.component.globalregistry
  ...
  240      this. If you need access to the test, you can use an idiom like this::
  241  
  242:         @classmethod
  243          def testSetUp(cls, test=None):
  244              test = test or find_test()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/numpy/ctypeslib.py:
  194                  }
  195  
  196:     @classmethod
  197      def from_param(cls, obj):
  198          if not isinstance(obj, ndarray):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/numpy/lib/_iotools.py:
  534      (_defaulttype, _defaultfunc, _defaultfill) = zip(*_mapper)
  535  
  536:     @classmethod
  537      def _getdtype(cls, val):
  538          """Returns the dtype of the input variable."""
  ...
  540      #
  541  
  542:     @classmethod
  543      def _getsubdtype(cls, val):
  544          """Returns the type of the dtype of the input variable."""
  ...
  550      # "datetime64").
  551  
  552:     @classmethod
  553      def _dtypeortype(cls, dtype):
  554          """Returns dtype for datetime64 and type of dtype otherwise."""
  ...
  558      #
  559  
  560:     @classmethod
  561      def upgrade_mapper(cls, func, default=None):
  562          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/numpy/lib/tests/test_recfunctions.py:
  649  
  650  class TestJoinBy2(TestCase):
  651:     @classmethod
  652      def setUp(cls):
  653          cls.a = np.array(list(zip(np.arange(10), np.arange(50, 60),

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/numpy/polynomial/_polybase.py:
  722          return x, y
  723  
  724:     @classmethod
  725      def fit(cls, x, y, deg, domain=None, rcond=None, full=False, w=None,
  726          window=None):
  ...
  810              return cls(coef, domain=domain, window=window)
  811  
  812:     @classmethod
  813      def fromroots(cls, roots, domain=[], window=None):
  814          """Return series instance that has the specified roots.
  ...
  851          return cls(coef, domain=domain, window=window)
  852  
  853:     @classmethod
  854      def identity(cls, domain=None, window=None):
  855          """Identity function.
  ...
  884          return cls(coef, domain, window)
  885  
  886:     @classmethod
  887      def basis(cls, deg, domain=None, window=None):
  888          """Series basis polynomial of degree `deg`.
  ...
  923          return cls([0]*ideg + [1], domain, window)
  924  
  925:     @classmethod
  926      def cast(cls, series, domain=None, window=None):
  927          """Convert series to series of this class.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/compat/chainmap_impl.py:
   87              self, ', '.join(repr(m) for m in self.maps))
   88  
   89:     @classmethod
   90      def fromkeys(cls, iterable, *args):
   91          'Create a ChainMap with a single dict created from the iterable.'

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/core/base.py:
  176          raise TypeError("You cannot call method {name}".format(name=name))
  177  
  178:     @classmethod
  179      def _add_delegate_accessors(cls, delegate, accessors, typ,
  180                                  overwrite=False):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/core/categorical.py:
  428          return None
  429  
  430:     @classmethod
  431      def from_array(cls, data, **kwargs):
  432          """
  ...
  447          return cls(data, **kwargs)
  448  
  449:     @classmethod
  450      def from_codes(cls, codes, categories, ordered=False):
  451          """
  ...
  522      _categories = None
  523  
  524:     @classmethod
  525      def _validate_ordered(cls, ordered):
  526          """
  ...
  541              raise TypeError("'ordered' must either be 'True' or 'False'")
  542  
  543:     @classmethod
  544      def _validate_categories(cls, categories, fastpath=False):
  545          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/core/dtypes/dtypes.py:
   77          return {k: getattr(self, k, None) for k in self._metadata}
   78  
   79:     @classmethod
   80      def reset_cache(cls):
   81          """ clear the cache """
   82          cls._cache = {}
   83  
   84:     @classmethod
   85      def is_dtype(cls, dtype):
   86          """ Return a boolean if the passed type is an actual dtype that
   ..
  143          return isinstance(other, CategoricalDtype)
  144  
  145:     @classmethod
  146      def construct_from_string(cls, string):
  147          """ attempt to construct this type from a string, raise a TypeError if
  ...
  239              return u
  240  
  241:     @classmethod
  242      def construct_from_string(cls, string):
  243          """ attempt to construct this type from a string, raise a TypeError if
  ...
  319              return u
  320  
  321:     @classmethod
  322      def _parse_dtype_strict(cls, freq):
  323          if isinstance(freq, compat.string_types):
  ...
  333          raise ValueError("could not construct PeriodDtype")
  334  
  335:     @classmethod
  336      def construct_from_string(cls, string):
  337          """
  ...
  365          return isinstance(other, PeriodDtype) and self.freq == other.freq
  366  
  367:     @classmethod
  368      def is_dtype(cls, dtype):
  369          """
  ...
  454              return u
  455  
  456:     @classmethod
  457      def construct_from_string(cls, string):
  458          """
  ...
  487                  self.subtype == other.subtype)
  488  
  489:     @classmethod
  490      def is_dtype(cls, dtype):
  491          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/core/dtypes/generic.py:
    5  # objects
    6  def create_pandas_abc_type(name, attr, comp):
    7:     @classmethod
    8      def _check(cls, inst):
    9          return getattr(inst, attr, '_typ') in comp

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/core/frame.py:
  817      # IO methods (to / from other formats)
  818  
  819:     @classmethod
  820      def from_dict(cls, data, orient='columns', dtype=None):
  821          """
  ...
  957                            if_exists=if_exists, private_key=private_key)
  958  
  959:     @classmethod
  960      def from_records(cls, data, index=None, exclude=None, columns=None,
  961                       coerce_float=False, nrows=None):
  ...
 1133          )
 1134  
 1135:     @classmethod
 1136      def from_items(cls, items, columns=None, orient='columns'):
 1137          """
 ....
 1187              raise ValueError("'orient' must be either 'columns' or 'index'")
 1188  
 1189:     @classmethod
 1190      def _from_arrays(cls, arrays, columns, index, dtype=None):
 1191          mgr = _arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)
 1192          return cls(mgr)
 1193  
 1194:     @classmethod
 1195      def from_csv(cls, path, header=0, sep=',', index_col=0, parse_dates=True,
 1196                   encoding=None, tupleize_cols=False,

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/core/generic.py:
  212      # Axis
  213  
  214:     @classmethod
  215      def _setup_axes(cls, axes, info_axis=None, stat_axis=None, aliases=None,
  216                      slicers=None, axes_are_reversed=False, build_axes=True,
  ...
  328          return axes, kwargs
  329  
  330:     @classmethod
  331      def _from_axes(cls, data, axes, **kwargs):
  332          # for construction from BlockManager
  ...
 1597      # Fancy Indexing
 1598  
 1599:     @classmethod
 1600      def _create_indexer(cls, name, indexer):
 1601          """Create an indexer like _name in the class."""
 ....
 6034          return grouped.aggregate(applyf)
 6035  
 6036:     @classmethod
 6037      def _add_numeric_operations(cls):
 6038          """Add the operations to the cls; evaluate the doc strings again"""
 ....
 6158              nanops.nanmin)
 6159  
 6160:     @classmethod
 6161      def _add_series_only_operations(cls):
 6162          """Add the series only operations to the cls; evaluate the doc
 ....
 6178              nanptp)
 6179  
 6180:     @classmethod
 6181      def _add_series_or_dataframe_operations(cls):
 6182          """Add the series or dataframe only operations to the cls; evaluate

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/core/groupby.py:
 1130          return result
 1131  
 1132:     @classmethod
 1133      def _add_numeric_operations(cls):
 1134          """ add numeric operations to the GroupBy generically """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/core/indexes/base.py:
  365      """
  366  
  367:     @classmethod
  368      def _simple_new(cls, values, name=None, dtype=None, **kwargs):
  369          """
  ...
  632  
  633      # construction helpers
  634:     @classmethod
  635      def _try_convert_to_int_index(cls, data, copy, name):
  636          """
  ...
  672          raise ValueError
  673  
  674:     @classmethod
  675      def _scalar_data_error(cls, data):
  676          raise TypeError('{0}(...) must be called with a collection of some '
  ...
  678                                                        repr(data)))
  679  
  680:     @classmethod
  681      def _string_data_error(cls, data):
  682          raise TypeError('String dtype not supported, you may need '
  683                          'to explicitly cast to a numeric type')
  684  
  685:     @classmethod
  686      def _coerce_to_ndarray(cls, data):
  687          """coerces data to ndarray, raises on scalar data. Converts other
  ...
 3700          raise base.AbstractMethodError(self)
 3701  
 3702:     @classmethod
 3703      def _add_comparison_methods(cls):
 3704          """ add in comparison methods """
 ....
 3744          cls.__ge__ = _make_compare(operator.ge)
 3745  
 3746:     @classmethod
 3747      def _add_numeric_methods_add_sub_disabled(cls):
 3748          """ add in the numeric add/sub methods to disable """
 ....
 3759          cls.__sub__ = __isub__ = _make_invalid_op('__sub__')  # noqa
 3760  
 3761:     @classmethod
 3762      def _add_numeric_methods_disabled(cls):
 3763          """ add in numeric methods to disable other than add/sub """
 ....
 3845          return other
 3846  
 3847:     @classmethod
 3848      def _add_numeric_methods_binary(cls):
 3849          """ add in numeric methods """
 ....
 3912          )
 3913  
 3914:     @classmethod
 3915      def _add_numeric_methods_unary(cls):
 3916          """ add in numeric unary methods """
 ....
 3932          cls.__inv__ = _make_evaluate_unary(lambda x: -x, '__inv__')
 3933  
 3934:     @classmethod
 3935      def _add_numeric_methods(cls):
 3936          cls._add_numeric_methods_unary()
 3937          cls._add_numeric_methods_binary()
 3938  
 3939:     @classmethod
 3940      def _add_logical_methods(cls):
 3941          """ add in logical methods """
 ....
 3976                                           np.any)
 3977  
 3978:     @classmethod
 3979      def _add_logical_methods_disabled(cls):
 3980          """ add in logical methods to disable """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/core/indexes/category.py:
  144          return data
  145  
  146:     @classmethod
  147      def _simple_new(cls, values, name=None, categories=None, ordered=None,
  148                      **kwargs):
  ...
  638          return self.values._codes_for_groupby(sort)
  639  
  640:     @classmethod
  641      def _add_comparison_methods(cls):
  642          """ add in comparison methods """
  ...
  686          return CategoricalIndex(res, name=self.name)
  687  
  688:     @classmethod
  689      def _add_accessors(cls):
  690          """ add in Categorical accessor methods """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/core/indexes/datetimelike.py:
  630          return NotImplemented
  631  
  632:     @classmethod
  633      def _add_datetimelike_methods(cls):
  634          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/core/indexes/datetimes.py:
  408          return subarr._deepcopy_if_needed(ref_to_data, copy)
  409  
  410:     @classmethod
  411      def _generate(cls, start, end, periods, name, offset,
  412                    tz=None, normalize=False, ambiguous='raise', closed=None):
  ...
  566              return result.take(reverse)
  567  
  568:     @classmethod
  569      def _simple_new(cls, values, name=None, freq=None, tz=None,
  570                      dtype=None, **kwargs):
  ...
  618          return zzone == vzone
  619  
  620:     @classmethod
  621      def _cached_range(cls, start=None, end=None, periods=None, offset=None,
  622                        name=None):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/core/indexes/interval.py:
  156                                 copy=copy, verify_integrity=verify_integrity)
  157  
  158:     @classmethod
  159      def _simple_new(cls, left, right, closed=None, name=None,
  160                      copy=False, verify_integrity=True):
  ...
  295              return False
  296  
  297:     @classmethod
  298      def from_breaks(cls, breaks, closed='right', name=None, copy=False):
  299          """
  ...
  324                                 name=name, copy=copy)
  325  
  326:     @classmethod
  327      def from_arrays(cls, left, right, closed='right', name=None, copy=False):
  328          """
  ...
  356                                 copy=copy, verify_integrity=True)
  357  
  358:     @classmethod
  359      def from_intervals(cls, data, name=None, copy=False):
  360          """
  ...
  391          return cls.from_arrays(left, right, closed, name=name, copy=False)
  392  
  393:     @classmethod
  394      def from_tuples(cls, data, closed='right', name=None, copy=False):
  395          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/core/indexes/multi.py:
 1057          return 0
 1058  
 1059:     @classmethod
 1060      def from_arrays(cls, arrays, sortorder=None, names=None):
 1061          """
 ....
 1105                            names=names, verify_integrity=False)
 1106  
 1107:     @classmethod
 1108      def from_tuples(cls, tuples, sortorder=None, names=None):
 1109          """
 ....
 1151          return MultiIndex.from_arrays(arrays, sortorder=sortorder, names=names)
 1152  
 1153:     @classmethod
 1154      def from_product(cls, iterables, sortorder=None, names=None):
 1155          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/core/indexes/numeric.py:
   64                               (type(self).__name__, tolerance))
   65  
   66:     @classmethod
   67      def _assert_safe_casting(cls, data, subarr):
   68          """
   ..
  146          return Int64Index(joined, name=name)
  147  
  148:     @classmethod
  149      def _assert_safe_casting(cls, data, subarr):
  150          """
  ...
  224          return UInt64Index(joined, name=name)
  225  
  226:     @classmethod
  227      def _assert_safe_casting(cls, data, subarr):
  228          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/core/indexes/period.py:
  276          return cls._from_ordinals(data, name=name, freq=freq)
  277  
  278:     @classmethod
  279      def _generate_range(cls, start, end, periods, freq, fields):
  280          if freq is not None:
  ...
  295          return subarr, freq
  296  
  297:     @classmethod
  298      def _simple_new(cls, values, name=None, freq=None, **kwargs):
  299          """
  ...
  309          return cls._from_ordinals(values, name, freq, **kwargs)
  310  
  311:     @classmethod
  312      def _from_ordinals(cls, values, name=None, freq=None, **kwargs):
  313          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/core/indexes/range.py:
   95          return cls._simple_new(start, stop, step, name)
   96  
   97:     @classmethod
   98      def from_range(cls, data, name=None, dtype=None, **kwargs):
   99          """ create RangeIndex from a range (py3), or xrange (py2) object """
  ...
  123          return RangeIndex(start, stop, step, dtype=dtype, name=name, **kwargs)
  124  
  125:     @classmethod
  126      def _simple_new(cls, start, stop=None, step=None, name=None,
  127                      dtype=None, **kwargs):
  ...
  537          return self._int64index // other
  538  
  539:     @classmethod
  540      def _add_numeric_methods_binary(cls):
  541          """ add in numeric methods, specialized to RangeIndex """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/core/indexes/timedeltas.py:
  232          return cls._simple_new(data, name=name, freq=freq)
  233  
  234:     @classmethod
  235      def _generate(cls, start, end, periods, name, offset, closed=None):
  236          if com._count_not_none(start, end, periods) != 2:
  ...
  275          return lambda x: Timedelta(x, unit='ns')
  276  
  277:     @classmethod
  278      def _simple_new(cls, values, name=None, freq=None, **kwargs):
  279          values = np.array(values, copy=False)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/core/ops.py:
  314          self.rvalues = right
  315  
  316:     @classmethod
  317      def get_op(cls, left, right, name, na_op):
  318          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/core/panel.py:
  237          return create_block_manager_from_arrays(arrays, arr_names, axes)
  238  
  239:     @classmethod
  240      def from_dict(cls, data, intersect=False, orient='items', dtype=None):
  241          """
  ...
 1482          return _ensure_index(index)
 1483  
 1484:     @classmethod
 1485      def _add_aggregate_operations(cls, use_numexpr=True):
 1486          """ add the operations to the cls; evaluate the doc strings again """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/core/series.py:
  255          self._set_axis(0, index, fastpath=True)
  256  
  257:     @classmethod
  258      def from_array(cls, arr, index=None, name=None, dtype=None, copy=False,
  259                     fastpath=False):
  ...
 2581          return lmask & rmask
 2582  
 2583:     @classmethod
 2584      def from_csv(cls, path, sep=',', parse_dates=True, header=None,
 2585                   index_col=0, encoding=None, infer_datetime_format=False):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/core/sparse/array.py:
  230          return cls._simple_new(subarr, sparse_index, fill_value)
  231  
  232:     @classmethod
  233      def _simple_new(cls, data, sp_index, fill_value):
  234          if not isinstance(sp_index, SparseIndex):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/core/sparse/series.py:
  252          return self.sp_index.npoints
  253  
  254:     @classmethod
  255      def from_array(cls, arr, index=None, name=None, copy=False,
  256                     fill_value=None, fastpath=False):
  ...
  777          return A, rows, columns
  778  
  779:     @classmethod
  780      def from_coo(cls, A, dense_index=False):
  781          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/io/excel.py:
  766          return sheet_name
  767  
  768:     @classmethod
  769      def check_extension(cls, ext):
  770          """checks that path's extension against the Writer's supported
  ...
  886                                      field, style.__getattribute__(field))
  887  
  888:     @classmethod
  889      def _convert_to_style(cls, style_dict):
  890          """
  ...
  985                              xcell.style = xcell.style.copy(**style_kwargs)
  986  
  987:     @classmethod
  988      def _convert_to_style_kwargs(cls, style_dict):
  989          """
  ...
 1024          return style_kwargs
 1025  
 1026:     @classmethod
 1027      def _convert_to_color(cls, color_spec):
 1028          """
 ....
 1052              return Color(**color_spec)
 1053  
 1054:     @classmethod
 1055      def _convert_to_font(cls, font_dict):
 1056          """
 ....
 1100          return Font(**font_kwargs)
 1101  
 1102:     @classmethod
 1103      def _convert_to_stop(cls, stop_seq):
 1104          """
 ....
 1117          return map(cls._convert_to_color, stop_seq)
 1118  
 1119:     @classmethod
 1120      def _convert_to_fill(cls, fill_dict):
 1121          """
 ....
 1181              return GradientFill(**gfill_kwargs)
 1182  
 1183:     @classmethod
 1184      def _convert_to_side(cls, side_spec):
 1185          """
 ....
 1216          return Side(**side_kwargs)
 1217  
 1218:     @classmethod
 1219      def _convert_to_border(cls, border_dict):
 1220          """
 ....
 1259          return Border(**border_kwargs)
 1260  
 1261:     @classmethod
 1262      def _convert_to_alignment(cls, alignment_dict):
 1263          """
 ....
 1282          return Alignment(**alignment_dict)
 1283  
 1284:     @classmethod
 1285      def _convert_to_number_format(cls, number_format_dict):
 1286          """
 ....
 1304              return number_format_dict['format_code']
 1305  
 1306:     @classmethod
 1307      def _convert_to_protection(cls, protection_dict):
 1308          """
 ....
 1472                            val, style)
 1473  
 1474:     @classmethod
 1475      def _style_to_xlwt(cls, item, firstlevel=True, field_sep=',',
 1476                         line_sep=';'):
 ....
 1506              return item
 1507  
 1508:     @classmethod
 1509      def _convert_to_style(cls, style_dict, num_format_str=None):
 1510          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/io/formats/style.py:
 1113                                  index=data.index, columns=data.columns)
 1114  
 1115:     @classmethod
 1116      def from_custom_template(cls, searchpath, name):
 1117          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/io/pytables.py:
 1771      _info_fields = ['tz', 'ordered']
 1772  
 1773:     @classmethod
 1774      def create_for_block(
 1775              cls, i=None, name=None, cname=None, version=None, **kwargs):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/io/stata.py:
  803                  self.string == other.string and self.value == other.value)
  804  
  805:     @classmethod
  806      def get_base_missing_value(cls, dtype):
  807          if dtype == np.int8:

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/plotting/_core.py:
  555          return x
  556  
  557:     @classmethod
  558      def _plot(cls, ax, x, y, style=None, is_errorbar=False, **kwds):
  559          mask = isnull(y)
  ...
  594          return name
  595  
  596:     @classmethod
  597      def _get_ax_layer(cls, ax, primary=True):
  598          """get left (primary) or right (secondary) axes"""
  ...
  955              ax.set_xlim(left, right)
  956  
  957:     @classmethod
  958      def _plot(cls, ax, x, y, style=None, column_num=None,
  959                stacking_id=None, **kwds):
  ...
  967          return lines
  968  
  969:     @classmethod
  970      def _ts_plot(cls, ax, x, data, style=None, **kwds):
  971          from pandas.plotting._timeseries import (_maybe_resample,
  ...
  997              return None
  998  
  999:     @classmethod
 1000      def _initialize_stacker(cls, ax, stacking_id, n):
 1001          if stacking_id is None:
 ....
 1008          ax._stacker_neg_prior[stacking_id] = np.zeros(n)
 1009  
 1010:     @classmethod
 1011      def _get_stacked_values(cls, ax, stacking_id, values, label):
 1012          if stacking_id is None:
 ....
 1026                           .format(label))
 1027  
 1028:     @classmethod
 1029      def _update_stacker(cls, ax, stacking_id, values):
 1030          if stacking_id is None:
 ....
 1069              raise ValueError("Log-y scales are not supported in area plot")
 1070  
 1071:     @classmethod
 1072      def _plot(cls, ax, x, y, style=None, column_num=None,
 1073                stacking_id=None, is_errorbar=False, **kwds):
 ....
 1166              self.left = np.array(self.left)
 1167  
 1168:     @classmethod
 1169      def _plot(cls, ax, x, y, w, start=0, log=False, **kwds):
 1170          return ax.bar(x, y, w, bottom=start, log=log, **kwds)
 ....
 1253          return self.left
 1254  
 1255:     @classmethod
 1256      def _plot(cls, ax, x, y, w, start=0, log=False, **kwds):
 1257          return ax.barh(x, y, w, left=start, log=log, **kwds)
 ....
 1290              self.bottom = np.array(self.bottom)
 1291  
 1292:     @classmethod
 1293      def _plot(cls, ax, y, style=None, bins=None, bottom=0, column_num=0,
 1294                stacking_id=None, **kwds):
 ....
 1369          return ind
 1370  
 1371:     @classmethod
 1372      def _plot(cls, ax, y, style=None, bw_method=None, ind=None,
 1373                column_num=None, stacking_id=None, **kwds):
 ....
 1491                  self.sharey = False
 1492  
 1493:     @classmethod
 1494      def _plot(cls, ax, y, column_num=None, return_type='axes', **kwds):
 1495          if y.ndim == 2:

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/tests/computation/test_eval.py:
   98  class TestEvalNumexprPandas(object):
   99  
  100:     @classmethod
  101      def setup_class(cls):
  102          tm.skip_if_no_ne()
  ...
  106          cls.parser = 'pandas'
  107  
  108:     @classmethod
  109      def teardown_class(cls):
  110          del cls.engine, cls.parser
  ...
  721  class TestEvalNumexprPython(TestEvalNumexprPandas):
  722  
  723:     @classmethod
  724      def setup_class(cls):
  725          super(TestEvalNumexprPython, cls).setup_class()
  ...
  748  class TestEvalPythonPython(TestEvalNumexprPython):
  749  
  750:     @classmethod
  751      def setup_class(cls):
  752          super(TestEvalPythonPython, cls).setup_class()
  ...
  778  class TestEvalPythonPandas(TestEvalPythonPython):
  779  
  780:     @classmethod
  781      def setup_class(cls):
  782          super(TestEvalPythonPandas, cls).setup_class()
  ...
 1068  class TestOperationsNumExprPandas(object):
 1069  
 1070:     @classmethod
 1071      def setup_class(cls):
 1072          tm.skip_if_no_ne()
 ....
 1075          cls.arith_ops = expr._arith_ops_syms + expr._cmp_ops_syms
 1076  
 1077:     @classmethod
 1078      def teardown_class(cls):
 1079          del cls.engine, cls.parser
 ....
 1488  class TestOperationsNumExprPython(TestOperationsNumExprPandas):
 1489  
 1490:     @classmethod
 1491      def setup_class(cls):
 1492          super(TestOperationsNumExprPython, cls).setup_class()
 ....
 1562  class TestOperationsPythonPython(TestOperationsNumExprPython):
 1563  
 1564:     @classmethod
 1565      def setup_class(cls):
 1566          super(TestOperationsPythonPython, cls).setup_class()
 ....
 1573  class TestOperationsPythonPandas(TestOperationsNumExprPandas):
 1574  
 1575:     @classmethod
 1576      def setup_class(cls):
 1577          super(TestOperationsPythonPandas, cls).setup_class()
 ....
 1583  class TestMathPythonPython(object):
 1584  
 1585:     @classmethod
 1586      def setup_class(cls):
 1587          tm.skip_if_no_ne()
 ....
 1591          cls.binary_fns = _binary_math_ops
 1592  
 1593:     @classmethod
 1594      def teardown_class(cls):
 1595          del cls.engine, cls.parser
 ....
 1689  class TestMathPythonPandas(TestMathPythonPython):
 1690  
 1691:     @classmethod
 1692      def setup_class(cls):
 1693          super(TestMathPythonPandas, cls).setup_class()
 ....
 1698  class TestMathNumExprPandas(TestMathPythonPython):
 1699  
 1700:     @classmethod
 1701      def setup_class(cls):
 1702          super(TestMathNumExprPandas, cls).setup_class()
 ....
 1707  class TestMathNumExprPython(TestMathPythonPython):
 1708  
 1709:     @classmethod
 1710      def setup_class(cls):
 1711          super(TestMathNumExprPython, cls).setup_class()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/tests/frame/test_query_eval.py:
  387  class TestDataFrameQueryNumExprPandas(object):
  388  
  389:     @classmethod
  390      def setup_class(cls):
  391          cls.engine = 'numexpr'
  ...
  393          tm.skip_if_no_ne(cls.engine)
  394  
  395:     @classmethod
  396      def teardown_class(cls):
  397          del cls.engine, cls.parser
  ...
  717  class TestDataFrameQueryNumExprPython(TestDataFrameQueryNumExprPandas):
  718  
  719:     @classmethod
  720      def setup_class(cls):
  721          super(TestDataFrameQueryNumExprPython, cls).setup_class()
  ...
  818  class TestDataFrameQueryPythonPandas(TestDataFrameQueryNumExprPandas):
  819  
  820:     @classmethod
  821      def setup_class(cls):
  822          super(TestDataFrameQueryPythonPandas, cls).setup_class()
  ...
  839  class TestDataFrameQueryPythonPython(TestDataFrameQueryNumExprPython):
  840  
  841:     @classmethod
  842      def setup_class(cls):
  843          super(TestDataFrameQueryPythonPython, cls).setup_class()
  ...
 1040  class TestDataFrameEvalNumExprPandas(object):
 1041  
 1042:     @classmethod
 1043      def setup_class(cls):
 1044          cls.engine = 'numexpr'
 ....
 1076  class TestDataFrameEvalNumExprPython(TestDataFrameEvalNumExprPandas):
 1077  
 1078:     @classmethod
 1079      def setup_class(cls):
 1080          super(TestDataFrameEvalNumExprPython, cls).setup_class()
 ....
 1086  class TestDataFrameEvalPythonPandas(TestDataFrameEvalNumExprPandas):
 1087  
 1088:     @classmethod
 1089      def setup_class(cls):
 1090          super(TestDataFrameEvalPythonPandas, cls).setup_class()
 ....
 1095  class TestDataFrameEvalPythonPython(TestDataFrameEvalNumExprPython):
 1096  
 1097:     @classmethod
 1098      def setup_class(cls):
 1099          cls.engine = cls.parser = 'python'

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/tests/io/formats/test_printing.py:
  125  class TestTableSchemaRepr(object):
  126  
  127:     @classmethod
  128      def setup_class(cls):
  129          pytest.importorskip('IPython')

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/tests/io/test_clipboard.py:
   28  class TestClipboard(object):
   29  
   30:     @classmethod
   31      def setup_class(cls):
   32          cls.data = {}
   ..
   63          cls.data_types = list(cls.data.keys())
   64  
   65:     @classmethod
   66      def teardown_class(cls):
   67          del cls.data_types, cls.data

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/tests/io/test_excel.py:
 1936      """Skip test case if openpyxl >= 2.2"""
 1937  
 1938:     @classmethod
 1939      def setup_class(cls):
 1940          _skip_if_no_openpyxl()
 ....
 2053      """Skip test case if openpyxl < 2.2"""
 2054  
 2055:     @classmethod
 2056      def setup_class(cls):
 2057          _skip_if_no_openpyxl()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/tests/io/test_gbq.py:
   96  class TestToGBQIntegrationWithServiceAccountKeyPath(object):
   97  
   98:     @classmethod
   99      def setup_class(cls):
  100          # - GLOBAL CLASS FIXTURES -
  ...
  110                                  ).create(DATASET_ID + "1")
  111  
  112:     @classmethod
  113      def teardown_class(cls):
  114          # - GLOBAL CLASS FIXTURES -

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/tests/io/test_html.py:
  102      banklist_data = os.path.join(DATA_PATH, 'banklist.html')
  103  
  104:     @classmethod
  105      def setup_class(cls):
  106          _skip_if_none_of(('bs4', 'html5lib'))
  ...
  785      flavor = 'bs4'
  786  
  787:     @classmethod
  788      def setup_class(cls):
  789          _skip_if_none_of((cls.flavor, 'html5lib'))
  ...
  826      flavor = 'lxml'
  827  
  828:     @classmethod
  829      def setup_class(cls):
  830          super(TestReadHtmlEncodingLxml, cls).setup_class()
  ...
  835      flavor = 'lxml'
  836  
  837:     @classmethod
  838      def setup_class(cls):
  839          _skip_if_no('lxml')

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/tests/io/test_pytables.py:
  124  class Base(object):
  125  
  126:     @classmethod
  127      def setup_class(cls):
  128  
  ...
  130          tm.reset_testing_mode()
  131  
  132:     @classmethod
  133      def teardown_class(cls):
  134  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/tests/io/test_sql.py:
 1092      flavor = None
 1093  
 1094:     @classmethod
 1095      def setup_class(cls):
 1096          cls.setup_import()
 ....
 1112          self._load_test1_data()
 1113  
 1114:     @classmethod
 1115      def setup_import(cls):
 1116          # Skip this test if SQLAlchemy not available
 ....
 1118              pytest.skip('SQLAlchemy not installed')
 1119  
 1120:     @classmethod
 1121      def setup_driver(cls):
 1122          raise NotImplementedError()
 1123  
 1124:     @classmethod
 1125      def connect(cls):
 1126          raise NotImplementedError()
 ....
 1629      flavor = 'sqlite'
 1630  
 1631:     @classmethod
 1632      def connect(cls):
 1633          return sqlalchemy.create_engine('sqlite:///:memory:')
 1634  
 1635:     @classmethod
 1636      def setup_driver(cls):
 1637          # sqlite3 is built-in
 ....
 1677      flavor = 'mysql'
 1678  
 1679:     @classmethod
 1680      def connect(cls):
 1681          url = 'mysql+{driver}://root@localhost/pandas_nosetest'
 1682          return sqlalchemy.create_engine(url.format(driver=cls.driver))
 1683  
 1684:     @classmethod
 1685      def setup_driver(cls):
 1686          try:
 ....
 1743      flavor = 'postgresql'
 1744  
 1745:     @classmethod
 1746      def connect(cls):
 1747          url = 'postgresql+{driver}://postgres@localhost/pandas_nosetest'
 1748          return sqlalchemy.create_engine(url.format(driver=cls.driver))
 1749  
 1750:     @classmethod
 1751      def setup_driver(cls):
 1752          try:
 ....
 1862      flavor = 'sqlite'
 1863  
 1864:     @classmethod
 1865      def connect(cls):
 1866          return sqlite3.connect(':memory:')
 ....
 2312  class TestXMySQL(MySQLMixIn):
 2313  
 2314:     @classmethod
 2315      def setup_class(cls):
 2316          _skip_if_no_pymysql()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/tests/test_compat.py:
   11  class TestBuiltinIterators(object):
   12  
   13:     @classmethod
   14      def check_result(cls, actual, expected, lengths):
   15          for (iter_res, list_res), exp, length in zip(actual, expected,

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/tests/test_config.py:
    9  class TestConfig(object):
   10  
   11:     @classmethod
   12      def setup_class(cls):
   13          from copy import deepcopy

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/tests/test_panel.py:
  186  class SafeForSparse(object):
  187  
  188:     @classmethod
  189      def assert_panel_equal(cls, x, y):
  190          assert_panel_equal(x, y)
  ...
  905                  SafeForSparse):
  906  
  907:     @classmethod
  908      def assert_panel_equal(cls, x, y):
  909          assert_panel_equal(x, y)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/tests/util/test_util.py:
  410  class TestLocaleUtils(object):
  411  
  412:     @classmethod
  413      def setup_class(cls):
  414          cls.locales = tm.get_locales()
  ...
  419          tm._skip_if_windows()
  420  
  421:     @classmethod
  422      def teardown_class(cls):
  423          del cls.locales

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/tseries/frequencies.py:
  107                             for k, v in compat.iteritems(_reso_freq_map)])
  108  
  109:     @classmethod
  110      def get_str(cls, reso):
  111          """
  ...
  119          return cls._reso_str_map.get(reso, 'day')
  120  
  121:     @classmethod
  122      def get_reso(cls, resostr):
  123          """
  ...
  134          return cls._str_reso_map.get(resostr, cls.RESO_DAY)
  135  
  136:     @classmethod
  137      def get_freq_group(cls, resostr):
  138          """
  ...
  146          return get_freq_group(cls.get_freq(resostr))
  147  
  148:     @classmethod
  149      def get_freq(cls, resostr):
  150          """
  ...
  158          return cls._reso_freq_map[resostr]
  159  
  160:     @classmethod
  161      def get_str_from_freq(cls, freq):
  162          """
  ...
  170          return cls._freq_reso_map.get(freq, 'day')
  171  
  172:     @classmethod
  173      def get_reso_from_freq(cls, freq):
  174          """
  ...
  185          return cls.get_reso(cls.get_str_from_freq(freq))
  186  
  187:     @classmethod
  188      def get_stride_from_decimal(cls, value, freq):
  189          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/tseries/offsets.py:
  514  class SingleConstructorOffset(DateOffset):
  515  
  516:     @classmethod
  517      def _from_name(cls, suffix=None):
  518          # default _from_name calls cls with no args
  ...
 1184          self.kwds['day_of_month'] = self.day_of_month
 1185  
 1186:     @classmethod
 1187      def _from_name(cls, suffix=None):
 1188          return cls(day_of_month=suffix)
 ....
 1634          return self._prefix + suffix
 1635  
 1636:     @classmethod
 1637      def _from_name(cls, suffix=None):
 1638          if not suffix:
 ....
 1752      _prefix = 'WOM'
 1753  
 1754:     @classmethod
 1755      def _from_name(cls, suffix=None):
 1756          if not suffix:
 ....
 1834      _prefix = 'LWOM'
 1835  
 1836:     @classmethod
 1837      def _from_name(cls, suffix=None):
 1838          if not suffix:
 ....
 1865          return (self.n == 1 and self.startingMonth is not None)
 1866  
 1867:     @classmethod
 1868      def _from_name(cls, suffix=None):
 1869          kwargs = {}
 ....
 2063          DateOffset.__init__(self, n=n, normalize=normalize, **kwds)
 2064  
 2065:     @classmethod
 2066      def _from_name(cls, suffix=None):
 2067          kwargs = {}
 ....
 2456                               _int_to_weekday[self.weekday])
 2457  
 2458:     @classmethod
 2459      def _parse_suffix(cls, varion_code, startingMonth_code, weekday_code):
 2460          if varion_code == "N":
 ....
 2475          }
 2476  
 2477:     @classmethod
 2478      def _from_name(cls, *args):
 2479          return cls(**cls._parse_suffix(*args))
 ....
 2632                            "%s-%d" % (suffix, self.qtr_with_extra_week))
 2633  
 2634:     @classmethod
 2635      def _from_name(cls, *args):
 2636          return cls(**dict(FY5253._parse_suffix(*args[:-1]),

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pandas/util/_decorators.py:
  141          self.params.update(*args, **kwargs)
  142  
  143:     @classmethod
  144      def from_params(cls, params):
  145          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/patsy/compat_ordereddict.py:
  229          return self.__class__(self)
  230  
  231:     @classmethod
  232      def fromkeys(cls, iterable, value=None):
  233          '''OD.fromkeys(S[, v]) -> New ordered dictionary with keys from S

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/patsy/constraint.py:
   70      __getstate__ = no_pickling
   71  
   72:     @classmethod
   73      def combine(cls, constraints):
   74          """Create a new LinearConstraint by ANDing together several existing

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/patsy/desc.py:
  150          return result
  151              
  152:     @classmethod
  153      def from_formula(cls, tree_or_string):
  154          """Construct a :class:`ModelDesc` from a formula string.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/patsy/design_info.py:
  660                                term_codings=new_term_codings)
  661  
  662:     @classmethod
  663      def from_array(cls, array_like, default_column_prefix="column"):
  664          """Find or construct a DesignInfo appropriate for a given array_like.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/patsy/eval.py:
  166                                              + self._namespaces))
  167  
  168:     @classmethod
  169      def capture(cls, eval_env=0, reference=0):
  170          """Capture an execution environment from the stack.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/patsy/origin.py:
   38          self.end = end
   39  
   40:     @classmethod
   41      def combine(cls, origin_objs):
   42          """Class method for combining a set of Origins into one large Origin

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/persistent/tests/test_picklecache.py:
 1039              _p_oid = KEY
 1040              invalidated = False
 1041:             @classmethod
 1042              def _p_invalidate(cls):
 1043                  cls.invalidated = True

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/persistent/tests/test_ring.py:
   23      __next_oid = 0
   24  
   25:     @classmethod
   26      def _next_oid(cls):
   27          cls.__next_oid += 1

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pip/__init__.py:
  248      _date_re = re.compile(r'-(20\d\d\d\d\d\d)$')
  249  
  250:     @classmethod
  251      def from_dist(cls, dist, dependency_links):
  252          location = os.path.normcase(os.path.abspath(dist.location))

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pip/_vendor/cachecontrol/controller.py:
   36          self.serializer = serializer or Serializer()
   37  
   38:     @classmethod
   39      def _urlnorm(cls, uri):
   40          """Normalize the URL to create a safe key for the cache"""
   ..
   56          return defrag_uri
   57  
   58:     @classmethod
   59      def cache_url(cls, uri):
   60          return cls._urlnorm(uri)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pip/_vendor/distlib/_backport/tarfile.py:
 1090          return buf + self._create_header(info, USTAR_FORMAT, "ascii", "replace")
 1091  
 1092:     @classmethod
 1093      def create_pax_global_header(cls, pax_headers):
 1094          """Return the object as a pax global header block sequence.
 ....
 1149          return payload
 1150  
 1151:     @classmethod
 1152      def _create_gnu_long_header(cls, name, type, encoding, errors):
 1153          """Return a GNUTYPE_LONGNAME or GNUTYPE_LONGLINK sequence
 ....
 1166                  cls._create_payload(name)
 1167  
 1168:     @classmethod
 1169      def _create_pax_generic_header(cls, pax_headers, type, encoding):
 1170          """Return a POSIX.1-2008 extended or global header sequence
 ....
 1217                  cls._create_payload(records)
 1218  
 1219:     @classmethod
 1220      def frombuf(cls, buf, encoding, errors):
 1221          """Construct a TarInfo object from a 512 byte bytes object.
 ....
 1280          return obj
 1281  
 1282:     @classmethod
 1283      def fromtarfile(cls, tarfile):
 1284          """Return the next TarInfo object from TarFile object
 ....
 1711      # by adding it to the mapping in OPEN_METH.
 1712  
 1713:     @classmethod
 1714      def open(cls, name=None, mode="r", fileobj=None, bufsize=RECORDSIZE, **kwargs):
 1715          """Open a tar archive for reading, writing or appending. Return
 ....
 1787          raise ValueError("undiscernible mode")
 1788  
 1789:     @classmethod
 1790      def taropen(cls, name, mode="r", fileobj=None, **kwargs):
 1791          """Open uncompressed tar archive name for reading or writing.
 ....
 1795          return cls(name, mode, fileobj, **kwargs)
 1796  
 1797:     @classmethod
 1798      def gzopen(cls, name, mode="r", fileobj=None, compresslevel=9, **kwargs):
 1799          """Open gzip compressed tar archive name for reading or writing.
 ....
 1826          return t
 1827  
 1828:     @classmethod
 1829      def bz2open(cls, name, mode="r", fileobj=None, compresslevel=9, **kwargs):
 1830          """Open bzip2 compressed tar archive name for reading or writing.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pip/_vendor/distlib/compat.py:
  561                  self, ', '.join(map(repr, self.maps)))
  562  
  563:         @classmethod
  564          def fromkeys(cls, iterable, *args):
  565              'Create a ChainMap with a single dict created from the iterable.'
  ...
  847              return self.__class__(self)
  848  
  849:         @classmethod
  850          def fromkeys(cls, iterable, value=None):
  851              '''OD.fromkeys(S[, v]) -> New ordered dictionary with keys from S

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pip/_vendor/distlib/database.py:
  173                  self._cache_egg.generated = True
  174  
  175:     @classmethod
  176      def distinfo_dirname(cls, name, version):
  177          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pip/_vendor/ipaddress.py:
  553                                             expected_len, self._version))
  554  
  555:     @classmethod
  556      def _ip_int_from_prefix(cls, prefixlen):
  557          """Turn the prefix length into a bitwise netmask
  ...
  566          return cls._ALL_ONES ^ (cls._ALL_ONES >> prefixlen)
  567  
  568:     @classmethod
  569      def _prefix_from_ip_int(cls, ip_int):
  570          """Return prefix length from the bitwise netmask.
  ...
  591          return prefixlen
  592  
  593:     @classmethod
  594      def _report_invalid_netmask(cls, netmask_str):
  595          msg = '%r is not a valid netmask' % netmask_str
  596          raise NetmaskValueError(msg)
  597  
  598:     @classmethod
  599      def _prefix_from_prefix_string(cls, prefixlen_str):
  600          """Return prefix length from a numeric string
  ...
  621          return prefixlen
  622  
  623:     @classmethod
  624      def _prefix_from_ip_string(cls, ip_str):
  625          """Turn a netmask/hostmask string into a prefix length
  ...
 1224          return _compat_str(self)
 1225  
 1226:     @classmethod
 1227      def _make_netmask(cls, arg):
 1228          """Make a (netmask, prefix_len) tuple from the given argument.
 ....
 1248          return cls._netmask_cache[arg]
 1249  
 1250:     @classmethod
 1251      def _ip_int_from_string(cls, ip_str):
 1252          """Turn the given IP string into an integer for comparison.
 ....
 1275              raise AddressValueError("%s in %r" % (exc, ip_str))
 1276  
 1277:     @classmethod
 1278      def _parse_octet(cls, octet_str):
 1279          """Convert a decimal octet into an integer.
 ....
 1312          return octet_int
 1313  
 1314:     @classmethod
 1315      def _string_from_ip_int(cls, ip_int):
 1316          """Turns a 32-bit integer into dotted decimal notation.
 ....
 1736      _netmask_cache = {}
 1737  
 1738:     @classmethod
 1739      def _make_netmask(cls, arg):
 1740          """Make a (netmask, prefix_len) tuple from the given argument.
 ....
 1754          return cls._netmask_cache[arg]
 1755  
 1756:     @classmethod
 1757      def _ip_int_from_string(cls, ip_str):
 1758          """Turn an IPv6 ip_str into an integer.
 ....
 1859              raise AddressValueError("%s in %r" % (exc, ip_str))
 1860  
 1861:     @classmethod
 1862      def _parse_hextet(cls, hextet_str):
 1863          """Convert an IPv6 hextet string into an integer.
 ....
 1885          return int(hextet_str, 16)
 1886  
 1887:     @classmethod
 1888      def _compress_hextets(cls, hextets):
 1889          """Compresses a list of hextets.
 ....
 1933          return hextets
 1934  
 1935:     @classmethod
 1936      def _string_from_ip_int(cls, ip_int=None):
 1937          """Turns a 128-bit integer into hexadecimal notation.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pip/_vendor/ordereddict.py:
  107          return self.__class__(self)
  108  
  109:     @classmethod
  110      def fromkeys(cls, iterable, value=None):
  111          d = cls()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pip/_vendor/pkg_resources/__init__.py:
  644              self.add_entry(entry)
  645  
  646:     @classmethod
  647      def _build_master(cls):
  648          """
  ...
  664          return ws
  665  
  666:     @classmethod
  667      def _build_from_requirements(cls, req_spec):
  668          """
  ...
 1578              return stream.read()
 1579  
 1580:     @classmethod
 1581      def _register(cls):
 1582          loader_cls = getattr(importlib_machinery, 'SourceFileLoader',
 ....
 1608      """
 1609  
 1610:     @classmethod
 1611      def build(cls, path):
 1612          """
 ....
 2318      )
 2319  
 2320:     @classmethod
 2321      def parse(cls, src, dist=None):
 2322          """Parse a single entry point from string `src`
 ....
 2338          return cls(res['name'], res['module'], attrs, extras, dist)
 2339  
 2340:     @classmethod
 2341      def _parse_extras(cls, extras_spec):
 2342          if not extras_spec:
 ....
 2347          return req.extras
 2348  
 2349:     @classmethod
 2350      def parse_group(cls, group, lines, dist=None):
 2351          """Parse an entry point group"""
 ....
 2360          return this
 2361  
 2362:     @classmethod
 2363      def parse_map(cls, data, dist=None):
 2364          """Parse a map of entry point groups"""
 ....
 2417          self._provider = metadata or empty_provider
 2418  
 2419:     @classmethod
 2420      def from_location(cls, location, basename, metadata=None, **kw):
 2421          project_name, version, py_version, platform = [None] * 4
 ....
 2609          return getattr(self._provider, attr)
 2610  
 2611:     @classmethod
 2612      def from_filename(cls, filename, metadata=None, **kw):
 2613          return cls.from_location(

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pip/_vendor/pyparsing.py:
  195          self.args = (pstr, loc, msg)
  196  
  197:     @classmethod
  198      def _from_exception(cls, pe):
  199          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pip/_vendor/requests/packages/urllib3/_collections.py:
  305          return list(self.iteritems())
  306  
  307:     @classmethod
  308      def from_httplib(cls, message):  # Python 2
  309          """Read headers from a Python 2 httplib message object."""

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pip/_vendor/requests/packages/urllib3/fields.py:
   69              self.headers = dict(headers)
   70  
   71:     @classmethod
   72      def from_tuples(cls, fieldname, value):
   73          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pip/_vendor/requests/packages/urllib3/packages/ordered_dict.py:
  222          return self.__class__(self)
  223  
  224:     @classmethod
  225      def fromkeys(cls, iterable, value=None):
  226          '''OD.fromkeys(S[, v]) -> New ordered dictionary with keys from S

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pip/_vendor/requests/packages/urllib3/response.py:
  360                      yield data
  361  
  362:     @classmethod
  363      def from_httplib(ResponseCls, r, **response_kw):
  364          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pip/_vendor/requests/packages/urllib3/util/retry.py:
  157          return type(self)(**params)
  158  
  159:     @classmethod
  160      def from_int(cls, retries, redirect=True, default=None):
  161          """ Backwards-compatibility for the old retries format."""

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pip/_vendor/requests/packages/urllib3/util/timeout.py:
  104              type(self).__name__, self._connect, self._read, self.total)
  105  
  106:     @classmethod
  107      def _validate_timeout(cls, value, name):
  108          """ Check that a timeout attribute is valid.
  ...
  138          return value
  139  
  140:     @classmethod
  141      def from_float(cls, timeout):
  142          """ Create a new Timeout from a legacy timeout value.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pip/index.py:
  737          return self.url
  738  
  739:     @classmethod
  740      def get_page(cls, link, skip_archives=True, session=None):
  741          if session is None:

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pip/req/req_install.py:
  135          self.isolated = isolated
  136  
  137:     @classmethod
  138      def from_editable(cls, editable_req, comes_from=None, default_vcs=None,
  139                        isolated=False, options=None, wheel_cache=None,
  ...
  161          return res
  162  
  163:     @classmethod
  164      def from_line(
  165              cls, name, comes_from=None, isolated=False, options=None,

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pip/utils/__init__.py:
  770  class StreamWrapper(StringIO):
  771  
  772:     @classmethod
  773      def from_stream(cls, orig_stream):
  774          cls.orig_stream = orig_stream

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pip/vcs/__init__.py:
  332                  raise  # re-raise exception if a different error occurred
  333  
  334:     @classmethod
  335      def controls_location(cls, location):
  336          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pip/vcs/git.py:
  282          )
  283  
  284:     @classmethod
  285      def controls_location(cls, location):
  286          if super(Git, cls).controls_location(location):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pkg_resources/__init__.py:
  648              self.add_entry(entry)
  649  
  650:     @classmethod
  651      def _build_master(cls):
  652          """
  ...
  668          return ws
  669  
  670:     @classmethod
  671      def _build_from_requirements(cls, req_spec):
  672          """
  ...
 1596              return stream.read()
 1597  
 1598:     @classmethod
 1599      def _register(cls):
 1600          loader_cls = getattr(importlib_machinery, 'SourceFileLoader',
 ....
 1626      """
 1627  
 1628:     @classmethod
 1629      def build(cls, path):
 1630          """
 ....
 2373      )
 2374  
 2375:     @classmethod
 2376      def parse(cls, src, dist=None):
 2377          """Parse a single entry point from string `src`
 ....
 2393          return cls(res['name'], res['module'], attrs, extras, dist)
 2394  
 2395:     @classmethod
 2396      def _parse_extras(cls, extras_spec):
 2397          if not extras_spec:
 ....
 2402          return req.extras
 2403  
 2404:     @classmethod
 2405      def parse_group(cls, group, lines, dist=None):
 2406          """Parse an entry point group"""
 ....
 2415          return this
 2416  
 2417:     @classmethod
 2418      def parse_map(cls, data, dist=None):
 2419          """Parse a map of entry point groups"""
 ....
 2472          self._provider = metadata or empty_provider
 2473  
 2474:     @classmethod
 2475      def from_location(cls, location, basename, metadata=None, **kw):
 2476          project_name, version, py_version, platform = [None] * 4
 ....
 2664          return getattr(self._provider, attr)
 2665  
 2666:     @classmethod
 2667      def from_filename(cls, filename, metadata=None, **kw):
 2668          return cls.from_location(

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pkg_resources/_vendor/pyparsing.py:
  195          self.args = (pstr, loc, msg)
  196  
  197:     @classmethod
  198      def _from_exception(cls, pe):
  199          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/pyparsing.py:
  195          self.args = (pstr, loc, msg)
  196  
  197:     @classmethod
  198      def _from_exception(cls, pe):
  199          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/scipy/_lib/_ccallback.py:
  106          raise ValueError()
  107  
  108:     @classmethod
  109      def from_cython(cls, module, name, user_data=None, signature=None):
  110          """
  ...
  131          return cls(function, user_data, signature)
  132  
  133:     @classmethod
  134      def _parse_callback(cls, obj, user_data=None, signature=None):
  135          _import_cffi()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/scipy/_lib/decorator.py:
  199          return func
  200  
  201:     @classmethod
  202      def create(cls, obj, body, evaldict, defaults=None,
  203                 doc=None, module=None, addsource=True, **attrs):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/scipy/interpolate/_bsplines.py:
  222          self.c = np.ascontiguousarray(self.c, dtype=dt)
  223  
  224:     @classmethod
  225      def construct_fast(cls, t, c, k, extrapolate=True, axis=0):
  226          """Construct a spline without making checks.
  ...
  241          return self.t, self.c, self.k
  242  
  243:     @classmethod
  244      def basis_element(cls, t, extrapolate=True):
  245          """Return a B-spline basis element ``B(x | t[0], ..., t[k+1])``.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/scipy/interpolate/_cubic.py:
  339      # These are inherited from PPoly, but they do not produce an Akima
  340      # interpolator. Hence stub them out.
  341:     @classmethod
  342      def from_spline(cls, tck, extrapolate=None):
  343          raise NotImplementedError("This method does not make sense for "
  344                                    "an Akima interpolator.")
  345  
  346:     @classmethod
  347      def from_bernstein_basis(cls, bp, extrapolate=None):
  348          raise NotImplementedError("This method does not make sense for "

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/scipy/interpolate/fitpack2.py:
  188          self._reset_class()
  189  
  190:     @classmethod
  191      def _from_tck(cls, tck, ext=0):
  192          """Construct a spline object from given tck"""
  ...
  938      """
  939  
  940:     @classmethod
  941      def _from_tck(cls, tck):
  942          """Construct a spline object from given tck and degree"""

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/scipy/interpolate/interpolate.py:
  700              return np.float_
  701  
  702:     @classmethod
  703      def construct_fast(cls, c, x, extrapolate=None, axis=0):
  704          """
  ...
 1210          return self.solve(0, discontinuity, extrapolate)
 1211  
 1212:     @classmethod
 1213      def from_spline(cls, tck, extrapolate=None):
 1214          """
 ....
 1238          return cls.construct_fast(cvals, t, extrapolate)
 1239  
 1240:     @classmethod
 1241      def from_bernstein_basis(cls, bp, extrapolate=None):
 1242          """
 ....
 1540      extend.__doc__ = _PPolyBase.extend.__doc__
 1541  
 1542:     @classmethod
 1543      def from_power_basis(cls, pp, extrapolate=None):
 1544          """
 ....
 1571          return cls.construct_fast(c, pp.x, extrapolate, pp.axis)
 1572  
 1573:     @classmethod
 1574      def from_derivatives(cls, xi, yi, orders=None, extrapolate=None):
 1575          """Construct a piecewise polynomial in the Bernstein basis,
 ....
 1897          self.c = np.ascontiguousarray(self.c, dtype=dtype)
 1898  
 1899:     @classmethod
 1900      def construct_fast(cls, c, x, extrapolate=None):
 1901          """
 ....
 2642          return out
 2643  
 2644:     @classmethod
 2645      def fromspline(cls, xk, cvals, order, fill=0.0):
 2646          # Note: this spline representation is incompatible with FITPACK

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/scipy/io/harwell_boeing/_fortran_format_parser.py:
   37  
   38  class IntFormat(object):
   39:     @classmethod
   40      def from_number(cls, n, min=None):
   41          """Given an integer, returns a "reasonable" IntFormat instance to represent
   ..
   97  
   98  class ExpFormat(object):
   99:     @classmethod
  100      def from_number(cls, n, min=None):
  101          """Given a float number, returns a "reasonable" ExpFormat instance to

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/scipy/io/harwell_boeing/hb.py:
   49  
   50  class HBInfo(object):
   51:     @classmethod
   52      def from_data(cls, m, title="Default title", key="0", mxtype=None, fmt=None):
   53          """Create a HBInfo instance from an existing sparse matrix.
   ..
  124              values_fmt.fortran_format)
  125  
  126:     @classmethod
  127      def from_file(cls, fid):
  128          """Create a HBInfo instance from a file object containg a matrix in the
  ...
  385      _f2q_storage = dict([(j, i) for i, j in _q2f_storage.items()])
  386  
  387:     @classmethod
  388      def from_fortran(cls, fmt):
  389          if not len(fmt) == 3:

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/scipy/io/mmio.py:
  147      FORMAT_VALUES = (FORMAT_COORDINATE, FORMAT_ARRAY)
  148  
  149:     @classmethod
  150      def _validate_format(self, format):
  151          if format not in self.FORMAT_VALUES:
  ...
  160      FIELD_VALUES = (FIELD_INTEGER, FIELD_REAL, FIELD_COMPLEX, FIELD_PATTERN)
  161  
  162:     @classmethod
  163      def _validate_field(self, field):
  164          if field not in self.FIELD_VALUES:
  ...
  174                         SYMMETRY_SKEW_SYMMETRIC, SYMMETRY_HERMITIAN)
  175  
  176:     @classmethod
  177      def _validate_symmetry(self, symmetry):
  178          if symmetry not in self.SYMMETRY_VALUES:
  ...
  196  
  197      # -------------------------------------------------------------------------
  198:     @classmethod
  199      def info(self, source):
  200          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/scipy/linalg/tests/test_decomp.py:
 2060  
 2061  class TestOrdQZ(TestCase):
 2062:     @classmethod
 2063      def setupClass(cls):
 2064          # http://www.nag.com/lapack-ex/node119.html

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/scipy/special/generate_ufuncs.py:
  815              return "%s%s" % (prefix, c_base_name,)
  816  
  817:     @classmethod
  818      def parse_all(cls, ufunc_str):
  819          ufuncs = []

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/scipy/stats/tests/test_binned_statistic.py:
   12  class TestBinnedStatistic(object):
   13  
   14:     @classmethod
   15      def setup_class(cls):
   16          np.random.seed(9865)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/setuptools/__init__.py:
   37      """
   38  
   39:     @classmethod
   40      def find(cls, where='.', exclude=(), include=('*',)):
   41          """Return a list all Python packages found within directory 'where'
   ..
   60              cls._build_filter(*include)))
   61  
   62:     @classmethod
   63      def _find_packages_iter(cls, where, exclude, include):
   64          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/setuptools/command/easy_install.py:
 1647  
 1648  class RewritePthDistributions(PthDistributions):
 1649:     @classmethod
 1650      def _wrap_lines(cls, lines):
 1651          yield cls.prelude
 ....
 1935      split_args = dict()
 1936  
 1937:     @classmethod
 1938      def best(cls):
 1939          """
 ....
 1942          return cls
 1943  
 1944:     @classmethod
 1945      def _sys_executable(cls):
 1946          _default = os.path.normpath(sys.executable)
 1947          return os.environ.get('__PYVENV_LAUNCHER__', _default)
 1948  
 1949:     @classmethod
 1950      def from_param(cls, param):
 1951          """
 ....
 1962          return cls.from_string(param)
 1963  
 1964:     @classmethod
 1965      def from_environment(cls):
 1966          return cls([cls._sys_executable()])
 1967  
 1968:     @classmethod
 1969      def from_string(cls, string):
 1970          """
 ....
 2039      command_spec_class = CommandSpec
 2040  
 2041:     @classmethod
 2042      def get_script_args(cls, dist, executable=None, wininst=False):
 2043          # for backward compatibility
 ....
 2047          return writer.get_args(dist, header)
 2048  
 2049:     @classmethod
 2050      def get_script_header(cls, script_text, executable=None, wininst=False):
 2051          # for backward compatibility
 ....
 2057          return cmd.as_header()
 2058  
 2059:     @classmethod
 2060      def get_args(cls, dist, header=None):
 2061          """
 ....
 2084              raise ValueError("Path separators not allowed in script names")
 2085  
 2086:     @classmethod
 2087      def get_writer(cls, force_windows):
 2088          # for backward compatibility
 ....
 2090          return WindowsScriptWriter.best() if force_windows else cls.best()
 2091  
 2092:     @classmethod
 2093      def best(cls):
 2094          """
 ....
 2100              return cls
 2101  
 2102:     @classmethod
 2103      def _get_script_args(cls, type_, name, header, script_text):
 2104          # Simply write the stub with no extension.
 2105          yield (name, header + script_text)
 2106  
 2107:     @classmethod
 2108      def get_header(cls, script_text="", executable=None):
 2109          """Create a #! line, getting options (if any) from script_text"""
 ....
 2116      command_spec_class = WindowsCommandSpec
 2117  
 2118:     @classmethod
 2119      def get_writer(cls):
 2120          # for backward compatibility
 ....
 2122          return cls.best()
 2123  
 2124:     @classmethod
 2125      def best(cls):
 2126          """
 ....
 2135          return writer_lookup[launcher]
 2136  
 2137:     @classmethod
 2138      def _get_script_args(cls, type_, name, header, script_text):
 2139          "For Windows, add a .py extension"
 ....
 2151          yield name + ext, header + script_text, 't', blockers
 2152  
 2153:     @classmethod
 2154      def _adjust_header(cls, type_, orig_header):
 2155          """
 ....
 2179  
 2180  class WindowsExecutableLauncherWriter(WindowsScriptWriter):
 2181:     @classmethod
 2182      def _get_script_args(cls, type_, name, header, script_text):
 2183          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/setuptools/command/upload_docs.py:
  123                  yield b'\n'  # write an extra newline (lurve Macs)
  124  
  125:     @classmethod
  126      def _build_multipart(cls, data):
  127          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/setuptools/config.py:
  189          self.set_options.append(option_name)
  190  
  191:     @classmethod
  192      def _parse_list(cls, value, separator=','):
  193          """Represents value as a list.
  ...
  209          return [chunk.strip() for chunk in value if chunk.strip()]
  210  
  211:     @classmethod
  212      def _parse_dict(cls, value):
  213          """Represents value as a dict.
  ...
  227          return result
  228  
  229:     @classmethod
  230      def _parse_bool(cls, value):
  231          """Represents value as boolean.
  ...
  237          return value in ('1', 'true', 'yes')
  238  
  239:     @classmethod
  240      def _parse_file(cls, value):
  241          """Represents value as a string, allowing including text
  ...
  280              return f.read()
  281  
  282:     @classmethod
  283      def _parse_attr(cls, value):
  284          """Represents value as a module attribute.
  ...
  311          return value
  312  
  313:     @classmethod
  314      def _get_parser_compound(cls, *parse_methods):
  315          """Returns parser function to represents value as a list.
  ...
  330          return parse
  331  
  332:     @classmethod
  333      def _parse_section_to_dict(cls, section_options, values_parser=None):
  334          """Parses section options into a dictionary.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/setuptools/package_index.py:
  265          self.expected = expected
  266  
  267:     @classmethod
  268      def from_url(cls, url):
  269          "Construct a (possibly null) ContentChecker from a URL"

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/base.py:
  183      """
  184  
  185:     @classmethod
  186      def _get_param_names(cls):
  187          """Get parameter names for the estimator"""

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/sklearn/externals/funcsigs.py:
  507          self._return_annotation = return_annotation
  508  
  509:     @classmethod
  510      def from_function(cls, func):
  511          '''Constructs Signature for the given python function'''

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/base/data.py:
  176  
  177  
  178:     @classmethod
  179      def _drop_nans(cls, x, nan_mask):
  180          return x[nan_mask]
  181  
  182:     @classmethod
  183      def _drop_nans_2d(cls, x, nan_mask):
  184          return x[nan_mask][:, nan_mask]
  185  
  186:     @classmethod
  187      def handle_missing(cls, endog, exog, missing, **kwargs):
  188          """
  ...
  473          return super(PandasData, self)._convert_endog_exog(endog, exog)
  474  
  475:     @classmethod
  476      def _drop_nans(cls, x, nan_mask):
  477          if hasattr(x, 'ix'):
  ...
  480              return super(PandasData, cls)._drop_nans(x, nan_mask)
  481  
  482:     @classmethod
  483      def _drop_nans_2d(cls, x, nan_mask):
  484          if hasattr(x, 'ix'):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/base/model.py:
   98          return data
   99  
  100:     @classmethod
  101      def from_formula(cls, formula, data, subset=None, drop_cols=None, *args, **kwargs):
  102          """
  ...
 1719          save_pickle(self, fname)
 1720  
 1721:     @classmethod
 1722      def load(cls, fname):
 1723          '''

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/base/tests/test_data.py:
    8  
    9  #class TestDates(object):
   10: #    @classmethod
   11  #    def setupClass(cls):
   12  #        nrows = 10
   ..
   18  
   19  class TestArrays(object):
   20:     @classmethod
   21      def setupClass(cls):
   22          cls.endog = np.random.random(10)
   ..
   63  
   64  class TestArrays2dEndog(TestArrays):
   65:     @classmethod
   66      def setupClass(cls):
   67          super(TestArrays2dEndog, cls).setupClass()
   ..
   77  
   78  class TestArrays1dExog(TestArrays):
   79:     @classmethod
   80      def setupClass(cls):
   81          super(TestArrays1dExog, cls).setupClass()
   ..
   93  
   94  class TestDataFrames(TestArrays):
   95:     @classmethod
   96      def setupClass(cls):
   97          cls.endog = pandas.DataFrame(np.random.random(10), columns=['y_1'])
   ..
  139  
  140  class TestLists(TestArrays):
  141:     @classmethod
  142      def setupClass(cls):
  143          super(TestLists, cls).setupClass()
  ...
  148  
  149  class TestRecarrays(TestArrays):
  150:     @classmethod
  151      def setupClass(cls):
  152          super(TestRecarrays, cls).setupClass()
  ...
  167  
  168  class TestStructarrays(TestArrays):
  169:     @classmethod
  170      def setupClass(cls):
  171          super(TestStructarrays, cls).setupClass()
  ...
  186  
  187  class TestListDataFrame(TestDataFrames):
  188:     @classmethod
  189      def setupClass(cls):
  190          cls.endog = np.random.random(10).tolist()
  ...
  221  
  222  class TestDataFrameList(TestDataFrames):
  223:     @classmethod
  224      def setupClass(cls):
  225          cls.endog = pandas.DataFrame(np.random.random(10), columns=['y_1'])
  ...
  256  
  257  class TestArrayDataFrame(TestDataFrames):
  258:     @classmethod
  259      def setupClass(cls):
  260          cls.endog = np.random.random(10)
  ...
  291  
  292  class TestDataFrameArray(TestDataFrames):
  293:     @classmethod
  294      def setupClass(cls):
  295          cls.endog = pandas.DataFrame(np.random.random(10), columns=['y_1'])
  ...
  326  
  327  class TestSeriesDataFrame(TestDataFrames):
  328:     @classmethod
  329      def setupClass(cls):
  330          cls.endog = pandas.Series(np.random.random(10), name='y_1')
  ...
  357  
  358  class TestSeriesSeries(TestDataFrames):
  359:     @classmethod
  360      def setupClass(cls):
  361          cls.endog = pandas.Series(np.random.random(10), name='y_1')
  ...
  410  
  411  class TestMultipleEqsArrays(TestArrays):
  412:     @classmethod
  413      def setupClass(cls):
  414          cls.endog = np.random.random((10,4))
  ...
  445  
  446  class TestMultipleEqsDataFrames(TestDataFrames):
  447:     @classmethod
  448      def setupClass(cls):
  449          cls.endog = endog = pandas.DataFrame(np.random.random((10,4)),
  ...
  496  
  497  class TestMissingArray(object):
  498:     @classmethod
  499      def setupClass(cls):
  500          X = np.random.random((25,4))
  ...
  562  
  563  class TestMissingPandas(object):
  564:     @classmethod
  565      def setupClass(cls):
  566          X = np.random.random((25,4))
  ...
  624  
  625  class TestConstant(object):
  626:     @classmethod
  627      def setupClass(cls):
  628          from statsmodels.datasets.longley import load_pandas
  ...
  737  
  738  
  739:     @classmethod
  740      def setup_class(cls):
  741          # create data

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/base/tests/test_generic_methods.py:
   34          self.predict_kwds = {}
   35  
   36:     @classmethod
   37      def setup_class(self):
   38  
   ..
  354  class CheckAnovaMixin(object):
  355  
  356:     @classmethod
  357      def setup_class(cls):
  358          import statsmodels.stats.tests.test_anova as ttmod
  ...
  420  class TestWaldAnovaOLS(CheckAnovaMixin):
  421  
  422:     @classmethod
  423      def initialize(cls):
  424          from statsmodels.formula.api import ols, glm, poisson
  ...
  446  class TestWaldAnovaOLSF(CheckAnovaMixin):
  447  
  448:     @classmethod
  449      def initialize(cls):
  450          from statsmodels.formula.api import ols, glm, poisson
  ...
  474  class TestWaldAnovaGLM(CheckAnovaMixin):
  475  
  476:     @classmethod
  477      def initialize(cls):
  478          from statsmodels.formula.api import ols, glm, poisson
  ...
  485  class TestWaldAnovaPoisson(CheckAnovaMixin):
  486  
  487:     @classmethod
  488      def initialize(cls):
  489          from statsmodels.discrete.discrete_model import Poisson
  ...
  495  class TestWaldAnovaNegBin(CheckAnovaMixin):
  496  
  497:     @classmethod
  498      def initialize(cls):
  499          from statsmodels.discrete.discrete_model import NegativeBinomial
  ...
  507  class TestWaldAnovaNegBin1(CheckAnovaMixin):
  508  
  509:     @classmethod
  510      def initialize(cls):
  511          from statsmodels.discrete.discrete_model import NegativeBinomial
  ...
  519  class T_estWaldAnovaOLSNoFormula(object):
  520  
  521:     @classmethod
  522      def initialize(cls):
  523          from statsmodels.formula.api import ols, glm, poisson

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/base/tests/test_shrink_pickle.py:
   33          self.predict_kwds = {}
   34  
   35:     @classmethod
   36      def setup_class(self):
   37  
   ..
  215  
  216  class TestPickleFormula(RemoveDataPickle):
  217:     @classmethod
  218      def setup_class(cls):
  219          nobs = 10000
  ...
  236  
  237  class TestPickleFormula2(RemoveDataPickle):
  238:     @classmethod
  239      def setup_class(cls):
  240          nobs = 500

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/base/wrapper.py:
   72          save_pickle(self, fname)
   73  
   74:     @classmethod
   75      def load(cls, fname):
   76          from statsmodels.iolib.smpickle import load_pickle

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/compat/counter.py:
   68      # Override dict methods where the meaning changes for Counter objects.
   69  
   70:     @classmethod
   71      def fromkeys(cls, iterable, v=None):
   72          raise NotImplementedError(

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/compat/ordereddict.py:
  225          return self.__class__(self)
  226  
  227:     @classmethod
  228      def fromkeys(cls, iterable, value=None):
  229          '''OD.fromkeys(S[, v]) -> New ordered dictionary with keys from S

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/datasets/tests/test_data.py:
   17  class TestDatasets(object):
   18  
   19:     @classmethod
   20      def setup_class(cls):
   21          exclude = ['check_internet', 'clear_data_home', 'get_data_home',

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/discrete/tests/test_constrained.py:
  124  class TestPoissonConstrained1a(CheckPoissonConstrainedMixin):
  125  
  126:     @classmethod
  127      def setup_class(cls):
  128  
  ...
  165  class TestPoissonConstrained1b(CheckPoissonConstrainedMixin):
  166  
  167:     @classmethod
  168      def setup_class(cls):
  169  
  ...
  192  class TestPoissonConstrained1c(CheckPoissonConstrainedMixin):
  193  
  194:     @classmethod
  195      def setup_class(cls):
  196  
  ...
  218  class TestPoissonNoConstrained(CheckPoissonConstrainedMixin):
  219  
  220:     @classmethod
  221      def setup_class(cls):
  222  
  ...
  237  class TestPoissonConstrained2a(CheckPoissonConstrainedMixin):
  238  
  239:     @classmethod
  240      def setup_class(cls):
  241  
  ...
  269  class TestPoissonConstrained2b(CheckPoissonConstrainedMixin):
  270  
  271:     @classmethod
  272      def setup_class(cls):
  273  
  ...
  297  class TestPoissonConstrained2c(CheckPoissonConstrainedMixin):
  298  
  299:     @classmethod
  300      def setup_class(cls):
  301  
  ...
  325  class TestGLMPoissonConstrained1a(CheckPoissonConstrainedMixin):
  326  
  327:     @classmethod
  328      def setup_class(cls):
  329          from statsmodels.base._constraints import fit_constrained
  ...
  347  class TestGLMPoissonConstrained1b(CheckPoissonConstrainedMixin):
  348  
  349:     @classmethod
  350      def setup_class(cls):
  351          from statsmodels.genmod.generalized_linear_model import GLM
  ...
  423  class TestGLMLogitConstrained1(CheckGLMConstrainedMixin):
  424  
  425:     @classmethod
  426      def setup_class(cls):
  427          cls.idx = slice(None)
  ...
  444  class TestGLMLogitConstrained2(CheckGLMConstrainedMixin):
  445  
  446:     @classmethod
  447      def setup_class(cls):
  448          cls.idx = slice(None)  # params sequence same as Stata

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/discrete/tests/test_discrete.py:
  315  class TestProbitNewton(CheckBinaryResults):
  316  
  317:     @classmethod
  318      def setupClass(cls):
  319          data = sm.datasets.spector.load()
  ...
  330  class TestProbitBFGS(CheckBinaryResults):
  331  
  332:     @classmethod
  333      def setupClass(cls):
  334          data = sm.datasets.spector.load()
  ...
  342  
  343  class TestProbitNM(CheckBinaryResults):
  344:     @classmethod
  345      def setupClass(cls):
  346          data = sm.datasets.spector.load()
  ...
  353  
  354  class TestProbitPowell(CheckBinaryResults):
  355:     @classmethod
  356      def setupClass(cls):
  357          data = sm.datasets.spector.load()
  ...
  364  
  365  class TestProbitCG(CheckBinaryResults):
  366:     @classmethod
  367      def setupClass(cls):
  368          data = sm.datasets.spector.load()
  ...
  391  
  392  class TestProbitNCG(CheckBinaryResults):
  393:     @classmethod
  394      def setupClass(cls):
  395          data = sm.datasets.spector.load()
  ...
  404  
  405  class TestProbitBasinhopping(CheckBinaryResults):
  406:     @classmethod
  407      def setupClass(cls):
  408          if not has_basinhopping:
  ...
  447  
  448  class TestProbitL1(CheckLikelihoodModelL1):
  449:     @classmethod
  450      def setupClass(cls):
  451          data = sm.datasets.spector.load()
  ...
  465  
  466  class TestMNLogitL1(CheckLikelihoodModelL1):
  467:     @classmethod
  468      def setupClass(cls):
  469          anes_data = sm.datasets.anes96.load()
  ...
  482  
  483  class TestLogitL1(CheckLikelihoodModelL1):
  484:     @classmethod
  485      def setupClass(cls):
  486          data = sm.datasets.spector.load()
  ...
  500  
  501  class TestCVXOPT(object):
  502:     @classmethod
  503      def setupClass(self):
  504          self.data = sm.datasets.spector.load()
  ...
  521  
  522  class TestSweepAlphaL1(object):
  523:     @classmethod
  524      def setupClass(cls):
  525          data = sm.datasets.spector.load()
  ...
  598  
  599  class TestPoissonL1Compatability(CheckL1Compatability):
  600:     @classmethod
  601      def setupClass(cls):
  602          cls.kvars = 10 # Number of variables
  ...
  618  
  619  class TestNegativeBinomialL1Compatability(CheckL1Compatability):
  620:     @classmethod
  621      def setupClass(cls):
  622          cls.kvars = 10 # Number of variables
  ...
  643  
  644  class TestNegativeBinomialGeoL1Compatability(CheckL1Compatability):
  645:     @classmethod
  646      def setupClass(cls):
  647          cls.kvars = 10 # Number of variables
  ...
  668  
  669  class TestLogitL1Compatability(CheckL1Compatability):
  670:     @classmethod
  671      def setupClass(cls):
  672          cls.kvars = 4 # Number of variables
  ...
  685  
  686  class TestMNLogitL1Compatability(CheckL1Compatability):
  687:     @classmethod
  688      def setupClass(cls):
  689          cls.kvars = 4 # Number of variables
  ...
  715  
  716  class TestProbitL1Compatability(CheckL1Compatability):
  717:     @classmethod
  718      def setupClass(cls):
  719          cls.kvars = 4 # Number of variables
  ...
  764      Compares l1 model with alpha = 0 to the unregularized model.
  765      """
  766:     @classmethod
  767      def setupClass(cls):
  768          data = sm.datasets.spector.load()
  ...
  778      Compares l1 model with alpha = 0 to the unregularized model.
  779      """
  780:     @classmethod
  781      def setupClass(cls):
  782          data = sm.datasets.spector.load()
  ...
  789  
  790  class TestL1AlphaZeroMNLogit(CompareL1):
  791:     @classmethod
  792      def setupClass(cls):
  793          data = sm.datasets.anes96.load()
  ...
  802  
  803  class TestLogitNewton(CheckBinaryResults, CheckMargEff):
  804:     @classmethod
  805      def setupClass(cls):
  806          data = sm.datasets.spector.load()
  ...
  845  
  846  class TestLogitBFGS(CheckBinaryResults, CheckMargEff):
  847:     @classmethod
  848      def setupClass(cls):
  849          data = sm.datasets.spector.load()
  ...
  855  
  856  class TestPoissonNewton(CheckModelResults):
  857:     @classmethod
  858      def setupClass(cls):
  859          data = sm.datasets.randhie.load()
  ...
  891  
  892  class TestNegativeBinomialNB2Newton(CheckModelResults):
  893:     @classmethod
  894      def setupClass(cls):
  895          data = sm.datasets.randhie.load()
  ...
  943  
  944  class TestNegativeBinomialNB1Newton(CheckModelResults):
  945:     @classmethod
  946      def setupClass(cls):
  947          data = sm.datasets.randhie.load()
  ...
  983  
  984  class TestNegativeBinomialNB2BFGS(CheckModelResults):
  985:     @classmethod
  986      def setupClass(cls):
  987          data = sm.datasets.randhie.load()
  ...
 1038  
 1039  class TestNegativeBinomialNB1BFGS(CheckModelResults):
 1040:     @classmethod
 1041      def setupClass(cls):
 1042          data = sm.datasets.randhie.load()
 ....
 1084      """
 1085  
 1086:     @classmethod
 1087      def setupClass(cls):
 1088          data = sm.datasets.randhie.load()
 ....
 1248  
 1249  class TestMNLogitNewtonBaseZero(CheckMNLogitBaseZero):
 1250:     @classmethod
 1251      def setupClass(cls):
 1252  
 ....
 1261  
 1262  class TestMNLogitLBFGSBaseZero(CheckMNLogitBaseZero):
 1263:     @classmethod
 1264      def setupClass(cls):
 1265          data = sm.datasets.anes96.load()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/discrete/tests/test_sandwich_cov.py:
   65          assert_allclose(self.bse_rob / self.corr_fact, res2_bse, 6e-5)
   66  
   67:     @classmethod
   68      def get_robust_clu(cls):
   69          res1 = cls.res1
   ..
   96  class TestPoissonClu(CheckCountRobustMixin):
   97  
   98:     @classmethod
   99      def setup_class(cls):
  100          cls.res2 = results_st.results_poisson_clu
  ...
  106  class TestPoissonCluGeneric(CheckCountRobustMixin):
  107  
  108:     @classmethod
  109      def setup_class(cls):
  110          cls.res2 = results_st.results_poisson_clu
  ...
  143  class TestPoissonHC1Generic(CheckCountRobustMixin):
  144  
  145:     @classmethod
  146      def setup_class(cls):
  147          cls.res2 = results_st.results_poisson_hc1
  ...
  162  class TestPoissonCluFit(CheckCountRobustMixin):
  163  
  164:     @classmethod
  165      def setup_class(cls):
  166  
  ...
  207  class TestPoissonHC1Fit(CheckCountRobustMixin):
  208  
  209:     @classmethod
  210      def setup_class(cls):
  211          cls.res2 = results_st.results_poisson_hc1
  ...
  222  class TestPoissonHC1FitExposure(CheckCountRobustMixin):
  223  
  224:     @classmethod
  225      def setup_class(cls):
  226          cls.res2 = results_st.results_poisson_exposure_hc1
  ...
  238  class TestPoissonCluExposure(CheckCountRobustMixin):
  239  
  240:     @classmethod
  241      def setup_class(cls):
  242          cls.res2 = results_st.results_poisson_exposure_clu #nonrobust
  ...
  248  class TestPoissonCluExposureGeneric(CheckCountRobustMixin):
  249  
  250:     @classmethod
  251      def setup_class(cls):
  252          cls.res2 = results_st.results_poisson_exposure_clu #nonrobust
  ...
  275  class TestGLMPoissonClu(CheckCountRobustMixin):
  276  
  277:     @classmethod
  278      def setup_class(cls):
  279          cls.res2 = results_st.results_poisson_clu
  ...
  286  class TestGLMPoissonCluGeneric(CheckCountRobustMixin):
  287  
  288:     @classmethod
  289      def setup_class(cls):
  290          cls.res2 = results_st.results_poisson_clu
  ...
  310  class TestGLMPoissonHC1Generic(CheckCountRobustMixin):
  311  
  312:     @classmethod
  313      def setup_class(cls):
  314          cls.res2 = results_st.results_poisson_hc1
  ...
  328  class TestGLMPoissonCluFit(CheckCountRobustMixin):
  329  
  330:     @classmethod
  331      def setup_class(cls):
  332          cls.res2 = results_st.results_poisson_clu
  ...
  356  class TestGLMPoissonHC1Fit(CheckCountRobustMixin):
  357  
  358:     @classmethod
  359      def setup_class(cls):
  360          cls.res2 = results_st.results_poisson_hc1
  ...
  371  class TestNegbinClu(CheckCountRobustMixin):
  372  
  373:     @classmethod
  374      def setup_class(cls):
  375          cls.res2 = results_st.results_negbin_clu
  ...
  381  class TestNegbinCluExposure(CheckCountRobustMixin):
  382  
  383:     @classmethod
  384      def setup_class(cls):
  385          cls.res2 = results_st.results_negbin_exposure_clu #nonrobust
  ...
  405  class TestNegbinCluGeneric(CheckCountRobustMixin):
  406  
  407:     @classmethod
  408      def setup_class(cls):
  409          cls.res2 = results_st.results_negbin_clu
  ...
  429  class TestNegbinCluFit(CheckCountRobustMixin):
  430  
  431:     @classmethod
  432      def setup_class(cls):
  433          cls.res2 = results_st.results_negbin_clu
  ...
  451  class TestNegbinCluExposureFit(CheckCountRobustMixin):
  452  
  453:     @classmethod
  454      def setup_class(cls):
  455          cls.res2 = results_st.results_negbin_exposure_clu #nonrobust
  ...
  492  class TestGLMLogit(CheckDiscreteGLM):
  493  
  494:     @classmethod
  495      def setup_class(cls):
  496          endog_bin = (endog > endog.mean()).astype(int)
  ...
  507      # invalid link. What's Probit as GLM?
  508  
  509:     @classmethod
  510      def setup_class(cls):
  511          endog_bin = (endog > endog.mean()).astype(int)
  ...
  521  class TestGLMGaussNonRobust(CheckDiscreteGLM):
  522  
  523:     @classmethod
  524      def setup_class(cls):
  525          cls.cov_type = 'nonrobust'
  ...
  534  class TestGLMGaussClu(CheckDiscreteGLM):
  535  
  536:     @classmethod
  537      def setup_class(cls):
  538          cls.cov_type = 'cluster'
  ...
  547  class TestGLMGaussHC(CheckDiscreteGLM):
  548  
  549:     @classmethod
  550      def setup_class(cls):
  551          cls.cov_type = 'HC0'
  ...
  560  class TestGLMGaussHAC(CheckDiscreteGLM):
  561  
  562:     @classmethod
  563      def setup_class(cls):
  564  
  ...
  575  class TestGLMGaussHACUniform(CheckDiscreteGLM):
  576  
  577:     @classmethod
  578      def setup_class(cls):
  579  
  ...
  618  class TestGLMGaussHACPanel(CheckDiscreteGLM):
  619  
  620:     @classmethod
  621      def setup_class(cls):
  622          cls.cov_type = 'hac-panel'
  ...
  642  class TestGLMGaussHACPanelGroups(CheckDiscreteGLM):
  643  
  644:     @classmethod
  645      def setup_class(cls):
  646          cls.cov_type = 'hac-panel'
  ...
  661  class TestGLMGaussHACGroupsum(CheckDiscreteGLM):
  662  
  663:     @classmethod
  664      def setup_class(cls):
  665          cls.cov_type = 'hac-groupsum'

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/duration/hazard_regression.py:
  343          self.ties = ties
  344  
  345:     @classmethod
  346      def from_formula(cls, formula, data, status=None, entry=None,
  347                       strata=None, offset=None, subset=None,

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/formula/tests/test_formula.py:
   16  class CheckFormulaOLS(object):
   17  
   18:     @classmethod
   19      def setupClass(cls):
   20          cls.data = load()
   ..
   46  
   47  class TestFormulaPandas(CheckFormulaOLS):
   48:     @classmethod
   49      def setupClass(cls):
   50          data = load_pandas().data
   ..
   54  
   55  class TestFormulaDict(CheckFormulaOLS):
   56:     @classmethod
   57      def setupClass(cls):
   58          data = dict((k, v.tolist()) for k, v in iteritems(load_pandas().data))
   ..
   62  
   63  class TestFormulaRecArray(CheckFormulaOLS):
   64:     @classmethod
   65      def setupClass(cls):
   66          data = load().data

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/genmod/generalized_estimating_equations.py:
  605      # Override to allow groups and time to be passed as variable
  606      # names.
  607:     @classmethod
  608      def from_formula(cls, formula, groups, data, subset=None,
  609                       time=None, offset=None, exposure=None,

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/genmod/tests/test_gee.py:
 1458  class TestGEEPoissonCovType(CheckConsistency):
 1459  
 1460:     @classmethod
 1461      def setup_class(cls):
 1462  
 ....
 1490  class TestGEEPoissonFormulaCovType(CheckConsistency):
 1491  
 1492:     @classmethod
 1493      def setup_class(cls):
 1494  
 ....
 1513  class TestGEEOrdinalCovType(CheckConsistency):
 1514  
 1515:     @classmethod
 1516      def setup_class(cls):
 1517  
 ....
 1547  class TestGEEMultinomialCovType(CheckConsistency):
 1548  
 1549:     @classmethod
 1550      def setup_class(cls):
 1551  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/genmod/tests/test_glm.py:
  637  
  638  class TestGlmPoissonOffset(CheckModelResultsMixin):
  639:     @classmethod
  640      def setupClass(cls):
  641          from .results.results_glm import Cpunish_offset
  ...
 1471  
 1472  class TestTweediePower15(CheckTweedie):
 1473:     @classmethod
 1474      def setupClass(self):
 1475          from .results.results_glm import CpunishTweediePower15
 ....
 1486  
 1487  class TestTweediePower2(CheckTweedie):
 1488:     @classmethod
 1489      def setupClass(self):
 1490          from .results.results_glm import CpunishTweediePower2
 ....
 1501  
 1502  class TestTweedieLog1(CheckTweedie):
 1503:     @classmethod
 1504      def setupClass(self):
 1505          from .results.results_glm import CpunishTweedieLog1
 ....
 1516  
 1517  class TestTweedieLog15Fair(CheckTweedie):
 1518:     @classmethod
 1519      def setupClass(self):
 1520          from .results.results_glm import FairTweedieLog15
 ....
 1547  
 1548  class TestTweedieSpecialLog0(CheckTweedieSpecial):
 1549:     @classmethod
 1550      def setupClass(self):
 1551          from statsmodels.datasets.cpunish import load_pandas
 ....
 1564  
 1565  class TestTweedieSpecialLog1(CheckTweedieSpecial):
 1566:     @classmethod
 1567      def setupClass(self):
 1568          from statsmodels.datasets.cpunish import load_pandas
 ....
 1581  
 1582  class TestTweedieSpecialLog2(CheckTweedieSpecial):
 1583:     @classmethod
 1584      def setupClass(self):
 1585          from statsmodels.datasets.cpunish import load_pandas
 ....
 1598  
 1599  class TestTweedieSpecialLog3(CheckTweedieSpecial):
 1600:     @classmethod
 1601      def setupClass(self):
 1602          from statsmodels.datasets.cpunish import load_pandas

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/genmod/tests/test_glm_weights.py:
   55  
   56  class TestGlmPoissonPlain(CheckWeight):
   57:     @classmethod
   58      def setupClass(cls):
   59          self = cls # alias
   ..
   67  
   68  class TestGlmPoissonFwNr(CheckWeight):
   69:     @classmethod
   70      def setupClass(cls):
   71          self = cls # alias
   ..
   82  
   83  class TestGlmPoissonAwNr(CheckWeight):
   84:     @classmethod
   85      def setupClass(cls):
   86          self = cls # alias
   ..
  101  # prob_weights fail with HC, not properly implemented yet
  102  class T_estGlmPoissonPwNr(CheckWeight):
  103:     @classmethod
  104      def setupClass(cls):
  105          self = cls # alias
  ...
  120  
  121  class TestGlmPoissonFwHC(CheckWeight):
  122:     @classmethod
  123      def setupClass(cls):
  124          self = cls # alias
  ...
  140  # var_weights (aweights fail with HC, not properly implemented yet
  141  class T_estGlmPoissonAwHC(CheckWeight):
  142:     @classmethod
  143      def setupClass(cls):
  144          self = cls # alias
  ...
  160  
  161  class TestGlmPoissonFwClu(CheckWeight):
  162:     @classmethod
  163      def setupClass(cls):
  164          self = cls # alias

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/graphics/tests/test_factorplots.py:
   16  class TestInteractionPlot(object):
   17  
   18:     @classmethod
   19      def setupClass(cls):
   20          if not have_matplotlib:

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/graphics/tests/test_regressionplots.py:
  166  class TestABLine(object):
  167  
  168:     @classmethod
  169      def setupClass(cls):
  170          np.random.seed(12345)
  ...
  209  
  210  class TestABLinePandas(TestABLine):
  211:     @classmethod
  212      def setupClass(cls):
  213          np.random.seed(12345)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/miscmodels/tests/test_generic_mle.py:
   96  class TestMyPareto1(CheckGenericMixin):
   97  
   98:     @classmethod
   99      def setup_class(self):
  100          params = [2, 0, 2]
  ...
  128  
  129  
  130:     @classmethod
  131      def setup_class(self):
  132          params = [2, 0, 2]

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/miscmodels/tests/test_tarma.py:
   45      #regression test for TArma
   46  
   47:     @classmethod
   48      def setup_class(cls):
   49  
   ..
   84      #regression test for TArma
   85  
   86:     @classmethod
   87      def setup_class(cls):
   88  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/miscmodels/tests/test_tmodel.py:
  137  class TestTModel(CheckTLinearModelMixin):
  138  
  139:     @classmethod
  140      def setup_class(cls):
  141          endog = mm.m_marietta
  ...
  154  class TestTModelFixed(object):
  155  
  156:     @classmethod
  157      def setup_class(cls):
  158          endog = mm.m_marietta

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/multivariate/tests/test_pca.py:
   27  
   28  class TestPCA(TestCase):
   29:     @classmethod
   30      def setUpClass(cls):
   31          rs = np.random.RandomState()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/nonparametric/tests/test_kde.py:
   34  class TestKDEExceptions(object):
   35  
   36:     @classmethod
   37      def setupClass(cls):
   38          cls.kde = KDE(Xi)
   ..
   83  
   84  class TestKDEGauss(CheckKDE):
   85:     @classmethod
   86      def setupClass(cls):
   87          res1 = KDE(Xi)
   ..
  124  
  125  class TestKDEEpanechnikov(CheckKDE):
  126:     @classmethod
  127      def setupClass(cls):
  128          res1 = KDE(Xi)
  ...
  132  
  133  class TestKDETriangular(CheckKDE):
  134:     @classmethod
  135      def setupClass(cls):
  136          res1 = KDE(Xi)
  ...
  140  
  141  class TestKDEBiweight(CheckKDE):
  142:     @classmethod
  143      def setupClass(cls):
  144          res1 = KDE(Xi)
  ...
  149  #NOTE: This is a knownfailure due to a definitional difference of Cosine kernel
  150  #class TestKDECosine(CheckKDE):
  151: #    @classmethod
  152  #    def setupClass(cls):
  153  #        res1 = KDE(Xi)
  ...
  159  class TestKdeWeights(CheckKDE):
  160  
  161:     @classmethod
  162      def setupClass(cls):
  163          res1 = KDE(Xi)
  ...
  181  
  182  class TestKDEGaussFFT(CheckKDE):
  183:     @classmethod
  184      def setupClass(cls):
  185          cls.decimal_density = 2 # low accuracy because binning is different
  ...
  192  class CheckKDEWeights(object):
  193  
  194:     @classmethod
  195      def setupClass(cls):
  196          cls.x = x = KDEWResults['x']

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/nonparametric/tests/test_kernel_regression.py:
   10  
   11  class KernelRegressionTestBase(TestCase):
   12:     @classmethod
   13      def setup_class(cls):
   14          nobs = 60

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/regression/mixed_linear_model.py:
  752          return exog_names + param_names + vc_names, exog_re_names, param_names
  753  
  754:     @classmethod
  755      def from_formula(cls, formula, data, re_formula=None, vc_formula=None,
  756                       subset=None, use_sparse=False, *args, **kwargs):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/regression/recursive_ls.py:
   92          self['obs_cov', 0, 0] = 1.
   93  
   94:     @classmethod
   95      def from_formula(cls, formula, data, subset=None):
   96          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/regression/tests/test_glsar_stata.py:
   37  class TestGLSARCorc(CheckStataResultsPMixin):
   38  
   39:     @classmethod
   40      def setup_class(self):
   41          d2 = macrodata.load().data

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/regression/tests/test_quantile_regression.py:
  116  class TestEpanechnikovHsheatherQ75(TestCase, CheckModelResultsMixin):
  117      # Vincent Arel-Bundock also spot-checked q=.1
  118:     @classmethod
  119      def setup_class(cls):
  120          data = sm.datasets.engel.load_pandas().data
  ...
  125  
  126  class TestEpanechnikovBofinger(TestCase, CheckModelResultsMixin):
  127:     @classmethod
  128      def setup_class(cls):
  129          cls.res1, cls.res2 = setup_fun('epa', 'bofinger')
  ...
  131  
  132  class TestEpanechnikovChamberlain(TestCase, CheckModelResultsMixin):
  133:     @classmethod
  134      def setup_class(cls):
  135          cls.res1, cls.res2 = setup_fun('epa', 'chamberlain')
  ...
  137  
  138  class TestEpanechnikovHsheather(TestCase, CheckModelResultsMixin):
  139:     @classmethod
  140      def setup_class(cls):
  141          cls.res1, cls.res2 = setup_fun('epa', 'hsheather')
  ...
  143  
  144  class TestGaussianBofinger(TestCase, CheckModelResultsMixin):
  145:     @classmethod
  146      def setup_class(cls):
  147          cls.res1, cls.res2 = setup_fun('gau', 'bofinger')
  ...
  149  
  150  class TestGaussianChamberlain(TestCase, CheckModelResultsMixin):
  151:     @classmethod
  152      def setup_class(cls):
  153          cls.res1, cls.res2 = setup_fun('gau', 'chamberlain')
  ...
  155  
  156  class TestGaussianHsheather(TestCase, CheckModelResultsMixin):
  157:     @classmethod
  158      def setup_class(cls):
  159          cls.res1, cls.res2 = setup_fun('gau', 'hsheather')
  ...
  161  
  162  class TestBiweightBofinger(TestCase, CheckModelResultsMixin):
  163:     @classmethod
  164      def setup_class(cls):
  165          cls.res1, cls.res2 = setup_fun('biw', 'bofinger')
  ...
  167  
  168  class TestBiweightChamberlain(TestCase, CheckModelResultsMixin):
  169:     @classmethod
  170      def setup_class(cls):
  171          cls.res1, cls.res2 = setup_fun('biw', 'chamberlain')
  ...
  173  
  174  class TestBiweightHsheather(TestCase, CheckModelResultsMixin):
  175:     @classmethod
  176      def setup_class(cls):
  177          cls.res1, cls.res2 = setup_fun('biw', 'hsheather')
  ...
  179  
  180  class TestCosineBofinger(TestCase, CheckModelResultsMixin):
  181:     @classmethod
  182      def setup_class(cls):
  183          cls.res1, cls.res2 = setup_fun('cos', 'bofinger')
  ...
  185  
  186  class TestCosineChamberlain(TestCase, CheckModelResultsMixin):
  187:     @classmethod
  188      def setup_class(cls):
  189          cls.res1, cls.res2 = setup_fun('cos', 'chamberlain')
  ...
  191  
  192  class TestCosineHsheather(TestCase, CheckModelResultsMixin):
  193:     @classmethod
  194      def setup_class(cls):
  195          cls.res1, cls.res2 = setup_fun('cos', 'hsheather')
  ...
  197  
  198  class TestParzeneBofinger(TestCase, CheckModelResultsMixin):
  199:     @classmethod
  200      def setup_class(cls):
  201          cls.res1, cls.res2 = setup_fun('par', 'bofinger')
  ...
  203  
  204  class TestParzeneChamberlain(TestCase, CheckModelResultsMixin):
  205:     @classmethod
  206      def setup_class(cls):
  207          cls.res1, cls.res2 = setup_fun('par', 'chamberlain')
  ...
  209  
  210  class TestParzeneHsheather(TestCase, CheckModelResultsMixin):
  211:     @classmethod
  212      def setup_class(cls):
  213          cls.res1, cls.res2 = setup_fun('par', 'hsheather')
  214  
  215  # class TestTriangleBofinger(TestCase, CheckModelResultsMixin):
  216: #    @classmethod
  217  #    def setup_class(cls):
  218  #        cls.res1, cls.res2 = setup_fun('tri', 'bofinger')
  219  
  220  # class TestTriangleChamberlain(TestCase, CheckModelResultsMixin):
  221: #    @classmethod
  222  #    def setup_class(cls):
  223  #        cls.res1, cls.res2 = setup_fun('tri', 'chamberlain')
  224  
  225  # class TestTriangleHsheather(TestCase, CheckModelResultsMixin):
  226: #    @classmethod
  227  #    def setup_class(cls):
  228  #        cls.res1, cls.res2 = setup_fun('tri', 'hsheather')

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/regression/tests/test_regression.py:
  149  
  150  class TestOLS(CheckRegressionResults):
  151:     @classmethod
  152      def setupClass(cls):
  153          from .results.results_regression import Longley
  ...
  251  
  252  class TestRTO(CheckRegressionResults):
  253:     @classmethod
  254      def setupClass(cls):
  255          from .results.results_regression import LongleyRTO
  ...
  268      Tests f_test vs. RegressionResults
  269      """
  270:     @classmethod
  271      def setupClass(cls):
  272          data = longley.load()
  ...
  296      Ftest1 is from statsmodels.  Results are from Rpy using R's car library.
  297      """
  298:     @classmethod
  299      def setupClass(cls):
  300          data = longley.load()
  ...
  328      made up.  Test values taken from Stata.
  329      """
  330:     @classmethod
  331      def setupClass(cls):
  332          data = longley.load()
  ...
  359  
  360          """
  361:     @classmethod
  362      def setupClass(cls):
  363          data = longley.load()
  ...
  396      Results from RPy using 'car' package.
  397      """
  398:     @classmethod
  399      def setupClass(cls):
  400          R = np.zeros(7)
  ...
  426      These test results were obtained by replication with R.
  427      """
  428:     @classmethod
  429      def setupClass(cls):
  430          from .results.results_regression import LongleyGls
  ...
  489      Test that GLS with no argument is equivalent to OLS.
  490      """
  491:     @classmethod
  492      def setupClass(cls):
  493          data = longley.load()
  ...
  519  class TestLM(object):
  520  
  521:     @classmethod
  522      def setupClass(cls):
  523          # TODO: Test HAC method
  ...
  602  class TestOLS_GLS_WLS_equivalence(object):
  603  
  604:     @classmethod
  605      def setupClass(cls):
  606          data = longley.load()
  ...
  648      # reuse test methods
  649  
  650:     @classmethod
  651      def setupClass(cls):
  652          data = longley.load()
  ...
  675  
  676  class TestNonFit(object):
  677:     @classmethod
  678      def setupClass(cls):
  679          data = longley.load()
  ...
  689  
  690  class TestWLS_CornerCases(object):
  691:     @classmethod
  692      def setupClass(cls):
  693          cls.exog = np.ones((1,))
  ...
  754  
  755  class TestWLSScalarVsArray(CheckRegressionResults):
  756:     @classmethod
  757      def setupClass(cls):
  758          from statsmodels.datasets.longley import load
  ...
  766  
  767  #class TestWLS_GLS(CheckRegressionResults):
  768: #    @classmethod
  769  #    def setupClass(cls):
  770  #        from statsmodels.datasets.ccard import load
  ...
  790  
  791  class TestWLS_OLS(CheckRegressionResults):
  792:     @classmethod
  793      def setupClass(cls):
  794          data = longley.load()
  ...
  802  
  803  class TestGLS_OLS(CheckRegressionResults):
  804:     @classmethod
  805      def setupClass(cls):
  806          data = longley.load()
  ...
  830  
  831  class TestYuleWalker(object):
  832:     @classmethod
  833      def setupClass(cls):
  834          from statsmodels.datasets.sunspots import load
  ...
  844  
  845  class TestDataDimensions(CheckRegressionResults):
  846:     @classmethod
  847      def setupClass(cls):
  848          np.random.seed(54321)
  ...
  866  
  867  class TestGLS_large_data(TestDataDimensions):
  868:     @classmethod
  869      def setupClass(cls):
  870          nobs = 1000
  ...
  889  
  890  class TestNxNx(TestDataDimensions):
  891:     @classmethod
  892      def setupClass(cls):
  893          super(TestNxNx, cls).setupClass()
  ...
  898  
  899  class TestNxOneNx(TestDataDimensions):
  900:     @classmethod
  901      def setupClass(cls):
  902          super(TestNxOneNx, cls).setupClass()
  ...
  907  
  908  class TestNxNxOne(TestDataDimensions):
  909:     @classmethod
  910      def setupClass(cls):
  911          super(TestNxNxOne, cls).setupClass()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/regression/tests/test_robustcov.py:
   91          self.res2 = res.results_hc0
   92  
   93:     @classmethod
   94      def setup_class(cls):
   95          d2 = macrodata.load().data
   ..
  335  
  336  
  337:     @classmethod
  338      def setup_class(cls):
  339          #import pandas as pa
  ...
  691  
  692  
  693:     @classmethod
  694      def setup_class(cls):
  695          #import pandas as pa
  ...
  790  class TestWLSOLSRobustSmall(object):
  791  
  792:     @classmethod
  793      def setup_class(cls):
  794          #import pandas as pa

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/regression/tests/tests_predict.py:
  109  class TestWLSPrediction(object):
  110  
  111:     @classmethod
  112      def setup_class(cls):
  113  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/sandbox/distributions/tests/test_norm_expan.py:
   59      # compare with normal, skew=0, excess_kurtosis=0
   60  
   61:     @classmethod
   62      def setup_class(kls):
   63          kls.scale = 2
   ..
   71      # precision not high enough because of mvsk from data
   72  
   73:     @classmethod
   74      def setup_class(kls):
   75          kls.dist1 = dist1 = stats.norm(1, 2)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/sandbox/nonparametric/tests/test_kernel_extras.py:
    8  
    9  class KernelExtrasTestBase(TestCase):
   10:     @classmethod
   11      def setup_class(cls):
   12          nobs = 60

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/sandbox/panel/correlation_structures.py:
  189              self.k_lags = len(self.ar)
  190  
  191:     @classmethod
  192      def fit(cls, cov, order, **kwds):
  193          rho, sigma = yule_walker_acov(cov, order=order, **kwds)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/sandbox/regression/tests/test_gmm.py:
  154  class TestGMMOLS(object):
  155  
  156:     @classmethod
  157      def setup_class(self):
  158          exog = exog_st  # with const at end
  ...
  238  class TestGMMSt1(CheckGMM):
  239  
  240:     @classmethod
  241      def setup_class(self):
  242          #self.bse_tol = [5e-7, 5e-7]
  ...
  260      #compares has_optimal_weights=True with Stata's has_optimal_weights=False
  261  
  262:     @classmethod
  263      def setup_class(self):
  264          # compare to Stata default options, twostep GMM
  ...
  284      #with Stata default `has_optimal_weights=False`
  285  
  286:     @classmethod
  287      def setup_class(self):
  288          # compare to Stata default options, twostep GMM
  ...
  307  class TestGMMStOnestep(CheckGMM):
  308  
  309:     @classmethod
  310      def setup_class(self):
  311          # compare to Stata default options, onestep GMM
  ...
  343      # matches Stats's defaults wargs={'centered':False}, has_optimal_weights=False
  344  
  345:     @classmethod
  346      def setup_class(self):
  347          # compare to Stata default options, onestep GMM
  ...
  365  class TestGMMStOneiter(CheckGMM):
  366  
  367:     @classmethod
  368      def setup_class(self):
  369          # compare to Stata default options, onestep GMM
  ...
  411  class TestGMMStOneiterNO(CheckGMM):
  412  
  413:     @classmethod
  414      def setup_class(self):
  415          # compare to Stata default options, onestep GMM
  ...
  437  class TestGMMStOneiterNO_Linear(CheckGMM):
  438  
  439:     @classmethod
  440      def setup_class(self):
  441          # compare to Stata default options, onestep GMM
  ...
  467  class TestGMMStOneiterNO_Nonlinear(CheckGMM):
  468  
  469:     @classmethod
  470      def setup_class(self):
  471          # compare to Stata default options, onestep GMM
  ...
  515  class TestGMMStOneiterOLS_Linear(CheckGMM):
  516  
  517:     @classmethod
  518      def setup_class(self):
  519          # replicating OLS by GMM - high agreement
  ...
  552      # of options with Stats
  553  
  554:     @classmethod
  555      def setup_class(self):
  556          # compare to Stata default options, iterative GMM
  ...
  682  class TestIV2SLSSt1(CheckIV2SLS):
  683  
  684:     @classmethod
  685      def setup_class(self):
  686          exog = exog_st  # with const at end

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/sandbox/regression/tests/test_gmm_poisson.py:
  126  class TestGMMAddOnestep(CheckGMM):
  127  
  128:     @classmethod
  129      def setup_class(self):
  130          XLISTEXOG2 = 'aget aget2 educyr actlim totchr'.split()
  ...
  162  class TestGMMAddTwostep(CheckGMM):
  163  
  164:     @classmethod
  165      def setup_class(self):
  166          XLISTEXOG2 = 'aget aget2 educyr actlim totchr'.split()
  ...
  198      #compares has_optimal_weights=True with Stata's has_optimal_weights=False
  199  
  200:     @classmethod
  201      def setup_class(self):
  202          # compare to Stata default options, twostep GMM
  ...
  240      #compares has_optimal_weights=True with Stata's has_optimal_weights=False
  241  
  242:     @classmethod
  243      def setup_class(self):
  244          # compare to Stata default options, twostep GMM
  ...
  282      # agreement is not very high, maybe vce(unadjusted) is different after all
  283  
  284:     @classmethod
  285      def setup_class(self):
  286          # compare to Stata default options, twostep GMM
  ...
  325      #compares my defaults with the same options in Stata
  326  
  327:     @classmethod
  328      def setup_class(self):
  329          # compare to Stata default options, twostep GMM

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/sandbox/tests/test_predict_functional.py:
   21  class TestPredFunc(object):
   22  
   23:     @classmethod
   24      def setup_class(cls):
   25          if pdf_output:
   ..
   27              cls.pdf = PdfPages("predict_functional.pdf")
   28  
   29:     @classmethod
   30      def teardown_class(cls):
   31          if pdf_output:

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/stats/contingency_tables.py:
  140  
  141  
  142:     @classmethod
  143      def from_data(cls, data, shift_zeros=True):
  144          """
  ...
  661  
  662  
  663:     @classmethod
  664      def from_data(cls, data, shift_zeros=True):
  665          """
  ...
  979  
  980  
  981:     @classmethod
  982      def from_data(cls, var1, var2, strata, data):
  983          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/stats/tests/test_anova.py:
   76  
   77  class TestAnovaLM(object):
   78:     @classmethod
   79      def setupClass(cls):
   80          # kidney data taken from JT's course
   ..
   99  
  100  class TestAnovaLMNoconstant(object):
  101:     @classmethod
  102      def setupClass(cls):
  103          # kidney data taken from JT's course

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/stats/tests/test_contrast.py:
    5  
    6  class TestContrast(object):
    7:     @classmethod
    8      def setupClass(cls):
    9          R.seed(54321)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/stats/tests/test_corrpsd.py:
  147  class TestCovPSD(object):
  148  
  149:     @classmethod
  150      def setup_class(cls):
  151          x = np.array([ 1,     0.477, 0.644, 0.478, 0.651, 0.826,
  ...
  176  class TestCorrPSD1(CheckCorrPSDMixin):
  177  
  178:     @classmethod
  179      def setup_class(cls):
  180          x = np.array([ 1,     0.477, 0.644, 0.478, 0.651, 0.826,

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/stats/tests/test_pairwise.py:
  164  class CheckTuckeyHSDMixin(object):
  165  
  166:     @classmethod
  167      def setup_class_(self):
  168          self.mc = MultiComparison(self.endog, self.groups)
  ...
  186  class TestTuckeyHSD2(CheckTuckeyHSDMixin):
  187  
  188:     @classmethod
  189      def setup_class(self):
  190          #balanced case
  ...
  235  class TestTuckeyHSD2Pandas(TestTuckeyHSD2):
  236  
  237:     @classmethod
  238      def setup_class(self):
  239          super(TestTuckeyHSD2Pandas, self).setup_class()
  ...
  289  
  290  class TestTuckeyHSD2s(CheckTuckeyHSDMixin):
  291:     @classmethod
  292      def setup_class(self):
  293          #unbalanced case
  ...
  311  class TestTuckeyHSD3(CheckTuckeyHSDMixin):
  312  
  313:     @classmethod
  314      def setup_class(self):
  315          #SAS case
  ...
  329  class TestTuckeyHSD4(CheckTuckeyHSDMixin):
  330  
  331:     @classmethod
  332      def setup_class(self):
  333          #unbalanced case verified in Matlab

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/stats/tests/test_statstools.py:
  165  
  166  class TestStattools(TestCase):
  167:     @classmethod
  168      def setup_class(cls):
  169          x = np.random.standard_normal(1000)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/stats/tests/test_weightstats.py:
   33  class CheckExternalMixin(object):
   34  
   35:     @classmethod
   36      def get_descriptives(cls, ddof=0):
   37          cls.descriptive = DescrStatsW(cls.data, cls.weights, ddof)
   38  
   39  
   40:     @classmethod
   41      def save_data(cls, fname="data.csv"):
   42          # Utility to get data into another package.
   ..
  100      quantiles = np.r_[-1.81098, -0.84052, 0.32859, 0.77808, 2.93431]
  101  
  102:     @classmethod
  103      def setup_class(cls):
  104          np.random.seed(9876789)
  ...
  119      quantiles = np.r_[0, 1, 5, 8, 9]
  120  
  121:     @classmethod
  122      def setup_class(cls):
  123          np.random.seed(9876789)
  ...
  142      quantiles = np.r_[-1.61593, -1.45576, -0.24356, 0.16770, 1.18791]
  143  
  144:     @classmethod
  145      def setup_class(cls):
  146          np.random.seed(4342)
  ...
  164           np.r_[-1.49263, -1.15403, -0.16231, 0.16464, 1.83062]))
  165  
  166:     @classmethod
  167      def setup_class(cls):
  168          np.random.seed(2249)
  ...
  424  class TestWeightstats1d_ddof(CheckWeightstats1dMixin):
  425  
  426:     @classmethod
  427      def setup_class(self):
  428          np.random.seed(9876789)
  ...
  444  class TestWeightstats2d(CheckWeightstats2dMixin):
  445  
  446:     @classmethod
  447      def setup_class(self):
  448          np.random.seed(9876789)
  ...
  465  class TestWeightstats2d_ddof(CheckWeightstats2dMixin):
  466  
  467:     @classmethod
  468      def setup_class(self):
  469          np.random.seed(9876789)
  ...
  484  class TestWeightstats2d_nobs(CheckWeightstats2dMixin):
  485  
  486:     @classmethod
  487      def setup_class(self):
  488          np.random.seed(9876789)
  ...
  673      # no weights used in tests
  674  
  675:     @classmethod
  676      def setup_class(cls):
  677          cls.x1 = np.array([7.8, 6.6, 6.5, 7.4, 7.3, 7., 6.4, 7.1, 6.7, 7.6, 6.8])

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/stats/weightstats.py:
  732  #        self.nobs2 = d2.sum_weights.astype(float)
  733  
  734:     @classmethod
  735      def from_data(cls, data1, data2, weights1=None, weights2=None, 
  736              ddof1=0, ddof2=0):

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/tools/tests/test_grouputils.py:
  146  
  147  class TestMultiIndexGrouping(CheckGrouping):
  148:     @classmethod
  149      def setupClass(cls):
  150          grun_data = grunfeld.load_pandas().data
  ...
  158  
  159  class TestIndexGrouping(CheckGrouping):
  160:     @classmethod
  161      def setupClass(cls):
  162          grun_data = grunfeld.load_pandas().data

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/tools/tests/test_tools.py:
  479  
  480  class TestNanDot(object):
  481:     @classmethod
  482      def setupClass(cls):
  483          nan = np.nan
  ...
  549  
  550  class TestEnsure2d(TestCase):
  551:     @classmethod
  552      def setUpClass(cls):
  553          x = np.arange(400.0).reshape((100,4))

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/tsa/arima_process.py:
  646          self.nobs = nobs
  647  
  648:     @classmethod
  649      def from_coeffs(cls, arcoefs, macoefs, nobs=100):
  650          """
  ...
  666          return cls(np.r_[1, -arcoefs], np.r_[1, macoefs], nobs=nobs)
  667  
  668:     @classmethod
  669      def from_estimation(cls, model_results, nobs=None):
  670          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/tsa/arma_mle.py:
  371      #TODO: is this needed as a method at all?
  372      #JP: not needed in this form, but can be replace with using the parameters
  373:     @classmethod
  374      def generate_sample(cls, ar, ma, nsample, std=1):
  375          eta = std * np.random.randn(nsample)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/tsa/filters/tests/test_filters.py:
  594  
  595  class TestFilters(object):
  596:     @classmethod
  597      def setupClass(cls):
  598          # even

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/tsa/kalmanf/kalmanfilter.py:
  485      """
  486  
  487:     @classmethod
  488      def T(cls, params, r, k, p): # F in Hamilton
  489          """
  ...
  518          return arr
  519  
  520:     @classmethod
  521      def R(cls, params, r, k, q, p): # R is H in Hamilton
  522          """
  ...
  549          return arr
  550  
  551:     @classmethod
  552      def Z(cls, r):
  553          """
  ...
  569          return arr
  570  
  571:     @classmethod
  572      def geterrors(cls, y, k, k_ar, k_ma, k_lags, nobs, Z_mat, m, R_mat, T_mat,
  573                    paramsdtype):
  ...
  585                              "Please file a bug report" % paramsdtype)
  586  
  587:     @classmethod
  588      def _init_kalman_state(cls, params, arma_model):
  589          """
  ...
  615                 newparams, Z_mat, m, R_mat, T_mat, paramsdtype)
  616  
  617:     @classmethod
  618      def loglike(cls, params, arma_model, set_sigma2=True):
  619          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/tsa/regime_switching/tests/test_markov_autoregression.py:
  213  
  214  class MarkovAutoregression(object):
  215:     @classmethod
  216      def setup_class(cls, true, endog, atol=1e-5, rtol=1e-7, **kwargs):
  217          cls.model = markov_autoregression.MarkovAutoregression(endog, **kwargs)
  ...
  366  class TestHamiltonAR2Short(MarkovAutoregression):
  367      # This is just a set of regression tests
  368:     @classmethod
  369      def setup_class(cls):
  370          true = {
  ...
  473  
  474  class TestHamiltonAR4(MarkovAutoregression):
  475:     @classmethod
  476      def setup_class(cls):
  477          # Results from E-views:
  ...
  524  class TestHamiltonAR2Switch(MarkovAutoregression):
  525      # Results from Stata, see http://www.stata.com/manuals14/tsmswitch.pdf
  526:     @classmethod
  527      def setup_class(cls):
  528          path = os.path.join(current_path, 'results',
  ...
  630  
  631  class TestHamiltonAR1Switch(MarkovAutoregression):
  632:     @classmethod
  633      def setup_class(cls):
  634          # Results from E-views:
  ...
  766  
  767  class TestHamiltonAR1SwitchTVTP(MarkovAutoregression):
  768:     @classmethod
  769      def setup_class(cls):
  770          # Results from E-views:
  ...
  808  
  809  class TestFilardo(MarkovAutoregression):
  810:     @classmethod
  811      def setup_class(cls):
  812          path = os.path.join(current_path, 'results', 'mar_filardo.csv')
  ...
  849  
  850  class TestFilardoPandas(MarkovAutoregression):
  851:     @classmethod
  852      def setup_class(cls):
  853          path = os.path.join(current_path, 'results', 'mar_filardo.csv')

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/tsa/regime_switching/tests/test_markov_regression.py:
  408  
  409  class MarkovRegression(object):
  410:     @classmethod
  411      def setup_class(cls, true, endog, atol=1e-5, rtol=1e-7, **kwargs):
  412          cls.model = markov_regression.MarkovRegression(endog, **kwargs)
  ...
  748  class TestFedFundsConst(MarkovRegression):
  749      # Results from Stata, see http://www.stata.com/manuals14/tsmswitch.pdf
  750:     @classmethod
  751      def setup_class(cls):
  752          path = os.path.join(current_path, 'results',
  ...
  900  class TestFedFundsConstShort(MarkovRegression):
  901      # This is just a set of regression tests
  902:     @classmethod
  903      def setup_class(cls):
  904          true = {
  ...
  962  class TestFedFundsConstL1(MarkovRegression):
  963      # Results from Stata, see http://www.stata.com/manuals14/tsmswitch.pdf
  964:     @classmethod
  965      def setup_class(cls):
  966          true = {
  ...
  985  class TestFedFundsConstL1Exog(MarkovRegression):
  986      # Results from Stata, see http://www.stata.com/manuals14/tsmswitch.pdf
  987:     @classmethod
  988      def setup_class(cls):
  989          path = os.path.join(current_path, 'results',
  ...
 1047  class TestFedFundsConstL1Exog3(MarkovRegression):
 1048      # Results from Stata, see http://www.stata.com/manuals14/tsmswitch.pdf
 1049:     @classmethod
 1050      def setup_class(cls):
 1051          true = {
 ....
 1073  class TestAreturnsConstL1Variance(MarkovRegression):
 1074      # Results from Stata, see http://www.stata.com/manuals14/tsmswitch.pdf
 1075:     @classmethod
 1076      def setup_class(cls):
 1077          true = {
 ....
 1102  class TestMumpspcNoconstL1Variance(MarkovRegression):
 1103      # Results from Stata, see http://www.stata.com/manuals14/tsmswitch.pdf
 1104:     @classmethod
 1105      def setup_class(cls):
 1106          true = {

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/tsa/statespace/mlemodel.py:
 1497          return irfs
 1498  
 1499:     @classmethod
 1500      def from_formula(cls, formula, data, subset=None):
 1501          """

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/tsa/statespace/tests/test_dynamic_factor.py:
   32  
   33  class CheckDynamicFactor(object):
   34:     @classmethod
   35      def setup_class(cls, true, k_factors, factor_order, cov_type='approx',
   36                   included_vars=['dln_inv', 'dln_inc', 'dln_consump'],
   ..
  142      Test for a dynamic factor model with 1 AR(2) factor
  143      """
  144:     @classmethod
  145      def setup_class(cls):
  146          true = results_dynamic_factor.lutkepohl_dfm.copy()
  ...
  157      Test for a dynamic factor model with two VAR(1) factors
  158      """
  159:     @classmethod
  160      def setup_class(cls):
  161          true = results_dynamic_factor.lutkepohl_dfm2.copy()
  ...
  251      Test for a dynamic factor model with 1 exogenous regressor: a constant
  252      """
  253:     @classmethod
  254      def setup_class(cls):
  255          true = results_dynamic_factor.lutkepohl_dfm_exog1.copy()
  ...
  276      and a time-trend
  277      """
  278:     @classmethod
  279      def setup_class(cls):
  280          true = results_dynamic_factor.lutkepohl_dfm_exog2.copy()
  ...
  364      - Innovations are correlated
  365      """
  366:     @classmethod
  367      def setup_class(cls):
  368          true = results_dynamic_factor.lutkepohl_dfm_gen.copy()
  ...
  483      - Innovations are correlated
  484      """
  485:     @classmethod
  486      def setup_class(cls):
  487          true = results_dynamic_factor.lutkepohl_dfm_ar2.copy()
  ...
  508      are forced to have the same variance.
  509      """
  510:     @classmethod
  511      def setup_class(cls):
  512          true = results_dynamic_factor.lutkepohl_dfm_scalar.copy()
  ...
  533      Test for a static factor model (i.e. factors are not autocorrelated).
  534      """
  535:     @classmethod
  536      def setup_class(cls):
  537          true = results_dynamic_factor.lutkepohl_sfm.copy()
  ...
  555      errors cross-sectionally, but not auto-, correlated
  556      """
  557:     @classmethod
  558      def setup_class(cls):
  559          true = results_dynamic_factor.lutkepohl_sur.copy()
  ...
  582  
  583      """
  584:     @classmethod
  585      def setup_class(cls):
  586          true = results_dynamic_factor.lutkepohl_sur_auto.copy()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/tsa/statespace/tests/test_kalman.py:
   65      See `results.results_kalman_filter` for more information.
   66      """
   67:     @classmethod
   68      def setup_class(cls, dtype=float, conserve_memory=0, loglikelihood_burn=0):
   69          cls.true = results_kalman_filter.uc_uni
   ..
  140          )
  141  
  142:     @classmethod
  143      def init_filter(cls):
  144          # Use the appropriate Statespace model
  ...
  161          return model, kfilter
  162  
  163:     @classmethod
  164      def run_filter(cls):
  165          # Filter the data
  ...
  196      Basic single precision test for the loglikelihood and filtered states.
  197      """
  198:     @classmethod
  199      def setup_class(cls):
  200          raise SkipTest('Not implemented')
  ...
  233      Basic double precision test for the loglikelihood and filtered states.
  234      """
  235:     @classmethod
  236      def setup_class(cls):
  237          super(TestClark1987Double, cls).setup_class(
  ...
  247      states.
  248      """
  249:     @classmethod
  250      def setup_class(cls):
  251          raise SkipTest('Not implemented')
  ...
  285      states.
  286      """
  287:     @classmethod
  288      def setup_class(cls):
  289          super(TestClark1987DoubleComplex, cls).setup_class(
  ...
  298      Memory conservation test for the loglikelihood and filtered states.
  299      """
  300:     @classmethod
  301      def setup_class(cls):
  302          super(TestClark1987Conserve, cls).setup_class(
  ...
  311      Forecasting test for the loglikelihood and filtered states.
  312      """
  313:     @classmethod
  314      def setup_class(cls, dtype=float, nforecast=100, conserve_memory=0):
  315          super(Clark1987Forecast, cls).setup_class(
  ...
  342      Basic double forecasting test for the loglikelihood and filtered states.
  343      """
  344:     @classmethod
  345      def setup_class(cls):
  346          super(TestClark1987ForecastDouble, cls).setup_class()
  ...
  354      states.
  355      """
  356:     @classmethod
  357      def setup_class(cls):
  358          super(TestClark1987ForecastDoubleComplex, cls).setup_class(
  ...
  368      states.
  369      """
  370:     @classmethod
  371      def setup_class(cls):
  372          super(TestClark1987ForecastConserve, cls).setup_class(
  ...
  382      states.
  383      """
  384:     @classmethod
  385      def setup_class(cls):
  386          super(TestClark1987ConserveAll, cls).setup_class(
  ...
  420      See `results.results_kalman_filter` for more information.
  421      """
  422:     @classmethod
  423      def setup_class(cls, dtype=float, conserve_memory=0, loglikelihood_burn=0):
  424          cls.true = results_kalman_filter.uc_bi
  ...
  503          )
  504  
  505:     @classmethod
  506      def init_filter(cls):
  507          # Use the appropriate Statespace model
  ...
  524          return model, kfilter
  525  
  526:     @classmethod
  527      def run_filter(cls):
  528          # Filter the data
  ...
  566      states with two-dimensional observation vector.
  567      """
  568:     @classmethod
  569      def setup_class(cls):
  570          super(TestClark1989, cls).setup_class(dtype=float, conserve_memory=0)
  ...
  578      two-dimensional observation vector.
  579      """
  580:     @classmethod
  581      def setup_class(cls):
  582          super(TestClark1989Conserve, cls).setup_class(
  ...
  592      two-dimensional observation vector.
  593      """
  594:     @classmethod
  595      def setup_class(cls, dtype=float, nforecast=100, conserve_memory=0):
  596          super(Clark1989Forecast, cls).setup_class(dtype, conserve_memory)
  ...
  633      Basic double forecasting test for the loglikelihood and filtered states.
  634      """
  635:     @classmethod
  636      def setup_class(cls):
  637          super(TestClark1989ForecastDouble, cls).setup_class()
  ...
  645      states.
  646      """
  647:     @classmethod
  648      def setup_class(cls):
  649          super(TestClark1989ForecastDoubleComplex, cls).setup_class(
  ...
  659      states.
  660      """
  661:     @classmethod
  662      def setup_class(cls):
  663          super(TestClark1989ForecastConserve, cls).setup_class(
  ...
  673      states.
  674      """
  675:     @classmethod
  676      def setup_class(cls):
  677          super(TestClark1989ConserveAll, cls).setup_class(

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/tsa/statespace/tests/test_options.py:
   42  
   43  class Options(object):
   44:     @classmethod
   45      def setup_class(cls, *args, **kwargs):
   46  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/tsa/statespace/tests/test_representation.py:
   44      See `results.results_kalman_filter` for more information.
   45      """
   46:     @classmethod
   47      def setup_class(cls, dtype=float, **kwargs):
   48          cls.true = results_kalman_filter.uc_uni
   ..
   89          cls.model.initialize_known(initial_state, initial_state_cov)
   90  
   91:     @classmethod
   92      def run_filter(cls):
   93          # Filter the data
   ..
  119      Basic single precision test for the loglikelihood and filtered states.
  120      """
  121:     @classmethod
  122      def setup_class(cls):
  123          raise SkipTest('Not implemented')
  ...
  132      Basic double precision test for the loglikelihood and filtered states.
  133      """
  134:     @classmethod
  135      def setup_class(cls):
  136          super(TestClark1987Double, cls).setup_class(
  ...
  145      states.
  146      """
  147:     @classmethod
  148      def setup_class(cls):
  149          raise SkipTest('Not implemented')
  ...
  159      states.
  160      """
  161:     @classmethod
  162      def setup_class(cls):
  163          super(TestClark1987DoubleComplex, cls).setup_class(
  ...
  171      Memory conservation test for the loglikelihood and filtered states.
  172      """
  173:     @classmethod
  174      def setup_class(cls):
  175          super(TestClark1987Conserve, cls).setup_class(
  ...
  183      Forecasting test for the loglikelihood and filtered states.
  184      """
  185:     @classmethod
  186      def setup_class(cls, dtype=float, nforecast=100, conserve_memory=0):
  187          super(Clark1987Forecast, cls).setup_class(
  ...
  216      Basic double forecasting test for the loglikelihood and filtered states.
  217      """
  218:     @classmethod
  219      def setup_class(cls):
  220          super(TestClark1987ForecastDouble, cls).setup_class()
  ...
  227      states.
  228      """
  229:     @classmethod
  230      def setup_class(cls):
  231          super(TestClark1987ForecastDoubleComplex, cls).setup_class(
  ...
  240      states.
  241      """
  242:     @classmethod
  243      def setup_class(cls):
  244          super(TestClark1987ForecastConserve, cls).setup_class(
  ...
  253      states.
  254      """
  255:     @classmethod
  256      def setup_class(cls):
  257          super(TestClark1987ConserveAll, cls).setup_class(
  ...
  290      See `results.results_kalman_filter` for more information.
  291      """
  292:     @classmethod
  293      def setup_class(cls, dtype=float, **kwargs):
  294          cls.true = results_kalman_filter.uc_bi
  ...
  343          cls.model.initialize_known(initial_state, initial_state_cov)
  344  
  345:     @classmethod
  346      def run_filter(cls):
  347          # Filter the data
  ...
  379      states with two-dimensional observation vector.
  380      """
  381:     @classmethod
  382      def setup_class(cls):
  383          super(TestClark1989, cls).setup_class(dtype=float, conserve_memory=0)
  ...
  394      two-dimensional observation vector.
  395      """
  396:     @classmethod
  397      def setup_class(cls):
  398          super(TestClark1989Conserve, cls).setup_class(
  ...
  407      two-dimensional observation vector.
  408      """
  409:     @classmethod
  410      def setup_class(cls, dtype=float, nforecast=100, conserve_memory=0):
  411          super(Clark1989Forecast, cls).setup_class(
  ...
  449      Basic double forecasting test for the loglikelihood and filtered states.
  450      """
  451:     @classmethod
  452      def setup_class(cls):
  453          super(TestClark1989ForecastDouble, cls).setup_class()
  ...
  460      states.
  461      """
  462:     @classmethod
  463      def setup_class(cls):
  464          super(TestClark1989ForecastDoubleComplex, cls).setup_class(
  ...
  473      states.
  474      """
  475:     @classmethod
  476      def setup_class(cls):
  477          super(TestClark1989ForecastConserve, cls).setup_class(
  ...
  486      states.
  487      """
  488:     @classmethod
  489      def setup_class(cls):
  490          super(TestClark1989ConserveAll, cls).setup_class(
  ...
  521  
  522  class TestClark1989PartialMissing(Clark1989):
  523:     @classmethod
  524      def setup_class(cls):
  525          super(TestClark1989PartialMissing, cls).setup_class()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/tsa/statespace/tests/test_sarimax.py:
   45      Standard errors are quite good for the OPG case.
   46      """
   47:     @classmethod
   48      def setup_class(cls):
   49          cls.true = results_sarimax.wpi1_stationary
   ..
   99      well-tested elsewhere.
  100      """
  101:     @classmethod
  102      def setup_class(cls):
  103          dlgdp = np.log(realgdp_results['value']).diff()[1:].values
  ...
  165      Stata arima documentation, Example 1
  166      """
  167:     @classmethod
  168      def setup_class(cls, true, *args, **kwargs):
  169          cls.true = true
  ...
  200      cases.
  201      """
  202:     @classmethod
  203      def setup_class(cls):
  204          super(TestARIMAStationary, cls).setup_class(
  ...
  263      step approximation cases.
  264      """
  265:     @classmethod
  266      def setup_class(cls, **kwargs):
  267          kwargs['initialization'] = 'approximate_diffuse'
  ...
  317      Stata arima documentation, Example 2
  318      """
  319:     @classmethod
  320      def setup_class(cls, true, *args, **kwargs):
  321          cls.true = true
  ...
  353      step approximation cases.
  354      """
  355:     @classmethod
  356      def setup_class(cls):
  357          super(TestAdditiveSeasonal, cls).setup_class(
  ...
  405      Stata arima documentation, Example 3
  406      """
  407:     @classmethod
  408      def setup_class(cls, true, *args, **kwargs):
  409          cls.true = true
  ...
  442      cases.
  443      """
  444:     @classmethod
  445      def setup_class(cls):
  446          super(TestAirlineHamilton, cls).setup_class(
  ...
  496      cases.
  497      """
  498:     @classmethod
  499      def setup_class(cls):
  500          super(TestAirlineHarvey, cls).setup_class(
  ...
  550      step approximation cases.
  551      """
  552:     @classmethod
  553      def setup_class(cls):
  554          super(TestAirlineStateDifferencing, cls).setup_class(
  ...
  618      Stata arima documentation, Example 4
  619      """
  620:     @classmethod
  621      def setup_class(cls, true, exog=None, *args, **kwargs):
  622          cls.true = true
  ...
  646      cases.
  647      """
  648:     @classmethod
  649      def setup_class(cls):
  650          super(TestFriedmanMLERegression, cls).setup_class(
  ...
  719      considered just a very basic "sanity" test.
  720      """
  721:     @classmethod
  722      def setup_class(cls):
  723          # Remove the regression coefficients from the parameters, since they
  ...
  825      `test_dynamic_predict` matches the second.
  826      """
  827:     @classmethod
  828      def setup_class(cls):
  829          super(TestFriedmanPredict, cls).setup_class(
  ...
  875      meaningful.
  876      """
  877:     @classmethod
  878      def setup_class(cls):
  879          true = dict(results_sarimax.friedman2_predict)
  ...
  922  
  923  class SARIMAXCoverageTest(object):
  924:     @classmethod
  925      def setup_class(cls, i, decimal=4, endog=None, *args, **kwargs):
  926          # Dataset
  ...
 1069      # arima wpi, arima(3,0,0) noconstant vce(oim)
 1070      # save_results 1
 1071:     @classmethod
 1072      def setup_class(cls, *args, **kwargs):
 1073          kwargs['order'] = (3,0,0)
 ....
 1078      # arima wpi, arima(3,0,0) noconstant vce(oim)
 1079      # save_results 1
 1080:     @classmethod
 1081      def setup_class(cls, *args, **kwargs):
 1082          kwargs['order'] = ([1,1,1],0,0)
 ....
 1087      # arima wpi c, arima(3,0,0) noconstant vce(oim)
 1088      # save_results 2
 1089:     @classmethod
 1090      def setup_class(cls, *args, **kwargs):
 1091          kwargs['order'] = (3,0,0)
 ....
 1099      # arima wpi c t, arima(3,0,0) noconstant vce(oim)
 1100      # save_results 3
 1101:     @classmethod
 1102      def setup_class(cls, *args, **kwargs):
 1103          kwargs['order'] = (3,0,0)
 ....
 1111      # arima wpi c t3, arima(3,0,0) noconstant vce(oim)
 1112      # save_results 4
 1113:     @classmethod
 1114      def setup_class(cls, *args, **kwargs):
 1115          kwargs['order'] = (3,0,0)
 ....
 1123      # arima wpi, arima(3,2,0) noconstant vce(oim)
 1124      # save_results 5
 1125:     @classmethod
 1126      def setup_class(cls, *args, **kwargs):
 1127          kwargs['order'] = (3,2,0)
 ....
 1132      # arima wpi, arima(3,0,0) sarima(0,2,0,4) noconstant vce(oim)
 1133      # save_results 6
 1134:     @classmethod
 1135      def setup_class(cls, *args, **kwargs):
 1136          kwargs['order'] = (3,0,0)
 ....
 1142      # arima wpi, arima(3,0,0) noconstant vce(oim) diffuse
 1143      # save_results 7
 1144:     @classmethod
 1145      def setup_class(cls, *args, **kwargs):
 1146          kwargs['order'] = (3,0,0)
 ....
 1153      # arima wpi, arima(3,0,0) noconstant vce(oim)
 1154      # save_results 1
 1155:     @classmethod
 1156      def setup_class(cls, *args, **kwargs):
 1157          kwargs['order'] = (3,0,0)
 ....
 1180      # arima wpi x, arima(3,0,0) noconstant vce(oim)
 1181      # save_results 8
 1182:     @classmethod
 1183      def setup_class(cls, *args, **kwargs):
 1184          kwargs['order'] = (3,0,0)
 ....
 1191      # arima wpi x, arima(3,0,0) noconstant vce(oim)
 1192      # save_results 8
 1193:     @classmethod
 1194      def setup_class(cls, *args, **kwargs):
 1195          kwargs['order'] = (3,0,0)
 ....
 1228      # arima wpi, arima(0,0,3) noconstant vce(oim)
 1229      # save_results 9
 1230:     @classmethod
 1231      def setup_class(cls, *args, **kwargs):
 1232          kwargs['order'] = (0,0,3)
 ....
 1237      # arima wpi, arima(0,0,3) noconstant vce(oim)
 1238      # save_results 9
 1239:     @classmethod
 1240      def setup_class(cls, *args, **kwargs):
 1241          kwargs['order'] = (0,0,[1,1,1])
 ....
 1246      # arima wpi c, arima(0,0,3) noconstant vce(oim)
 1247      # save_results 10
 1248:     @classmethod
 1249      def setup_class(cls, *args, **kwargs):
 1250          kwargs['order'] = (0,0,3)
 ....
 1256      # arima wpi c t, arima(0,0,3) noconstant vce(oim)
 1257      # save_results 11
 1258:     @classmethod
 1259      def setup_class(cls, *args, **kwargs):
 1260          kwargs['order'] = (0,0,3)
 ....
 1266      # arima wpi c t3, arima(0,0,3) noconstant vce(oim)
 1267      # save_results 12
 1268:     @classmethod
 1269      def setup_class(cls, *args, **kwargs):
 1270          kwargs['order'] = (0,0,3)
 ....
 1276      # arima wpi, arima(0,2,3) noconstant vce(oim)
 1277      # save_results 13
 1278:     @classmethod
 1279      def setup_class(cls, *args, **kwargs):
 1280          kwargs['order'] = (0,2,3)
 ....
 1285      # arima wpi, arima(0,0,3) sarima(0,2,0,4) noconstant vce(oim)
 1286      # save_results 14
 1287:     @classmethod
 1288      def setup_class(cls, *args, **kwargs):
 1289          kwargs['order'] = (0,0,3)
 ....
 1295      # arima wpi, arima(0,0,3) noconstant vce(oim) diffuse
 1296      # save_results 15
 1297:     @classmethod
 1298      def setup_class(cls, *args, **kwargs):
 1299          kwargs['order'] = (0,0,3)
 ....
 1306      # arima wpi x, arima(0,0,3) noconstant vce(oim)
 1307      # save_results 16
 1308:     @classmethod
 1309      def setup_class(cls, *args, **kwargs):
 1310          kwargs['order'] = (0,0,3)
 ....
 1317      # arima wpi, arima(3,0,3) noconstant vce(oim)
 1318      # save_results 17
 1319:     @classmethod
 1320      def setup_class(cls, *args, **kwargs):
 1321          kwargs['order'] = (3,0,3)
 ....
 1326      # arima wpi c, arima(3,0,2) noconstant vce(oim)
 1327      # save_results 18
 1328:     @classmethod
 1329      def setup_class(cls, *args, **kwargs):
 1330          kwargs['order'] = (3,0,2)
 ....
 1338      # arima wpi c t, arima(3,0,2) noconstant vce(oim)
 1339      # save_results 19
 1340:     @classmethod
 1341      def setup_class(cls, *args, **kwargs):
 1342          kwargs['order'] = (3,0,2)
 ....
 1350      # arima wpi c t3, arima(3,0,2) noconstant vce(oim)
 1351      # save_results 20
 1352:     @classmethod
 1353      def setup_class(cls, *args, **kwargs):
 1354          kwargs['order'] = (3,0,2)
 ....
 1362      # arima wpi, arima(3,2,2) noconstant vce(oim)
 1363      # save_results 21
 1364:     @classmethod
 1365      def setup_class(cls, *args, **kwargs):
 1366          kwargs['order'] = (3,2,2)
 ....
 1371      # arima wpi, arima(3,0,2) sarima(0,2,0,4) noconstant vce(oim)
 1372      # save_results 22
 1373:     @classmethod
 1374      def setup_class(cls, *args, **kwargs):
 1375          kwargs['order'] = (3,0,2)
 ....
 1381      # arima wpi, arima(3,2,2) sarima(0,2,0,4) noconstant vce(oim)
 1382      # save_results 23
 1383:     @classmethod
 1384      def setup_class(cls, *args, **kwargs):
 1385          kwargs['order'] = (3,2,2)
 ....
 1391      # arima wpi, arima(3,0,2) noconstant vce(oim) diffuse
 1392      # save_results 24
 1393:     @classmethod
 1394      def setup_class(cls, *args, **kwargs):
 1395          kwargs['order'] = (3,0,2)
 ....
 1402      # arima wpi x, arima(3,0,2) noconstant vce(oim)
 1403      # save_results 25
 1404:     @classmethod
 1405      def setup_class(cls, *args, **kwargs):
 1406          kwargs['order'] = (3,0,2)
 ....
 1413      # arima wpi, sarima(3,0,0,4) noconstant vce(oim)
 1414      # save_results 26
 1415:     @classmethod
 1416      def setup_class(cls, *args, **kwargs):
 1417          kwargs['order'] = (0,0,0)
 ....
 1423      # arima wpi, sarima(3,0,0,4) noconstant vce(oim)
 1424      # save_results 26
 1425:     @classmethod
 1426      def setup_class(cls, *args, **kwargs):
 1427          kwargs['order'] = (0,0,0)
 ....
 1433      # arima wpi c, sarima(3,0,0,4) noconstant vce(oim)
 1434      # save_results 27
 1435:     @classmethod
 1436      def setup_class(cls, *args, **kwargs):
 1437          kwargs['order'] = (0,0,0)
 ....
 1446      # arima wpi c t, sarima(3,0,0,4) noconstant vce(oim)
 1447      # save_results 28
 1448:     @classmethod
 1449      def setup_class(cls, *args, **kwargs):
 1450          kwargs['order'] = (0,0,0)
 ....
 1459      # arima wpi c t3, sarima(3,0,0,4) noconstant vce(oim)
 1460      # save_results 29
 1461:     @classmethod
 1462      def setup_class(cls, *args, **kwargs):
 1463          kwargs['order'] = (0,0,0)
 ....
 1472      # arima wpi, arima(0,2,0) sarima(3,0,0,4) noconstant vce(oim)
 1473      # save_results 30
 1474:     @classmethod
 1475      def setup_class(cls, *args, **kwargs):
 1476          kwargs['order'] = (0,2,0)
 ....
 1482      # arima wpi, sarima(3,2,0,4) noconstant vce(oim)
 1483      # save_results 31
 1484:     @classmethod
 1485      def setup_class(cls, *args, **kwargs):
 1486          kwargs['order'] = (0,0,0)
 ....
 1492      # arima wpi, sarima(3,0,0,4) noconstant vce(oim) diffuse
 1493      # save_results 32
 1494:     @classmethod
 1495      def setup_class(cls, *args, **kwargs):
 1496          kwargs['order'] = (0,0,0)
 ....
 1504      # arima wpi x, sarima(3,0,0,4) noconstant vce(oim)
 1505      # save_results 33
 1506:     @classmethod
 1507      def setup_class(cls, *args, **kwargs):
 1508          kwargs['order'] = (0,0,0)
 ....
 1516      # arima wpi, sarima(0,0,3,4) noconstant vce(oim)
 1517      # save_results 34
 1518:     @classmethod
 1519      def setup_class(cls, *args, **kwargs):
 1520          kwargs['order'] = (0,0,0)
 ....
 1526      # arima wpi, sarima(0,0,3,4) noconstant vce(oim)
 1527      # save_results 34
 1528:     @classmethod
 1529      def setup_class(cls, *args, **kwargs):
 1530          kwargs['order'] = (0,0,0)
 ....
 1536      # arima wpi c, sarima(0,0,3,4) noconstant vce(oim)
 1537      # save_results 35
 1538:     @classmethod
 1539      def setup_class(cls, *args, **kwargs):
 1540          kwargs['order'] = (0,0,0)
 ....
 1548      # arima wpi c t, sarima(0,0,3,4) noconstant vce(oim)
 1549      # save_results 36
 1550:     @classmethod
 1551      def setup_class(cls, *args, **kwargs):
 1552          kwargs['order'] = (0,0,0)
 ....
 1559      # arima wpi c t3, sarima(0,0,3,4) noconstant vce(oim)
 1560      # save_results 37
 1561:     @classmethod
 1562      def setup_class(cls, *args, **kwargs):
 1563          kwargs['order'] = (0,0,0)
 ....
 1571      # arima wpi, arima(0,2,0) sarima(0,0,3,4) noconstant vce(oim)
 1572      # save_results 38
 1573:     @classmethod
 1574      def setup_class(cls, *args, **kwargs):
 1575          kwargs['order'] = (0,2,0)
 ....
 1581      # arima wpi, sarima(0,2,3,4) noconstant vce(oim)
 1582      # save_results 39
 1583:     @classmethod
 1584      def setup_class(cls, *args, **kwargs):
 1585          kwargs['order'] = (0,0,0)
 ....
 1591      # arima wpi, sarima(0,0,3,4) noconstant vce(oim) diffuse
 1592      # save_results 40
 1593:     @classmethod
 1594      def setup_class(cls, *args, **kwargs):
 1595          kwargs['order'] = (0,0,0)
 ....
 1603      # arima wpi x, sarima(0,0,3,4) noconstant vce(oim)
 1604      # save_results 41
 1605:     @classmethod
 1606      def setup_class(cls, *args, **kwargs):
 1607          kwargs['order'] = (0,0,0)
 ....
 1615      # arima wpi, sarima(3,0,2,4) noconstant vce(oim)
 1616      # save_results 42
 1617:     @classmethod
 1618      def setup_class(cls, *args, **kwargs):
 1619          kwargs['order'] = (0,0,0)
 ....
 1625      # arima wpi c, sarima(3,0,2,4) noconstant vce(oim)
 1626      # save_results 43
 1627:     @classmethod
 1628      def setup_class(cls, *args, **kwargs):
 1629          kwargs['order'] = (0,0,0)
 ....
 1638      # arima wpi c t, sarima(3,0,2,4) noconstant vce(oim)
 1639      # save_results 44
 1640:     @classmethod
 1641      def setup_class(cls, *args, **kwargs):
 1642          kwargs['order'] = (0,0,0)
 ....
 1651      # arima wpi c t3, sarima(3,0,2,4) noconstant vce(oim)
 1652      # save_results 45
 1653:     @classmethod
 1654      def setup_class(cls, *args, **kwargs):
 1655          kwargs['order'] = (0,0,0)
 ....
 1685      # arima wpi, arima(0,2,0) sarima(3,0,2,4) noconstant vce(oim)
 1686      # save_results 46
 1687:     @classmethod
 1688      def setup_class(cls, *args, **kwargs):
 1689          kwargs['order'] = (0,2,0)
 ....
 1695      # arima wpi, sarima(3,2,2,4) noconstant vce(oim)
 1696      # save_results 47
 1697:     @classmethod
 1698      def setup_class(cls, *args, **kwargs):
 1699          kwargs['order'] = (0,0,0)
 ....
 1705      # arima wpi, arima(0,2,0) sarima(3,2,2,4) noconstant vce(oim)
 1706      # save_results 48
 1707:     @classmethod
 1708      def setup_class(cls, *args, **kwargs):
 1709          kwargs['order'] = (0,2,0)
 ....
 1735      # arima wpi, sarima(3,0,2,4) noconstant vce(oim) diffuse
 1736      # save_results 49
 1737:     @classmethod
 1738      def setup_class(cls, *args, **kwargs):
 1739          kwargs['order'] = (0,0,0)
 ....
 1748      # arima wpi x, sarima(3,0,2,4) noconstant vce(oim)
 1749      # save_results 50
 1750:     @classmethod
 1751      def setup_class(cls, *args, **kwargs):
 1752          kwargs['order'] = (0,0,0)
 ....
 1760      # arima wpi x, arima(3,2,2) sarima(3,2,2,4) noconstant vce(oim)
 1761      # save_results 51
 1762:     @classmethod
 1763      def setup_class(cls, *args, **kwargs):
 1764          kwargs['order'] = (3,2,2)
 ....
 1772      # arima wpi x, arima(3,2,2) sarima(3,2,2,4) noconstant vce(oim)
 1773      # save_results 51
 1774:     @classmethod
 1775      def setup_class(cls, *args, **kwargs):
 1776          kwargs['order'] = (3,2,2)
 ....
 1786      # arima wpi x, arima(3,2,2) sarima(3,2,2,4) noconstant vce(oim) diffuse
 1787      # save_results 52
 1788:     @classmethod
 1789      def setup_class(cls, *args, **kwargs):
 1790          kwargs['order'] = (3,2,2)
 ....
 1803      # arima wpi2 x c t3, arima(3,0,2) noconstant vce(oim)
 1804      # save_results 53
 1805:     @classmethod
 1806      def setup_class(cls, *args, **kwargs):
 1807          endog = np.r_[results_sarimax.wpi1_data]

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/tsa/statespace/tests/test_smoothing.py:
   28  
   29  class TestStatesAR3(object):
   30:     @classmethod
   31      def setup_class(cls, *args, **kwargs):
   32          # Dataset / Stata comparison
   ..
  142  
  143  class TestStatesMissingAR3(object):
  144:     @classmethod
  145      def setup_class(cls, *args, **kwargs):
  146          # Dataset
  ...
  232      not.
  233      """
  234:     @classmethod
  235      def setup_class(cls):
  236          # Results

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/tsa/statespace/tests/test_varmax.py:
  118  
  119  class CheckLutkepohl(CheckVARMAX):
  120:     @classmethod
  121      def setup_class(cls, true, order, trend, error_cov_type, cov_type='approx',
  122               included_vars=['dln_inv', 'dln_inc', 'dln_consump'],
  ...
  147  
  148  class TestVAR(CheckLutkepohl):
  149:     @classmethod
  150      def setup_class(cls):
  151          true = results_varmax.lutkepohl_var1.copy()
  ...
  200  
  201  class TestVAR_diagonal(CheckLutkepohl):
  202:     @classmethod
  203      def setup_class(cls):
  204          true = results_varmax.lutkepohl_var1_diag.copy()
  ...
  266      measurement errors is correct.
  267      """
  268:     @classmethod
  269      def setup_class(cls):
  270          true = results_varmax.lutkepohl_var1_diag_meas.copy()
  ...
  354  
  355  class TestVAR_obs_intercept(CheckLutkepohl):
  356:     @classmethod
  357      def setup_class(cls):
  358          true = results_varmax.lutkepohl_var1_obs_intercept.copy()
  ...
  385      # Note: unlike the other tests in this file, this is against the Stata
  386      # var function rather than the Stata dfactor function
  387:     @classmethod
  388      def setup_class(cls):
  389          true = results_varmax.lutkepohl_var1_exog.copy()
  ...
  483      # this model. Likely the small discrepancy (see the results file) is from
  484      # the approximate diffuse initialization.
  485:     @classmethod
  486      def setup_class(cls):
  487          true = results_varmax.lutkepohl_var1_exog2.copy()
  ...
  525  
  526  class TestVAR2(CheckLutkepohl):
  527:     @classmethod
  528      def setup_class(cls):
  529          true = results_varmax.lutkepohl_var2.copy()
  ...
  582  
  583  class CheckFREDManufacturing(CheckVARMAX):
  584:     @classmethod
  585      def setup_class(cls, true, order, trend, error_cov_type, cov_type='approx',
  586                   **kwargs):
  ...
  608      """
  609  
  610:     @classmethod
  611      def setup_class(cls):
  612          true = results_varmax.fred_varma11.copy()
  ...
  691      """
  692  
  693:     @classmethod
  694      def setup_class(cls):
  695          true = results_varmax.fred_vma1.copy()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/tsa/tests/test_ar.py:
   46      Test AR fit by OLS with a constant.
   47      """
   48:     @classmethod
   49      def setupClass(cls):
   50          data = sm.datasets.sunspots.load()
   ..
   83      Test AR fit by OLS without a constant.
   84      """
   85:     @classmethod
   86      def setupClass(cls):
   87          data = sm.datasets.sunspots.load()
   ..
  119  
  120  class TestARMLEConstant(object):
  121:     @classmethod
  122      def setupClass(cls):
  123          data = sm.datasets.sunspots.load()
  ...
  222  
  223  class TestAutolagAR(object):
  224:     @classmethod
  225      def setupClass(cls):
  226          data = sm.datasets.sunspots.load()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/tsa/tests/test_arima.py:
  193  
  194  class Test_Y_ARMA11_NoConst(CheckArmaResultsMixin, CheckForecastMixin):
  195:     @classmethod
  196      def setupClass(cls):
  197          endog = y_arma[:,0]
  ...
  211  
  212  class Test_Y_ARMA14_NoConst(CheckArmaResultsMixin):
  213:     @classmethod
  214      def setupClass(cls):
  215          endog = y_arma[:,1]
  ...
  220  @dec.slow
  221  class Test_Y_ARMA41_NoConst(CheckArmaResultsMixin, CheckForecastMixin):
  222:     @classmethod
  223      def setupClass(cls):
  224          endog = y_arma[:,2]
  ...
  231  
  232  class Test_Y_ARMA22_NoConst(CheckArmaResultsMixin):
  233:     @classmethod
  234      def setupClass(cls):
  235          endog = y_arma[:,3]
  ...
  239  
  240  class Test_Y_ARMA50_NoConst(CheckArmaResultsMixin, CheckForecastMixin):
  241:     @classmethod
  242      def setupClass(cls):
  243          endog = y_arma[:,4]
  ...
  249  
  250  class Test_Y_ARMA02_NoConst(CheckArmaResultsMixin):
  251:     @classmethod
  252      def setupClass(cls):
  253          endog = y_arma[:,5]
  ...
  257  
  258  class Test_Y_ARMA11_Const(CheckArmaResultsMixin, CheckForecastMixin):
  259:     @classmethod
  260      def setupClass(cls):
  261          endog = y_arma[:,6]
  ...
  267  
  268  class Test_Y_ARMA14_Const(CheckArmaResultsMixin):
  269:     @classmethod
  270      def setupClass(cls):
  271          endog = y_arma[:,7]
  ...
  275  
  276  class Test_Y_ARMA41_Const(CheckArmaResultsMixin, CheckForecastMixin):
  277:     @classmethod
  278      def setupClass(cls):
  279          endog = y_arma[:,8]
  ...
  290  
  291  class Test_Y_ARMA22_Const(CheckArmaResultsMixin):
  292:     @classmethod
  293      def setupClass(cls):
  294          endog = y_arma[:,9]
  ...
  298  
  299  class Test_Y_ARMA50_Const(CheckArmaResultsMixin, CheckForecastMixin):
  300:     @classmethod
  301      def setupClass(cls):
  302          endog = y_arma[:,10]
  ...
  308  
  309  class Test_Y_ARMA02_Const(CheckArmaResultsMixin):
  310:     @classmethod
  311      def setupClass(cls):
  312          endog = y_arma[:,11]
  ...
  317  # cov_params and tvalues are off still but not as much vs. R
  318  class Test_Y_ARMA11_NoConst_CSS(CheckArmaResultsMixin):
  319:     @classmethod
  320      def setupClass(cls):
  321          endog = y_arma[:,0]
  ...
  328  # better vs. R
  329  class Test_Y_ARMA14_NoConst_CSS(CheckArmaResultsMixin):
  330:     @classmethod
  331      def setupClass(cls):
  332          endog = y_arma[:,1]
  ...
  342  # maroot is off because maparams is off a bit (adjust tolerance?)
  343  class Test_Y_ARMA41_NoConst_CSS(CheckArmaResultsMixin):
  344:     @classmethod
  345      def setupClass(cls):
  346          endog = y_arma[:,2]
  ...
  356  #same notes as above
  357  class Test_Y_ARMA22_NoConst_CSS(CheckArmaResultsMixin):
  358:     @classmethod
  359      def setupClass(cls):
  360          endog = y_arma[:,3]
  ...
  375  # consistent with the rest of the models
  376  class Test_Y_ARMA50_NoConst_CSS(CheckArmaResultsMixin):
  377:     @classmethod
  378      def setupClass(cls):
  379          endog = y_arma[:,4]
  ...
  386  
  387  class Test_Y_ARMA02_NoConst_CSS(CheckArmaResultsMixin):
  388:     @classmethod
  389      def setupClass(cls):
  390          endog = y_arma[:,5]
  ...
  396  #NOTE: our results are close to --x-12-arima option and R
  397  class Test_Y_ARMA11_Const_CSS(CheckArmaResultsMixin):
  398:     @classmethod
  399      def setupClass(cls):
  400          endog = y_arma[:,6]
  ...
  408  
  409  class Test_Y_ARMA14_Const_CSS(CheckArmaResultsMixin):
  410:     @classmethod
  411      def setupClass(cls):
  412          endog = y_arma[:,7]
  ...
  419  
  420  class Test_Y_ARMA41_Const_CSS(CheckArmaResultsMixin):
  421:     @classmethod
  422      def setupClass(cls):
  423          endog = y_arma[:,8]
  ...
  432  
  433  class Test_Y_ARMA22_Const_CSS(CheckArmaResultsMixin):
  434:     @classmethod
  435      def setupClass(cls):
  436          endog = y_arma[:,9]
  ...
  443  
  444  class Test_Y_ARMA50_Const_CSS(CheckArmaResultsMixin):
  445:     @classmethod
  446      def setupClass(cls):
  447          endog = y_arma[:,10]
  ...
  455  
  456  class Test_Y_ARMA02_Const_CSS(CheckArmaResultsMixin):
  457:     @classmethod
  458      def setupClass(cls):
  459          endog = y_arma[:,11]
  ...
  540  class Test_ARIMA101(CheckArmaResultsMixin):
  541      # just make sure this works
  542:     @classmethod
  543      def setupClass(cls):
  544          endog = y_arma[:,6]
  ...
  554  class Test_ARIMA111(CheckArimaResultsMixin, CheckForecastMixin,
  555                      CheckDynamicForecastMixin):
  556:     @classmethod
  557      def setupClass(cls):
  558          cpi = load_macrodata().data['cpi']
  ...
  585  class Test_ARIMA111CSS(CheckArimaResultsMixin, CheckForecastMixin,
  586                         CheckDynamicForecastMixin):
  587:     @classmethod
  588      def setupClass(cls):
  589          cpi = load_macrodata().data['cpi']
  ...
  616  
  617  class Test_ARIMA112CSS(CheckArimaResultsMixin):
  618:     @classmethod
  619      def setupClass(cls):
  620          cpi = load_macrodata().data['cpi']
  ...
  653  
  654  #class Test_ARIMADates(CheckArmaResults, CheckForecast, CheckDynamicForecast):
  655: #    @classmethod
  656  #    def setupClass(cls):
  657  #        from statsmodels.tsa.datetools import dates_from_range
  ...
 1917  class TestARMA00(TestCase):
 1918  
 1919:     @classmethod
 1920      def setup_class(cls):
 1921          from statsmodels.datasets.sunspots import load

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/tsa/tests/test_seasonal.py:
    6  
    7  class TestDecompose:
    8:     @classmethod
    9      def setupClass(cls):
   10          # even

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/tsa/tests/test_tsa_tools.py:
  106  
  107  class TestLagmat(unittest.TestCase):
  108:     @classmethod
  109      def setUpClass(cls):
  110          data = sm.datasets.macrodata.load()
  ...
  379  
  380  class TestDetrend(unittest.TestCase):
  381:     @classmethod
  382      def setup_class(cls):
  383          cls.data_1d = np.arange(5.0)
  ...
  426  
  427  class TestAddTrend(unittest.TestCase):
  428:     @classmethod
  429      def setup_class(cls):
  430          cls.n = 200
  ...
  554  
  555  class TestLagmat2DS(unittest.TestCase):
  556:     @classmethod
  557      def setUpClass(cls):
  558          data = sm.datasets.macrodata.load()

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/tsa/tests/test_x13.py:
   13  
   14  class TestX13(object):
   15:     @classmethod
   16      def setupClass(cls):
   17          if not _have_x13:

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/tsa/vector_ar/tests/test_svar.py:
   15  
   16  class TestSVAR(object):
   17:     @classmethod
   18      def setupClass(cls):
   19          mdata = sm.datasets.macrodata.load_pandas().data

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/statsmodels/tsa/vector_ar/tests/test_var.py:
  251  class TestVARResults(CheckIRF, CheckFEVD):
  252  
  253:     @classmethod
  254      def setupClass(cls):
  255          cls.p = 2

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/ZConfig/tests/test_info.py:
  113      class MockSectionType(object):
  114          name = None
  115:         @classmethod
  116          def isabstract(cls):
  117              return True

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/ZODB/fsIndex.py:
  118              pickler.dump(None)
  119  
  120:     @classmethod
  121      def load(class_, fname):
  122          with open(fname, 'rb') as f:

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/zope.testing-4.6.2.dist-info/DESCRIPTION.rst:
  734      >>> old_mock = sys.modules.get('mock')
  735      >>> class FauxMock:
  736:     ...     @classmethod
  737      ...     def patch(self, *args, **kw):
  738      ...         return Manager(*args, **kw)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/zope.testing-4.6.2.dist-info/METADATA:
  764      >>> old_mock = sys.modules.get('mock')
  765      >>> class FauxMock:
  766:     ...     @classmethod
  767      ...     def patch(self, *args, **kw):
  768      ...         return Manager(*args, **kw)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/zope/component/testlayer.py:
   32      zope.testing implements an advanced mechanism so that layer setUp,
   33      tearDown, testSetUp and testTearDown code gets called in the right
   34:     order. These methods are supposed to be @classmethods and should
   35      not use super() as the test runner is supposed to take care of that.
   36  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/zope/interface/declarations.py:
  131      __name__ = '?'
  132  
  133:     @classmethod
  134      def named(cls, name, *interfaces):
  135          # Implementation method: Produce an Implements interface with

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/zope/pagetemplate/pagetemplate.py:
  261          return output.getvalue()
  262  
  263:     @classmethod
  264      def cook(cls, source_file, text, engine, content_type):
  265          if content_type == 'text/html':

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/zope/schema/vocabulary.py:
   86              directlyProvides(self, *interfaces)
   87  
   88:     @classmethod
   89      def fromItems(cls, items, *interfaces):
   90          """Construct a vocabulary from a list of (token, value) pairs.
   ..
  100          return cls(terms, *interfaces)
  101  
  102:     @classmethod
  103      def fromValues(cls, values, *interfaces):
  104          """Construct a vocabulary from a simple list.
  ...
  116          return cls(terms, *interfaces)
  117  
  118:     @classmethod
  119      def createTerm(cls, *args):
  120          """Create a single term from data.
  ...
  252          return self._terms.items()
  253  
  254:     @classmethod
  255      def fromDict(cls, dict_, *interfaces):
  256          """Constructs a vocabulary from a dictionary-like object (like dict or

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/zope/testing/setupstack.txt:
  145      >>> old_mock = sys.modules.get('mock')
  146      >>> class FauxMock:
  147:     ...     @classmethod
  148      ...     def patch(self, *args, **kw):
  149      ...         return Manager(*args, **kw)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/site-packages/zope/testrunner/tests/testrunner-debugging-layer-setup.test:
   20      ...
   21      ... class Layer:
   22:     ...     @classmethod
   23      ...     def setUp(self):
   24      ...         x = 1
   ..
   74      ...
   75      ... class Layer1:
   76:     ...     @classmethod
   77      ...     def setUp(self):
   78      ...         pass
   79      ...
   80:     ...     @classmethod
   81      ...     def tearDown(self):
   82      ...         raise NotImplementedError
   83      ...
   84      ... class Layer2:
   85:     ...     @classmethod
   86      ...     def setUp(self):
   87      ...         x = 1

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/tarfile.py:
  891          return buf + self._create_header(info, USTAR_FORMAT, "ascii", "replace")
  892  
  893:     @classmethod
  894      def create_pax_global_header(cls, pax_headers):
  895          """Return the object as a pax global header block sequence.
  ...
  951          return payload
  952  
  953:     @classmethod
  954      def _create_gnu_long_header(cls, name, type, encoding, errors):
  955          """Return a GNUTYPE_LONGNAME or GNUTYPE_LONGLINK sequence
  ...
  968                  cls._create_payload(name)
  969  
  970:     @classmethod
  971      def _create_pax_generic_header(cls, pax_headers, type, encoding):
  972          """Return a POSIX.1-2008 extended or global header sequence
  ...
 1019                  cls._create_payload(records)
 1020  
 1021:     @classmethod
 1022      def frombuf(cls, buf, encoding, errors):
 1023          """Construct a TarInfo object from a 512 byte bytes object.
 ....
 1082          return obj
 1083  
 1084:     @classmethod
 1085      def fromtarfile(cls, tarfile):
 1086          """Return the next TarInfo object from TarFile object
 ....
 1517      # by adding it to the mapping in OPEN_METH.
 1518  
 1519:     @classmethod
 1520      def open(cls, name=None, mode="r", fileobj=None, bufsize=RECORDSIZE, **kwargs):
 1521          """Open a tar archive for reading, writing or appending. Return
 ....
 1608          raise ValueError("undiscernible mode")
 1609  
 1610:     @classmethod
 1611      def taropen(cls, name, mode="r", fileobj=None, **kwargs):
 1612          """Open uncompressed tar archive name for reading or writing.
 ....
 1616          return cls(name, mode, fileobj, **kwargs)
 1617  
 1618:     @classmethod
 1619      def gzopen(cls, name, mode="r", fileobj=None, compresslevel=9, **kwargs):
 1620          """Open gzip compressed tar archive name for reading or writing.
 ....
 1650          return t
 1651  
 1652:     @classmethod
 1653      def bz2open(cls, name, mode="r", fileobj=None, compresslevel=9, **kwargs):
 1654          """Open bzip2 compressed tar archive name for reading or writing.
 ....
 1679          return t
 1680  
 1681:     @classmethod
 1682      def xzopen(cls, name, mode="r", fileobj=None, preset=None, **kwargs):
 1683          """Open lzma compressed tar archive name for reading or writing.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/tempfile.py:
  793              warn_message="Implicitly cleaning up {!r}".format(self))
  794  
  795:     @classmethod
  796      def _cleanup(cls, name, warn_message):
  797          _shutil.rmtree(name)

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/.tox/py36/lib/python3.6/weakref.py:
  590                  (type(self).__name__, id(self), type(obj).__name__, id(obj))
  591  
  592:     @classmethod
  593      def _select_for_exit(cls):
  594          # Return live finalizers marked for exit, oldest first
  ...
  597          return [f for (f,i) in L]
  598  
  599:     @classmethod
  600      def _exitfunc(cls):
  601          # At shutdown invoke finalizers for which atexit is true.

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/src/nti/machine_learning/preprocessing/scaling.py:
   15  
   16  class Standardization(object):
   17: 	@class 
   18  	def 
   19  

/Users/ega/Projects/learning_buildout/sources/nti.machine_learning/src/nti/machine_learning/tests/__init__.py:
   35      set_up_packages = ('nti.machine_learning',)
   36  
   37:     @classmethod
   38      def setUp(cls):
   39          setHooks()
   40          cls.setUpPackages()
   41  
   42:     @classmethod
   43      def tearDown(cls):
   44          cls.tearDownPackages()
   45          zope.testing.cleanup.cleanUp()
   46  
   47:     @classmethod
   48      def testSetUp(cls, unused_test=None):
   49          setHooks()
   50  
   51:     @classmethod
   52      def testTearDown(cls):
   53          pass
   ..
   58      layer = SharedConfiguringTestLayer
   59  
   60:     @classmethod
   61      def setUp(self):
   62          examples = []
   ..
   74      layer = SharedConfiguringTestLayer
   75  
   76:     @classmethod
   77      def setUp(self):
   78          points = []
   ..
   94      layer = SharedConfiguringTestLayer
   95  
   96:     @classmethod
   97      def setUp(self):
   98          iris = load_iris()
   ..
  106      layer = SharedConfiguringTestLayer
  107  
  108:     @classmethod
  109      def setUp(self):
  110          iris = load_iris()
  ...
  118      layer = SharedConfiguringTestLayer
  119  
  120:     @classmethod
  121      def setUp(self):
  122          data = load_breast_cancer()
  ...
  130      layer = SharedConfiguringTestLayer
  131  
  132:     @classmethod
  133      def setUp(self):
  134          boston = load_boston()

1963 matches across 421 files
